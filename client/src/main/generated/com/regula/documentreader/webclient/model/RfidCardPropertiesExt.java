/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.documentreader.webclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.model.RfidAChip;
import com.regula.documentreader.webclient.model.RfidBaudRate;
import com.regula.documentreader.webclient.model.RfidType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;


/**
* Structure is used to store extended information about the characteristics of the RFID-chip located in the scope of the reader
*/

public class RfidCardPropertiesExt {
        public static final String SERIALIZED_NAME_RF_I_D_TYPE = "RFID_Type";
        @SerializedName(SERIALIZED_NAME_RF_I_D_TYPE)
            private RfidType rfIDType;



        public static final String SERIALIZED_NAME_BAUDRATE1 = "Baudrate1";
        @SerializedName(SERIALIZED_NAME_BAUDRATE1)
            private String baudrate1;



        public static final String SERIALIZED_NAME_BAUDRATE2 = "Baudrate2";
        @SerializedName(SERIALIZED_NAME_BAUDRATE2)
            private String baudrate2;



        public static final String SERIALIZED_NAME_SUPPORT4 = "Support_4";
        @SerializedName(SERIALIZED_NAME_SUPPORT4)
            private Boolean support4;



        public static final String SERIALIZED_NAME_CHIP_TYPE_A = "ChipType_A";
        @SerializedName(SERIALIZED_NAME_CHIP_TYPE_A)
            private RfidAChip chipTypeA;



        public static final String SERIALIZED_NAME_SUPPORT_MIFARE = "Support_Mifare";
        @SerializedName(SERIALIZED_NAME_SUPPORT_MIFARE)
            private Boolean supportMifare;



        public static final String SERIALIZED_NAME_MIFARE_MEMORY = "MifareMemory";
        @SerializedName(SERIALIZED_NAME_MIFARE_MEMORY)
            private BigDecimal mifareMemory;



        public static final String SERIALIZED_NAME_U_I_D = "UID";
        @SerializedName(SERIALIZED_NAME_U_I_D)
            private String UID;



        public static final String SERIALIZED_NAME_A_T_Q_A = "ATQ_A";
        @SerializedName(SERIALIZED_NAME_A_T_Q_A)
            private Object ATQ_A = null;



        public static final String SERIALIZED_NAME_S_A_K = "SAK";
        @SerializedName(SERIALIZED_NAME_S_A_K)
            private Object SAK = null;



        public static final String SERIALIZED_NAME_A_T_Q_B = "ATQ_B";
        @SerializedName(SERIALIZED_NAME_A_T_Q_B)
            private Object ATQ_B = null;



        public static final String SERIALIZED_NAME_BIT_RATE_S = "BitRateS";
        @SerializedName(SERIALIZED_NAME_BIT_RATE_S)
            private RfidBaudRate bitRateS;



        public static final String SERIALIZED_NAME_BIT_RATE_R = "BitRateR";
        @SerializedName(SERIALIZED_NAME_BIT_RATE_R)
            private RfidBaudRate bitRateR;



        public static final String SERIALIZED_NAME_A_T_R = "ATR";
        @SerializedName(SERIALIZED_NAME_A_T_R)
            private String ATR;




            public RfidCardPropertiesExt withRfIDType(RfidType rfIDType) {
              this.rfIDType = rfIDType;
              return this;
            }


    /**
        * Get rfIDType
    * @return rfIDType
    **/
    
    

        public RfidType getRfIDType() {
        return rfIDType;
    }


            public void setRfIDType(RfidType rfIDType) {
            this.rfIDType = rfIDType;
        }


            public RfidCardPropertiesExt withBaudrate1(String baudrate1) {
              this.baudrate1 = baudrate1;
              return this;
            }


    /**
        * Numeric Baudrate1 value in hexadecimal format (e.g. 0x0000000F)
    * @return baudrate1
    **/
    
    

        public String getBaudrate1() {
        return baudrate1;
    }


            public void setBaudrate1(String baudrate1) {
            this.baudrate1 = baudrate1;
        }


            public RfidCardPropertiesExt withBaudrate2(String baudrate2) {
              this.baudrate2 = baudrate2;
              return this;
            }


    /**
        * Numeric Baudrate2 value in hexadecimal format
    * @return baudrate2
    **/
    
    

        public String getBaudrate2() {
        return baudrate2;
    }


            public void setBaudrate2(String baudrate2) {
            this.baudrate2 = baudrate2;
        }


            public RfidCardPropertiesExt withSupport4(Boolean support4) {
              this.support4 = support4;
              return this;
            }


    /**
        * Boolean Support_4 value
    * @return support4
    **/
    
    

        public Boolean getSupport4() {
        return support4;
    }


            public void setSupport4(Boolean support4) {
            this.support4 = support4;
        }


            public RfidCardPropertiesExt withChipTypeA(RfidAChip chipTypeA) {
              this.chipTypeA = chipTypeA;
              return this;
            }


    /**
        * Get chipTypeA
    * @return chipTypeA
    **/
    
    

        public RfidAChip getChipTypeA() {
        return chipTypeA;
    }


            public void setChipTypeA(RfidAChip chipTypeA) {
            this.chipTypeA = chipTypeA;
        }


            public RfidCardPropertiesExt withSupportMifare(Boolean supportMifare) {
              this.supportMifare = supportMifare;
              return this;
            }


    /**
        * Sign of support for ISO/IEC 14443-3 data exchange protocol
    * @return supportMifare
    **/
    
    

        public Boolean getSupportMifare() {
        return supportMifare;
    }


            public void setSupportMifare(Boolean supportMifare) {
            this.supportMifare = supportMifare;
        }


            public RfidCardPropertiesExt withMifareMemory(BigDecimal mifareMemory) {
              this.mifareMemory = mifareMemory;
              return this;
            }


    /**
        * Amount of operational memory MIFARE® of the chip, kilobytes
    * @return mifareMemory
    **/
    
    

        public BigDecimal getMifareMemory() {
        return mifareMemory;
    }


            public void setMifareMemory(BigDecimal mifareMemory) {
            this.mifareMemory = mifareMemory;
        }


            public RfidCardPropertiesExt withUID(String UID) {
              this.UID = UID;
              return this;
            }


    /**
        * UID contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. F9 4F 41 60)
    * @return UID
    **/
    
    

        public String getUID() {
        return UID;
    }


            public void setUID(String UID) {
            this.UID = UID;
        }


            public RfidCardPropertiesExt withATQA(Object ATQ_A) {
              this.ATQ_A = ATQ_A;
              return this;
            }


    /**
        * Reply of the «A» type chip to «REQA» command of ISO/IEC 14443-3 protocol (Answer To Request, Type A – ATQA) – for the internal use by the main control library
    * @return ATQ_A
    **/
            @javax.annotation.Nullable
    
    

        public Object getATQA() {
        return ATQ_A;
    }


            public void setATQA(Object ATQ_A) {
            this.ATQ_A = ATQ_A;
        }


            public RfidCardPropertiesExt withSAK(Object SAK) {
              this.SAK = SAK;
              return this;
            }


    /**
        * Response of type-A RFID-chip to SELECT command of ISO/IEC 14443-3 protocol (Select Acknowledge, SAK).
    * @return SAK
    **/
            @javax.annotation.Nullable
    
    

        public Object getSAK() {
        return SAK;
    }


            public void setSAK(Object SAK) {
            this.SAK = SAK;
        }


            public RfidCardPropertiesExt withATQB(Object ATQ_B) {
              this.ATQ_B = ATQ_B;
              return this;
            }


    /**
        * ATQ_B contents in text format. Each byte is represented by its hexadecimal value. The individual bytes are separated by spaces (e.g. 50 F9 4F 41 60 00 00 00 00 77 81 81)
    * @return ATQ_B
    **/
            @javax.annotation.Nullable
    
    

        public Object getATQB() {
        return ATQ_B;
    }


            public void setATQB(Object ATQ_B) {
            this.ATQ_B = ATQ_B;
        }


            public RfidCardPropertiesExt withBitRateS(RfidBaudRate bitRateS) {
              this.bitRateS = bitRateS;
              return this;
            }


    /**
        * Get bitRateS
    * @return bitRateS
    **/
    
    

        public RfidBaudRate getBitRateS() {
        return bitRateS;
    }


            public void setBitRateS(RfidBaudRate bitRateS) {
            this.bitRateS = bitRateS;
        }


            public RfidCardPropertiesExt withBitRateR(RfidBaudRate bitRateR) {
              this.bitRateR = bitRateR;
              return this;
            }


    /**
        * Get bitRateR
    * @return bitRateR
    **/
    
    

        public RfidBaudRate getBitRateR() {
        return bitRateR;
    }


            public void setBitRateR(RfidBaudRate bitRateR) {
            this.bitRateR = bitRateR;
        }


            public RfidCardPropertiesExt withATR(String ATR) {
              this.ATR = ATR;
              return this;
            }


    /**
        * ATR-string of RFID-chip
    * @return ATR
    **/
    
    

        public String getATR() {
        return ATR;
    }


            public void setATR(String ATR) {
            this.ATR = ATR;
        }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
        return true;
        }
        if (o == null || getClass() != o.getClass()) {
        return false;
        }
            RfidCardPropertiesExt rfidCardPropertiesExt = (RfidCardPropertiesExt) o;
            return Objects.equals(this.rfIDType, rfidCardPropertiesExt.rfIDType) &&
            Objects.equals(this.baudrate1, rfidCardPropertiesExt.baudrate1) &&
            Objects.equals(this.baudrate2, rfidCardPropertiesExt.baudrate2) &&
            Objects.equals(this.support4, rfidCardPropertiesExt.support4) &&
            Objects.equals(this.chipTypeA, rfidCardPropertiesExt.chipTypeA) &&
            Objects.equals(this.supportMifare, rfidCardPropertiesExt.supportMifare) &&
            Objects.equals(this.mifareMemory, rfidCardPropertiesExt.mifareMemory) &&
            Objects.equals(this.UID, rfidCardPropertiesExt.UID) &&
            Objects.equals(this.ATQ_A, rfidCardPropertiesExt.ATQ_A) &&
            Objects.equals(this.SAK, rfidCardPropertiesExt.SAK) &&
            Objects.equals(this.ATQ_B, rfidCardPropertiesExt.ATQ_B) &&
            Objects.equals(this.bitRateS, rfidCardPropertiesExt.bitRateS) &&
            Objects.equals(this.bitRateR, rfidCardPropertiesExt.bitRateR) &&
            Objects.equals(this.ATR, rfidCardPropertiesExt.ATR);
    }

    @Override
    public int hashCode() {
        return Objects.hash(rfIDType, baudrate1, baudrate2, support4, chipTypeA, supportMifare, mifareMemory, UID, ATQ_A, SAK, ATQ_B, bitRateS, bitRateR, ATR);
    }


@Override
public String toString() {
StringBuilder sb = new StringBuilder();
sb.append("class RfidCardPropertiesExt {\n");
    sb.append("    rfIDType: ").append(toIndentedString(rfIDType)).append("\n");
    sb.append("    baudrate1: ").append(toIndentedString(baudrate1)).append("\n");
    sb.append("    baudrate2: ").append(toIndentedString(baudrate2)).append("\n");
    sb.append("    support4: ").append(toIndentedString(support4)).append("\n");
    sb.append("    chipTypeA: ").append(toIndentedString(chipTypeA)).append("\n");
    sb.append("    supportMifare: ").append(toIndentedString(supportMifare)).append("\n");
    sb.append("    mifareMemory: ").append(toIndentedString(mifareMemory)).append("\n");
    sb.append("    UID: ").append(toIndentedString(UID)).append("\n");
    sb.append("    ATQ_A: ").append(toIndentedString(ATQ_A)).append("\n");
    sb.append("    SAK: ").append(toIndentedString(SAK)).append("\n");
    sb.append("    ATQ_B: ").append(toIndentedString(ATQ_B)).append("\n");
    sb.append("    bitRateS: ").append(toIndentedString(bitRateS)).append("\n");
    sb.append("    bitRateR: ").append(toIndentedString(bitRateR)).append("\n");
    sb.append("    ATR: ").append(toIndentedString(ATR)).append("\n");
sb.append("}");
return sb.toString();
}

/**
* Convert the given object to string with each line indented by 4 spaces
* (except the first line).
*/
private String toIndentedString(java.lang.Object o) {
if (o == null) {
return "null";
}
return o.toString().replace("\n", "\n    ");
}

}

