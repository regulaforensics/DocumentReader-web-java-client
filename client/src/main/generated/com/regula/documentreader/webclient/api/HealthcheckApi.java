/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.documentreader.webclient.api;

import com.regula.documentreader.webclient.ApiCallback;
import com.regula.documentreader.webclient.ApiClient;
import com.regula.documentreader.webclient.ApiException;
import com.regula.documentreader.webclient.ApiResponse;
import com.regula.documentreader.webclient.Configuration;
import com.regula.documentreader.webclient.Pair;
import com.regula.documentreader.webclient.ProgressRequestBody;
import com.regula.documentreader.webclient.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.regula.documentreader.webclient.model.DeviceInfo;
import com.regula.documentreader.webclient.model.DeviceInfoDeprecated;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HealthcheckApi {
    private ApiClient localVarApiClient;

    public HealthcheckApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HealthcheckApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for healthz
     * @param xRequestID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthzCall(String xRequestID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/healthz";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthzValidateBeforeCall(String xRequestID, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = healthzCall(xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Server healthcheck
     * 
     * @param xRequestID  (optional)
     * @return DeviceInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device info </td><td>  -  </td></tr>
     </table>
     */
    public DeviceInfo healthz(String xRequestID) throws ApiException {
        ApiResponse<DeviceInfo> localVarResp = healthzWithHttpInfo(xRequestID);
        return localVarResp.getData();
    }

    /**
     * Server healthcheck
     * 
     * @param xRequestID  (optional)
     * @return ApiResponse&lt;DeviceInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device info </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceInfo> healthzWithHttpInfo(String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = healthzValidateBeforeCall(xRequestID, null);
        Type localVarReturnType = new TypeToken<DeviceInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Server healthcheck (asynchronously)
     * 
     * @param xRequestID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthzAsync(String xRequestID, final ApiCallback<DeviceInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthzValidateBeforeCall(xRequestID, _callback);
        Type localVarReturnType = new TypeToken<DeviceInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ping
     * @param xRequestID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device info </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call pingCall(String xRequestID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/ping";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call pingValidateBeforeCall(String xRequestID, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = pingCall(xRequestID, _callback);
        return localVarCall;

    }

    /**
     * Server health check
     * 
     * @param xRequestID  (optional)
     * @return DeviceInfoDeprecated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device info </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DeviceInfoDeprecated ping(String xRequestID) throws ApiException {
        ApiResponse<DeviceInfoDeprecated> localVarResp = pingWithHttpInfo(xRequestID);
        return localVarResp.getData();
    }

    /**
     * Server health check
     * 
     * @param xRequestID  (optional)
     * @return ApiResponse&lt;DeviceInfoDeprecated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device info </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DeviceInfoDeprecated> pingWithHttpInfo(String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = pingValidateBeforeCall(xRequestID, null);
        Type localVarReturnType = new TypeToken<DeviceInfoDeprecated>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Server health check (asynchronously)
     * 
     * @param xRequestID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device info </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call pingAsync(String xRequestID, final ApiCallback<DeviceInfoDeprecated> _callback) throws ApiException {

        okhttp3.Call localVarCall = pingValidateBeforeCall(xRequestID, _callback);
        Type localVarReturnType = new TypeToken<DeviceInfoDeprecated>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readyz
     * @param xRequestID  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> License is valid </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> License is not valid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readyzCall(String xRequestID, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/readyz";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null) {
            localVarHeaderParams.put("X-RequestID", localVarApiClient.parameterToString(xRequestID));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readyzValidateBeforeCall(String xRequestID, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = readyzCall(xRequestID, _callback);
        return localVarCall;

    }

    /**
     * License healthcheck
     * 
     * @param xRequestID  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> License is valid </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> License is not valid </td><td>  -  </td></tr>
     </table>
     */
    public void readyz(String xRequestID) throws ApiException {
        readyzWithHttpInfo(xRequestID);
    }

    /**
     * License healthcheck
     * 
     * @param xRequestID  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> License is valid </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> License is not valid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> readyzWithHttpInfo(String xRequestID) throws ApiException {
        okhttp3.Call localVarCall = readyzValidateBeforeCall(xRequestID, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * License healthcheck (asynchronously)
     * 
     * @param xRequestID  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> License is valid </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> License is not valid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readyzAsync(String xRequestID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = readyzValidateBeforeCall(xRequestID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
