/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.documentreader.webclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.model.SymbolRecognitionResult;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;


/**
* Describes single row recognition results in multi-line text field of a document
*/

public class StringRecognitionResult {
        public static final String SERIALIZED_NAME_SYMBOLS_COUNT = "SymbolsCount";
        @SerializedName(SERIALIZED_NAME_SYMBOLS_COUNT)
            private BigDecimal symbolsCount;



        public static final String SERIALIZED_NAME_RESERVED = "Reserved";
        @SerializedName(SERIALIZED_NAME_RESERVED)
            private Object reserved = null;



        public static final String SERIALIZED_NAME_STRING_RESULT = "StringResult";
        @SerializedName(SERIALIZED_NAME_STRING_RESULT)
                private List<SymbolRecognitionResult> stringResult = new ArrayList<SymbolRecognitionResult>();



        public static final String SERIALIZED_NAME_BUF_LENGTH = "Buf_Length";
        @SerializedName(SERIALIZED_NAME_BUF_LENGTH)
            private BigDecimal bufLength;



        public static final String SERIALIZED_NAME_BUF_TEXT = "Buf_Text";
        @SerializedName(SERIALIZED_NAME_BUF_TEXT)
            private String bufText;




            public StringRecognitionResult withSymbolsCount(BigDecimal symbolsCount) {
              this.symbolsCount = symbolsCount;
              return this;
            }


    /**
        * Number of StringResult array elements
    * @return symbolsCount
    **/
    
    

        public BigDecimal getSymbolsCount() {
        return symbolsCount;
    }


            public void setSymbolsCount(BigDecimal symbolsCount) {
            this.symbolsCount = symbolsCount;
        }


            public StringRecognitionResult withReserved(Object reserved) {
              this.reserved = reserved;
              return this;
            }


    /**
        * Get reserved
    * @return reserved
    **/
        @javax.annotation.Nullable
    
    

        public Object getReserved() {
        return reserved;
    }


            public void setReserved(Object reserved) {
            this.reserved = reserved;
        }


            public StringRecognitionResult withStringResult(List<SymbolRecognitionResult> stringResult) {
              this.stringResult = stringResult;
              return this;
            }

            public StringRecognitionResult addStringResultItem(SymbolRecognitionResult stringResultItem) {
                this.stringResult.add(stringResultItem);
                return this;
            }

    /**
        * Array of recognition results for individual characters of a string
    * @return stringResult
    **/
    
    

        public  List<SymbolRecognitionResult> getStringResult() {
        return stringResult;
    }


            public void setStringResult(List<SymbolRecognitionResult> stringResult) {
            this.stringResult = stringResult;
        }


            public StringRecognitionResult withBufLength(BigDecimal bufLength) {
              this.bufLength = bufLength;
              return this;
            }


    /**
        * Buf_Text text string length
    * @return bufLength
    **/
        @javax.annotation.Nullable
    
    

        public BigDecimal getBufLength() {
        return bufLength;
    }


            public void setBufLength(BigDecimal bufLength) {
            this.bufLength = bufLength;
        }


            public StringRecognitionResult withBufText(String bufText) {
              this.bufText = bufText;
              return this;
            }


    /**
        * Text field data in UTF8 format. Results of reading different lines of a multi-line field are separated by &#39;^&#39;
    * @return bufText
    **/
        @javax.annotation.Nullable
    
    

        public String getBufText() {
        return bufText;
    }


            public void setBufText(String bufText) {
            this.bufText = bufText;
        }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
        return true;
        }
        if (o == null || getClass() != o.getClass()) {
        return false;
        }
            StringRecognitionResult stringRecognitionResult = (StringRecognitionResult) o;
            return Objects.equals(this.symbolsCount, stringRecognitionResult.symbolsCount) &&
            Objects.equals(this.reserved, stringRecognitionResult.reserved) &&
            Objects.equals(this.stringResult, stringRecognitionResult.stringResult) &&
            Objects.equals(this.bufLength, stringRecognitionResult.bufLength) &&
            Objects.equals(this.bufText, stringRecognitionResult.bufText);
    }

    @Override
    public int hashCode() {
        return Objects.hash(symbolsCount, reserved, stringResult, bufLength, bufText);
    }


@Override
public String toString() {
StringBuilder sb = new StringBuilder();
sb.append("class StringRecognitionResult {\n");
    sb.append("    symbolsCount: ").append(toIndentedString(symbolsCount)).append("\n");
    sb.append("    reserved: ").append(toIndentedString(reserved)).append("\n");
    sb.append("    stringResult: ").append(toIndentedString(stringResult)).append("\n");
    sb.append("    bufLength: ").append(toIndentedString(bufLength)).append("\n");
    sb.append("    bufText: ").append(toIndentedString(bufText)).append("\n");
sb.append("}");
return sb.toString();
}

/**
* Convert the given object to string with each line indented by 4 spaces
* (except the first line).
*/
private String toIndentedString(java.lang.Object o) {
if (o == null) {
return "null";
}
return o.toString().replace("\n", "\n    ");
}

}

