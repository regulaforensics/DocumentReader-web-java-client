/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.JsonElement;
import com.google.gson.annotations.SerializedName;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Objects;

/** Common fields for all authenticity result objects */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class AuthenticityCheckResultItem {
  public static final String SERIALIZED_NAME_TYPE = "Type";

  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  protected AuthenticityResultType type;

  public static final String SERIALIZED_NAME_ELEMENT_RESULT = "ElementResult";

  @SerializedName(SERIALIZED_NAME_ELEMENT_RESULT)
  @javax.annotation.Nullable
  private CheckResult elementResult;

  public static final String SERIALIZED_NAME_ELEMENT_DIAGNOSE = "ElementDiagnose";

  @SerializedName(SERIALIZED_NAME_ELEMENT_DIAGNOSE)
  @javax.annotation.Nullable
  private CheckDiagnose elementDiagnose;

  public static final String SERIALIZED_NAME_PERCENT_VALUE = "PercentValue";

  @SerializedName(SERIALIZED_NAME_PERCENT_VALUE)
  @javax.annotation.Nullable
  private Integer percentValue;

  public AuthenticityCheckResultItem() {}

  public AuthenticityCheckResultItem type(@javax.annotation.Nonnull AuthenticityResultType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  @javax.annotation.Nonnull
  public AuthenticityResultType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull AuthenticityResultType type) {
    this.type = type;
  }

  public AuthenticityCheckResultItem elementResult(
      @javax.annotation.Nullable CheckResult elementResult) {
    this.elementResult = elementResult;
    return this;
  }

  /**
   * Get elementResult
   *
   * @return elementResult
   */
  @javax.annotation.Nullable
  public CheckResult getElementResult() {
    return elementResult;
  }

  public void setElementResult(@javax.annotation.Nullable CheckResult elementResult) {
    this.elementResult = elementResult;
  }

  public AuthenticityCheckResultItem elementDiagnose(
      @javax.annotation.Nullable CheckDiagnose elementDiagnose) {
    this.elementDiagnose = elementDiagnose;
    return this;
  }

  /**
   * Get elementDiagnose
   *
   * @return elementDiagnose
   */
  @javax.annotation.Nullable
  public CheckDiagnose getElementDiagnose() {
    return elementDiagnose;
  }

  public void setElementDiagnose(@javax.annotation.Nullable CheckDiagnose elementDiagnose) {
    this.elementDiagnose = elementDiagnose;
  }

  public AuthenticityCheckResultItem percentValue(@javax.annotation.Nullable Integer percentValue) {
    this.percentValue = percentValue;
    return this;
  }

  /**
   * Get percentValue
   *
   * @return percentValue
   */
  @javax.annotation.Nullable
  public Integer getPercentValue() {
    return percentValue;
  }

  public void setPercentValue(@javax.annotation.Nullable Integer percentValue) {
    this.percentValue = percentValue;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticityCheckResultItem authenticityCheckResultItem = (AuthenticityCheckResultItem) o;
    return Objects.equals(this.type, authenticityCheckResultItem.type)
        && Objects.equals(this.elementResult, authenticityCheckResultItem.elementResult)
        && Objects.equals(this.elementDiagnose, authenticityCheckResultItem.elementDiagnose)
        && Objects.equals(this.percentValue, authenticityCheckResultItem.percentValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, elementResult, elementDiagnose, percentValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticityCheckResultItem {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    elementResult: ").append(toIndentedString(elementResult)).append("\n");
    sb.append("    elementDiagnose: ").append(toIndentedString(elementDiagnose)).append("\n");
    sb.append("    percentValue: ").append(toIndentedString(percentValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("ElementResult");
    openapiFields.add("ElementDiagnose");
    openapiFields.add("PercentValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthenticityCheckResultItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!AuthenticityCheckResultItem.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in AuthenticityCheckResultItem is not found in the empty JSON string",
                AuthenticityCheckResultItem.openapiRequiredFields.toString()));
      }
    }

    String discriminatorValue = jsonElement.getAsJsonObject().get("Type").getAsString();
    switch (discriminatorValue) {
      case "1":
        SecurityFeatureResult.validateJsonElement(jsonElement);
        break;
      case "1024":
        IdentResult.validateJsonElement(jsonElement);
        break;
      case "1048576":
        IdentResult.validateJsonElement(jsonElement);
        break;
      case "128":
        PhotoIdentResult.validateJsonElement(jsonElement);
        break;
      case "131072":
        IdentResult.validateJsonElement(jsonElement);
        break;
      case "16":
        FiberResult.validateJsonElement(jsonElement);
        break;
      case "16777216":
        OCRSecurityTextResult.validateJsonElement(jsonElement);
        break;
      case "2":
        SecurityFeatureResult.validateJsonElement(jsonElement);
        break;
      case "2097152":
        IdentResult.validateJsonElement(jsonElement);
        break;
      case "262144":
        IdentResult.validateJsonElement(jsonElement);
        break;
      case "32":
        IdentResult.validateJsonElement(jsonElement);
        break;
      case "32768":
        IdentResult.validateJsonElement(jsonElement);
        break;
      case "4":
        IdentResult.validateJsonElement(jsonElement);
        break;
      case "4096":
        SecurityFeatureResult.validateJsonElement(jsonElement);
        break;
      case "4194304":
        SecurityFeatureResult.validateJsonElement(jsonElement);
        break;
      case "512":
        SecurityFeatureResult.validateJsonElement(jsonElement);
        break;
      case "524288":
        IdentResult.validateJsonElement(jsonElement);
        break;
      case "64":
        OCRSecurityTextResult.validateJsonElement(jsonElement);
        break;
      case "65536":
        SecurityFeatureResult.validateJsonElement(jsonElement);
        break;
      case "8":
        SecurityFeatureResult.validateJsonElement(jsonElement);
        break;
      case "8192":
        SecurityFeatureResult.validateJsonElement(jsonElement);
        break;
      case "8388608":
        SecurityFeatureResult.validateJsonElement(jsonElement);
        break;
      default:
        throw new IllegalArgumentException(
            String.format(
                "The value of the `Type` field `%s` does not match any key defined in the discriminator's mapping.",
                discriminatorValue));
    }
  }

  /**
   * Create an instance of AuthenticityCheckResultItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthenticityCheckResultItem
   * @throws IOException if the JSON string is invalid with respect to AuthenticityCheckResultItem
   */
  public static AuthenticityCheckResultItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticityCheckResultItem.class);
  }

  /**
   * Convert an instance of AuthenticityCheckResultItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
