/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** LivenessParams */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.11.0")
public class LivenessParams {
  public static final String SERIALIZED_NAME_CHECK_O_V_I = "checkOVI";

  @SerializedName(SERIALIZED_NAME_CHECK_O_V_I)
  @javax.annotation.Nullable
  private Boolean checkOVI;

  public static final String SERIALIZED_NAME_CHECK_M_L_I = "checkMLI";

  @SerializedName(SERIALIZED_NAME_CHECK_M_L_I)
  @javax.annotation.Nullable
  private Boolean checkMLI;

  public static final String SERIALIZED_NAME_CHECK_HOLO = "checkHolo";

  @SerializedName(SERIALIZED_NAME_CHECK_HOLO)
  @javax.annotation.Nullable
  private Boolean checkHolo;

  public static final String SERIALIZED_NAME_CHECK_E_D = "checkED";

  @SerializedName(SERIALIZED_NAME_CHECK_E_D)
  @javax.annotation.Nullable
  private Boolean checkED;

  public LivenessParams() {}

  public LivenessParams checkOVI(@javax.annotation.Nullable Boolean checkOVI) {
    this.checkOVI = checkOVI;
    return this;
  }

  /**
   * This parameter is used to enable OVI check
   *
   * @return checkOVI
   */
  @javax.annotation.Nullable
  public Boolean getCheckOVI() {
    return checkOVI;
  }

  public void setCheckOVI(@javax.annotation.Nullable Boolean checkOVI) {
    this.checkOVI = checkOVI;
  }

  public LivenessParams checkMLI(@javax.annotation.Nullable Boolean checkMLI) {
    this.checkMLI = checkMLI;
    return this;
  }

  /**
   * This parameter is used to enable MLI check
   *
   * @return checkMLI
   */
  @javax.annotation.Nullable
  public Boolean getCheckMLI() {
    return checkMLI;
  }

  public void setCheckMLI(@javax.annotation.Nullable Boolean checkMLI) {
    this.checkMLI = checkMLI;
  }

  public LivenessParams checkHolo(@javax.annotation.Nullable Boolean checkHolo) {
    this.checkHolo = checkHolo;
    return this;
  }

  /**
   * This parameter is used to enable Hologram detection
   *
   * @return checkHolo
   */
  @javax.annotation.Nullable
  public Boolean getCheckHolo() {
    return checkHolo;
  }

  public void setCheckHolo(@javax.annotation.Nullable Boolean checkHolo) {
    this.checkHolo = checkHolo;
  }

  public LivenessParams checkED(@javax.annotation.Nullable Boolean checkED) {
    this.checkED = checkED;
    return this;
  }

  /**
   * This parameter is used to enable Electronic device detection
   *
   * @return checkED
   */
  @javax.annotation.Nullable
  public Boolean getCheckED() {
    return checkED;
  }

  public void setCheckED(@javax.annotation.Nullable Boolean checkED) {
    this.checkED = checkED;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LivenessParams livenessParams = (LivenessParams) o;
    return Objects.equals(this.checkOVI, livenessParams.checkOVI)
        && Objects.equals(this.checkMLI, livenessParams.checkMLI)
        && Objects.equals(this.checkHolo, livenessParams.checkHolo)
        && Objects.equals(this.checkED, livenessParams.checkED);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkOVI, checkMLI, checkHolo, checkED);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LivenessParams {\n");
    sb.append("    checkOVI: ").append(toIndentedString(checkOVI)).append("\n");
    sb.append("    checkMLI: ").append(toIndentedString(checkMLI)).append("\n");
    sb.append("    checkHolo: ").append(toIndentedString(checkHolo)).append("\n");
    sb.append("    checkED: ").append(toIndentedString(checkED)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkOVI");
    openapiFields.add("checkMLI");
    openapiFields.add("checkHolo");
    openapiFields.add("checkED");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LivenessParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!LivenessParams.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in LivenessParams is not found in the empty JSON string",
                LivenessParams.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!LivenessParams.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `LivenessParams` properties. JSON: %s",
                entry.getKey(), jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!LivenessParams.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'LivenessParams' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<LivenessParams> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(LivenessParams.class));

      return (TypeAdapter<T>)
          new TypeAdapter<LivenessParams>() {
            @Override
            public void write(JsonWriter out, LivenessParams value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public LivenessParams read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of LivenessParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LivenessParams
   * @throws IOException if the JSON string is invalid with respect to LivenessParams
   */
  public static LivenessParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LivenessParams.class);
  }

  /**
   * Convert an instance of LivenessParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
