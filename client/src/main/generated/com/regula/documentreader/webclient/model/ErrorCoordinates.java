/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Objects;

/** ErrorCoordinates */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class ErrorCoordinates {
  public static final String SERIALIZED_NAME_LEFT = "Left";

  @SerializedName(SERIALIZED_NAME_LEFT)
  @javax.annotation.Nullable
  private BigDecimal left;

  public static final String SERIALIZED_NAME_TOP = "Top";

  @SerializedName(SERIALIZED_NAME_TOP)
  @javax.annotation.Nullable
  private BigDecimal top;

  public static final String SERIALIZED_NAME_RIGHT = "Right";

  @SerializedName(SERIALIZED_NAME_RIGHT)
  @javax.annotation.Nullable
  private BigDecimal right;

  public static final String SERIALIZED_NAME_BOTTOM = "Bottom";

  @SerializedName(SERIALIZED_NAME_BOTTOM)
  @javax.annotation.Nullable
  private BigDecimal bottom;

  public ErrorCoordinates() {}

  public ErrorCoordinates left(@javax.annotation.Nullable BigDecimal left) {
    this.left = left;
    return this;
  }

  /**
   * Get left
   *
   * @return left
   */
  @javax.annotation.Nullable
  public BigDecimal getLeft() {
    return left;
  }

  public void setLeft(@javax.annotation.Nullable BigDecimal left) {
    this.left = left;
  }

  public ErrorCoordinates top(@javax.annotation.Nullable BigDecimal top) {
    this.top = top;
    return this;
  }

  /**
   * Get top
   *
   * @return top
   */
  @javax.annotation.Nullable
  public BigDecimal getTop() {
    return top;
  }

  public void setTop(@javax.annotation.Nullable BigDecimal top) {
    this.top = top;
  }

  public ErrorCoordinates right(@javax.annotation.Nullable BigDecimal right) {
    this.right = right;
    return this;
  }

  /**
   * Get right
   *
   * @return right
   */
  @javax.annotation.Nullable
  public BigDecimal getRight() {
    return right;
  }

  public void setRight(@javax.annotation.Nullable BigDecimal right) {
    this.right = right;
  }

  public ErrorCoordinates bottom(@javax.annotation.Nullable BigDecimal bottom) {
    this.bottom = bottom;
    return this;
  }

  /**
   * Get bottom
   *
   * @return bottom
   */
  @javax.annotation.Nullable
  public BigDecimal getBottom() {
    return bottom;
  }

  public void setBottom(@javax.annotation.Nullable BigDecimal bottom) {
    this.bottom = bottom;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorCoordinates errorCoordinates = (ErrorCoordinates) o;
    return Objects.equals(this.left, errorCoordinates.left)
        && Objects.equals(this.top, errorCoordinates.top)
        && Objects.equals(this.right, errorCoordinates.right)
        && Objects.equals(this.bottom, errorCoordinates.bottom);
  }

  @Override
  public int hashCode() {
    return Objects.hash(left, top, right, bottom);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorCoordinates {\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    bottom: ").append(toIndentedString(bottom)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Left");
    openapiFields.add("Top");
    openapiFields.add("Right");
    openapiFields.add("Bottom");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErrorCoordinates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!ErrorCoordinates.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in ErrorCoordinates is not found in the empty JSON string",
                ErrorCoordinates.openapiRequiredFields.toString()));
      }
    }

    JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ErrorCoordinates.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ErrorCoordinates' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<ErrorCoordinates> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(ErrorCoordinates.class));

      return (TypeAdapter<T>)
          new TypeAdapter<ErrorCoordinates>() {
            @Override
            public void write(JsonWriter out, ErrorCoordinates value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public ErrorCoordinates read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of ErrorCoordinates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErrorCoordinates
   * @throws IOException if the JSON string is invalid with respect to ErrorCoordinates
   */
  public static ErrorCoordinates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorCoordinates.class);
  }

  /**
   * Convert an instance of ErrorCoordinates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
