/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/**
 * Structure is used to describe the results of a single authentication procedure or a procedure of
 * secure data access within the context of the communication session with electronic document
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.13.0")
public class RfidAccessControlInfo {
  public static final String SERIALIZED_NAME_TYPE = "Type";

  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private RfidAccessControlProcedureType type;

  public static final String SERIALIZED_NAME_STATUS = "Status";

  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private RFIDErrorCodes status;

  public static final String SERIALIZED_NAME_ACTIVE_OPTION_IDX = "ActiveOptionIdx";

  @SerializedName(SERIALIZED_NAME_ACTIVE_OPTION_IDX)
  @javax.annotation.Nullable
  private BigDecimal activeOptionIdx;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "Notifications";

  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  @javax.annotation.Nonnull
  private List<Integer> notifications;

  public static final String SERIALIZED_NAME_ACCESS_CONTROL_OPTIONS = "AccessControlOptions";

  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL_OPTIONS)
  @javax.annotation.Nullable
  private List<Object> accessControlOptions;

  public RfidAccessControlInfo() {}

  public RfidAccessControlInfo type(@javax.annotation.Nonnull RfidAccessControlProcedureType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  @javax.annotation.Nonnull
  public RfidAccessControlProcedureType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull RfidAccessControlProcedureType type) {
    this.type = type;
  }

  public RfidAccessControlInfo status(@javax.annotation.Nonnull RFIDErrorCodes status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   *
   * @return status
   */
  @javax.annotation.Nonnull
  public RFIDErrorCodes getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull RFIDErrorCodes status) {
    this.status = status;
  }

  public RfidAccessControlInfo activeOptionIdx(
      @javax.annotation.Nullable BigDecimal activeOptionIdx) {
    this.activeOptionIdx = activeOptionIdx;
    return this;
  }

  /**
   * Index of the active variant of the procedure
   *
   * @return activeOptionIdx
   */
  @javax.annotation.Nullable
  public BigDecimal getActiveOptionIdx() {
    return activeOptionIdx;
  }

  public void setActiveOptionIdx(@javax.annotation.Nullable BigDecimal activeOptionIdx) {
    this.activeOptionIdx = activeOptionIdx;
  }

  public RfidAccessControlInfo notifications(
      @javax.annotation.Nonnull List<Integer> notifications) {
    this.notifications = notifications;
    return this;
  }

  public RfidAccessControlInfo addNotificationsItem(Integer notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * List of remarks arisen during the procedure. Can be ParsingErrorCodes or
   * ParsingNotificationCodes enum.
   *
   * @return notifications
   */
  @javax.annotation.Nonnull
  public List<Integer> getNotifications() {
    return notifications;
  }

  public void setNotifications(@javax.annotation.Nonnull List<Integer> notifications) {
    this.notifications = notifications;
  }

  public RfidAccessControlInfo accessControlOptions(
      @javax.annotation.Nullable List<Object> accessControlOptions) {
    this.accessControlOptions = accessControlOptions;
    return this;
  }

  public RfidAccessControlInfo addAccessControlOptionsItem(Object accessControlOptionsItem) {
    if (this.accessControlOptions == null) {
      this.accessControlOptions = new ArrayList<>();
    }
    this.accessControlOptions.add(accessControlOptionsItem);
    return this;
  }

  /**
   * List of structures with are used to describe the variants of the authentication or secure data
   * access procedure performance within the context of the communication session with electronic
   * document
   *
   * @return accessControlOptions
   */
  @javax.annotation.Nullable
  public List<Object> getAccessControlOptions() {
    return accessControlOptions;
  }

  public void setAccessControlOptions(
      @javax.annotation.Nullable List<Object> accessControlOptions) {
    this.accessControlOptions = accessControlOptions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RfidAccessControlInfo rfidAccessControlInfo = (RfidAccessControlInfo) o;
    return Objects.equals(this.type, rfidAccessControlInfo.type)
        && Objects.equals(this.status, rfidAccessControlInfo.status)
        && Objects.equals(this.activeOptionIdx, rfidAccessControlInfo.activeOptionIdx)
        && Objects.equals(this.notifications, rfidAccessControlInfo.notifications)
        && Objects.equals(this.accessControlOptions, rfidAccessControlInfo.accessControlOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, status, activeOptionIdx, notifications, accessControlOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RfidAccessControlInfo {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    activeOptionIdx: ").append(toIndentedString(activeOptionIdx)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    accessControlOptions: ")
        .append(toIndentedString(accessControlOptions))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("Status");
    openapiFields.add("ActiveOptionIdx");
    openapiFields.add("Notifications");
    openapiFields.add("AccessControlOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("Notifications");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RfidAccessControlInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!RfidAccessControlInfo.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in RfidAccessControlInfo is not found in the empty JSON string",
                RfidAccessControlInfo.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : RfidAccessControlInfo.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `Type`
    RfidAccessControlProcedureType.validateJsonElement(jsonObj.get("Type"));
    // validate the required field `Status`
    RFIDErrorCodes.validateJsonElement(jsonObj.get("Status"));
    // ensure the required json array is present
    if (jsonObj.get("Notifications") == null) {
      throw new IllegalArgumentException(
          "Expected the field `linkedContent` to be an array in the JSON string but got `null`");
    } else if (!jsonObj.get("Notifications").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Notifications` to be an array in the JSON string but got `%s`",
              jsonObj.get("Notifications").toString()));
    }
    // ensure the optional json data is an array if present
    if (jsonObj.get("AccessControlOptions") != null
        && !jsonObj.get("AccessControlOptions").isJsonNull()
        && !jsonObj.get("AccessControlOptions").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `AccessControlOptions` to be an array in the JSON string but got `%s`",
              jsonObj.get("AccessControlOptions").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!RfidAccessControlInfo.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'RfidAccessControlInfo' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<RfidAccessControlInfo> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(RfidAccessControlInfo.class));

      return (TypeAdapter<T>)
          new TypeAdapter<RfidAccessControlInfo>() {
            @Override
            public void write(JsonWriter out, RfidAccessControlInfo value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public RfidAccessControlInfo read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of RfidAccessControlInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RfidAccessControlInfo
   * @throws IOException if the JSON string is invalid with respect to RfidAccessControlInfo
   */
  public static RfidAccessControlInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RfidAccessControlInfo.class);
  }

  /**
   * Convert an instance of RfidAccessControlInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
