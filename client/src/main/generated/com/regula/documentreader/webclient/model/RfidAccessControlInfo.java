/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.annotations.SerializedName;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Structure is used to describe the results of a single authentication procedure or a procedure of
 * secure data access within the context of the communication session with electronic document
 */
public class RfidAccessControlInfo {
  public static final String SERIALIZED_NAME_TYPE = "Type";

  @SerializedName(SERIALIZED_NAME_TYPE)
  private RfidAccessControlProcedureType type;

  public static final String SERIALIZED_NAME_STATUS = "Status";

  @SerializedName(SERIALIZED_NAME_STATUS)
  private RFIDErrorCodes status;

  public static final String SERIALIZED_NAME_ACTIVE_OPTION_IDX = "ActiveOptionIdx";

  @SerializedName(SERIALIZED_NAME_ACTIVE_OPTION_IDX)
  private BigDecimal activeOptionIdx;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "Notifications";

  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<ParsingErrorCodes> notifications = new ArrayList<ParsingErrorCodes>();

  public static final String SERIALIZED_NAME_ACCESS_CONTROL_OPTIONS = "AccessControlOptions";

  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROL_OPTIONS)
  private List<Object> accessControlOptions = null;

  public RfidAccessControlInfo withType(RfidAccessControlProcedureType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  public RfidAccessControlProcedureType getType() {
    return type;
  }

  public void setType(RfidAccessControlProcedureType type) {
    this.type = type;
  }

  public RfidAccessControlInfo withStatus(RFIDErrorCodes status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   *
   * @return status
   */
  public RFIDErrorCodes getStatus() {
    return status;
  }

  public void setStatus(RFIDErrorCodes status) {
    this.status = status;
  }

  public RfidAccessControlInfo withActiveOptionIdx(BigDecimal activeOptionIdx) {
    this.activeOptionIdx = activeOptionIdx;
    return this;
  }

  /**
   * Index of the active variant of the procedure
   *
   * @return activeOptionIdx
   */
  @javax.annotation.Nullable
  public BigDecimal getActiveOptionIdx() {
    return activeOptionIdx;
  }

  public void setActiveOptionIdx(BigDecimal activeOptionIdx) {
    this.activeOptionIdx = activeOptionIdx;
  }

  public RfidAccessControlInfo withNotifications(List<ParsingErrorCodes> notifications) {
    this.notifications = notifications;
    return this;
  }

  public RfidAccessControlInfo addNotificationsItem(ParsingErrorCodes notificationsItem) {
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * List of remarks arisen during the procedure.
   *
   * @return notifications
   */
  public List<ParsingErrorCodes> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<ParsingErrorCodes> notifications) {
    this.notifications = notifications;
  }

  public RfidAccessControlInfo withAccessControlOptions(List<Object> accessControlOptions) {
    this.accessControlOptions = accessControlOptions;
    return this;
  }

  public RfidAccessControlInfo addAccessControlOptionsItem(Object accessControlOptionsItem) {
    if (this.accessControlOptions == null) {
      this.accessControlOptions = new ArrayList<Object>();
    }
    this.accessControlOptions.add(accessControlOptionsItem);
    return this;
  }

  /**
   * List of structures with are used to describe the variants of the authentication or secure data
   * access procedure performance within the context of the communication session with electronic
   * document
   *
   * @return accessControlOptions
   */
  @javax.annotation.Nullable
  public List<Object> getAccessControlOptions() {
    return accessControlOptions;
  }

  public void setAccessControlOptions(List<Object> accessControlOptions) {
    this.accessControlOptions = accessControlOptions;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RfidAccessControlInfo rfidAccessControlInfo = (RfidAccessControlInfo) o;
    return Objects.equals(this.type, rfidAccessControlInfo.type)
        && Objects.equals(this.status, rfidAccessControlInfo.status)
        && Objects.equals(this.activeOptionIdx, rfidAccessControlInfo.activeOptionIdx)
        && Objects.equals(this.notifications, rfidAccessControlInfo.notifications)
        && Objects.equals(this.accessControlOptions, rfidAccessControlInfo.accessControlOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, status, activeOptionIdx, notifications, accessControlOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RfidAccessControlInfo {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    activeOptionIdx: ").append(toIndentedString(activeOptionIdx)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    accessControlOptions: ")
        .append(toIndentedString(accessControlOptions))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
