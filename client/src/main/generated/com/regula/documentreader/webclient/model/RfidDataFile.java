/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/**
 * Structure is used to describe the contents of a single file of the LDS of electronic document and
 * the analysis of its contents within the context of the communication session with electronic
 * document
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.15.0")
public class RfidDataFile {
  public static final String SERIALIZED_NAME_FILE_I_D = "FileID";

  @SerializedName(SERIALIZED_NAME_FILE_I_D)
  @javax.annotation.Nullable
  private String fileID;

  public static final String SERIALIZED_NAME_TYPE = "Type";

  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private RfidDataFileType type;

  public static final String SERIALIZED_NAME_FILE_DATA = "FileData";

  @SerializedName(SERIALIZED_NAME_FILE_DATA)
  @javax.annotation.Nullable
  private TrfFtBytes fileData;

  public static final String SERIALIZED_NAME_READING_STATUS = "ReadingStatus";

  @SerializedName(SERIALIZED_NAME_READING_STATUS)
  @javax.annotation.Nonnull
  private RFIDErrorCodes readingStatus;

  public static final String SERIALIZED_NAME_READING_TIME = "ReadingTime";

  @SerializedName(SERIALIZED_NAME_READING_TIME)
  @javax.annotation.Nullable
  private BigDecimal readingTime;

  public static final String SERIALIZED_NAME_PA_STATUS = "PA_Status";

  @SerializedName(SERIALIZED_NAME_PA_STATUS)
  @javax.annotation.Nullable
  private RFIDErrorCodes paStatus;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "Notifications";

  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  @javax.annotation.Nullable
  private List<Integer> notifications;

  public static final String SERIALIZED_NAME_DOC_FIELDS_TEXT = "DocFields_Text";

  @SerializedName(SERIALIZED_NAME_DOC_FIELDS_TEXT)
  @javax.annotation.Nullable
  private List<TextFieldType> docFieldsText;

  public static final String SERIALIZED_NAME_DOC_FIELDS_GRAPHICS = "DocFields_Graphics";

  @SerializedName(SERIALIZED_NAME_DOC_FIELDS_GRAPHICS)
  @javax.annotation.Nullable
  private List<GraphicFieldType> docFieldsGraphics;

  public static final String SERIALIZED_NAME_DOC_FIELDS_ORIGINALS = "DocFields_Originals";

  @SerializedName(SERIALIZED_NAME_DOC_FIELDS_ORIGINALS)
  @javax.annotation.Nullable
  private List<GraphicFieldType> docFieldsOriginals;

  public static final String SERIALIZED_NAME_PARSED_DATA = "ParsedData";

  @SerializedName(SERIALIZED_NAME_PARSED_DATA)
  @javax.annotation.Nullable
  private ParsedData parsedData;

  public static final String SERIALIZED_NAME_SECURITY_OBJECT_CERTIFICATES =
      "SecurityObject_Certificates";

  @SerializedName(SERIALIZED_NAME_SECURITY_OBJECT_CERTIFICATES)
  @javax.annotation.Nullable
  private SecurityObjectCertificates securityObjectCertificates;

  public RfidDataFile() {}

  public RfidDataFile fileID(@javax.annotation.Nullable String fileID) {
    this.fileID = fileID;
    return this;
  }

  /**
   * File identifier. Each byte of FileID represented by its hexadecimal value. The individual bytes
   * are separated by spaces (e.g. 01 1E)
   *
   * @return fileID
   */
  @javax.annotation.Nullable
  public String getFileID() {
    return fileID;
  }

  public void setFileID(@javax.annotation.Nullable String fileID) {
    this.fileID = fileID;
  }

  public RfidDataFile type(@javax.annotation.Nonnull RfidDataFileType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  @javax.annotation.Nonnull
  public RfidDataFileType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull RfidDataFileType type) {
    this.type = type;
  }

  public RfidDataFile fileData(@javax.annotation.Nullable TrfFtBytes fileData) {
    this.fileData = fileData;
    return this;
  }

  /**
   * Get fileData
   *
   * @return fileData
   */
  @javax.annotation.Nullable
  public TrfFtBytes getFileData() {
    return fileData;
  }

  public void setFileData(@javax.annotation.Nullable TrfFtBytes fileData) {
    this.fileData = fileData;
  }

  public RfidDataFile readingStatus(@javax.annotation.Nonnull RFIDErrorCodes readingStatus) {
    this.readingStatus = readingStatus;
    return this;
  }

  /**
   * Get readingStatus
   *
   * @return readingStatus
   */
  @javax.annotation.Nonnull
  public RFIDErrorCodes getReadingStatus() {
    return readingStatus;
  }

  public void setReadingStatus(@javax.annotation.Nonnull RFIDErrorCodes readingStatus) {
    this.readingStatus = readingStatus;
  }

  public RfidDataFile readingTime(@javax.annotation.Nullable BigDecimal readingTime) {
    this.readingTime = readingTime;
    return this;
  }

  /**
   * Time of reading, milliseconds
   *
   * @return readingTime
   */
  @javax.annotation.Nullable
  public BigDecimal getReadingTime() {
    return readingTime;
  }

  public void setReadingTime(@javax.annotation.Nullable BigDecimal readingTime) {
    this.readingTime = readingTime;
  }

  public RfidDataFile paStatus(@javax.annotation.Nullable RFIDErrorCodes paStatus) {
    this.paStatus = paStatus;
    return this;
  }

  /**
   * Get paStatus
   *
   * @return paStatus
   */
  @javax.annotation.Nullable
  public RFIDErrorCodes getPaStatus() {
    return paStatus;
  }

  public void setPaStatus(@javax.annotation.Nullable RFIDErrorCodes paStatus) {
    this.paStatus = paStatus;
  }

  public RfidDataFile notifications(@javax.annotation.Nullable List<Integer> notifications) {
    this.notifications = notifications;
    return this;
  }

  public RfidDataFile addNotificationsItem(Integer notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * List of remarks arisen when reading data from the memory of the chip and analysing their
   * ASN.1-structure. Can be ParsingErrorCodes or ParsingNotificationCodes enum.
   *
   * @return notifications
   */
  @javax.annotation.Nullable
  public List<Integer> getNotifications() {
    return notifications;
  }

  public void setNotifications(@javax.annotation.Nullable List<Integer> notifications) {
    this.notifications = notifications;
  }

  public RfidDataFile docFieldsText(@javax.annotation.Nullable List<TextFieldType> docFieldsText) {
    this.docFieldsText = docFieldsText;
    return this;
  }

  public RfidDataFile addDocFieldsTextItem(TextFieldType docFieldsTextItem) {
    if (this.docFieldsText == null) {
      this.docFieldsText = new ArrayList<>();
    }
    this.docFieldsText.add(docFieldsTextItem);
    return this;
  }

  /**
   * List of document text fields formed on the basis of the file contents
   *
   * @return docFieldsText
   */
  @javax.annotation.Nullable
  public List<TextFieldType> getDocFieldsText() {
    return docFieldsText;
  }

  public void setDocFieldsText(@javax.annotation.Nullable List<TextFieldType> docFieldsText) {
    this.docFieldsText = docFieldsText;
  }

  public RfidDataFile docFieldsGraphics(
      @javax.annotation.Nullable List<GraphicFieldType> docFieldsGraphics) {
    this.docFieldsGraphics = docFieldsGraphics;
    return this;
  }

  public RfidDataFile addDocFieldsGraphicsItem(GraphicFieldType docFieldsGraphicsItem) {
    if (this.docFieldsGraphics == null) {
      this.docFieldsGraphics = new ArrayList<>();
    }
    this.docFieldsGraphics.add(docFieldsGraphicsItem);
    return this;
  }

  /**
   * List of document graphic fields formed on the basis of the file contents
   *
   * @return docFieldsGraphics
   */
  @javax.annotation.Nullable
  public List<GraphicFieldType> getDocFieldsGraphics() {
    return docFieldsGraphics;
  }

  public void setDocFieldsGraphics(
      @javax.annotation.Nullable List<GraphicFieldType> docFieldsGraphics) {
    this.docFieldsGraphics = docFieldsGraphics;
  }

  public RfidDataFile docFieldsOriginals(
      @javax.annotation.Nullable List<GraphicFieldType> docFieldsOriginals) {
    this.docFieldsOriginals = docFieldsOriginals;
    return this;
  }

  public RfidDataFile addDocFieldsOriginalsItem(GraphicFieldType docFieldsOriginalsItem) {
    if (this.docFieldsOriginals == null) {
      this.docFieldsOriginals = new ArrayList<>();
    }
    this.docFieldsOriginals.add(docFieldsOriginalsItem);
    return this;
  }

  /**
   * List of the original binary representation of graphic document fields formed on the basis of
   * the file contents
   *
   * @return docFieldsOriginals
   */
  @javax.annotation.Nullable
  public List<GraphicFieldType> getDocFieldsOriginals() {
    return docFieldsOriginals;
  }

  public void setDocFieldsOriginals(
      @javax.annotation.Nullable List<GraphicFieldType> docFieldsOriginals) {
    this.docFieldsOriginals = docFieldsOriginals;
  }

  public RfidDataFile parsedData(@javax.annotation.Nullable ParsedData parsedData) {
    this.parsedData = parsedData;
    return this;
  }

  /**
   * Get parsedData
   *
   * @return parsedData
   */
  @javax.annotation.Nullable
  public ParsedData getParsedData() {
    return parsedData;
  }

  public void setParsedData(@javax.annotation.Nullable ParsedData parsedData) {
    this.parsedData = parsedData;
  }

  public RfidDataFile securityObjectCertificates(
      @javax.annotation.Nullable SecurityObjectCertificates securityObjectCertificates) {
    this.securityObjectCertificates = securityObjectCertificates;
    return this;
  }

  /**
   * Get securityObjectCertificates
   *
   * @return securityObjectCertificates
   */
  @javax.annotation.Nullable
  public SecurityObjectCertificates getSecurityObjectCertificates() {
    return securityObjectCertificates;
  }

  public void setSecurityObjectCertificates(
      @javax.annotation.Nullable SecurityObjectCertificates securityObjectCertificates) {
    this.securityObjectCertificates = securityObjectCertificates;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RfidDataFile rfidDataFile = (RfidDataFile) o;
    return Objects.equals(this.fileID, rfidDataFile.fileID)
        && Objects.equals(this.type, rfidDataFile.type)
        && Objects.equals(this.fileData, rfidDataFile.fileData)
        && Objects.equals(this.readingStatus, rfidDataFile.readingStatus)
        && Objects.equals(this.readingTime, rfidDataFile.readingTime)
        && Objects.equals(this.paStatus, rfidDataFile.paStatus)
        && Objects.equals(this.notifications, rfidDataFile.notifications)
        && Objects.equals(this.docFieldsText, rfidDataFile.docFieldsText)
        && Objects.equals(this.docFieldsGraphics, rfidDataFile.docFieldsGraphics)
        && Objects.equals(this.docFieldsOriginals, rfidDataFile.docFieldsOriginals)
        && Objects.equals(this.parsedData, rfidDataFile.parsedData)
        && Objects.equals(this.securityObjectCertificates, rfidDataFile.securityObjectCertificates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        fileID,
        type,
        fileData,
        readingStatus,
        readingTime,
        paStatus,
        notifications,
        docFieldsText,
        docFieldsGraphics,
        docFieldsOriginals,
        parsedData,
        securityObjectCertificates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RfidDataFile {\n");
    sb.append("    fileID: ").append(toIndentedString(fileID)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fileData: ").append(toIndentedString(fileData)).append("\n");
    sb.append("    readingStatus: ").append(toIndentedString(readingStatus)).append("\n");
    sb.append("    readingTime: ").append(toIndentedString(readingTime)).append("\n");
    sb.append("    paStatus: ").append(toIndentedString(paStatus)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    docFieldsText: ").append(toIndentedString(docFieldsText)).append("\n");
    sb.append("    docFieldsGraphics: ").append(toIndentedString(docFieldsGraphics)).append("\n");
    sb.append("    docFieldsOriginals: ").append(toIndentedString(docFieldsOriginals)).append("\n");
    sb.append("    parsedData: ").append(toIndentedString(parsedData)).append("\n");
    sb.append("    securityObjectCertificates: ")
        .append(toIndentedString(securityObjectCertificates))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields =
        new HashSet<String>(
            Arrays.asList(
                "FileID",
                "Type",
                "FileData",
                "ReadingStatus",
                "ReadingTime",
                "PA_Status",
                "Notifications",
                "DocFields_Text",
                "DocFields_Graphics",
                "DocFields_Originals",
                "ParsedData",
                "SecurityObject_Certificates"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("Type", "ReadingStatus"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RfidDataFile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!RfidDataFile.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        System.err.println(
            String.format(
                "The required field(s) %s in RfidDataFile is not found in the empty JSON string",
                RfidDataFile.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : RfidDataFile.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        System.err.println(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if ((jsonObj.get("FileID") != null && !jsonObj.get("FileID").isJsonNull())
        && !jsonObj.get("FileID").isJsonPrimitive()) {
      System.err.println(
          String.format(
              "Expected the field `FileID` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("FileID").toString()));
    }
    // validate the required field `Type`
    RfidDataFileType.validateJsonElement(jsonObj.get("Type"));
    // validate the optional field `FileData`
    if (jsonObj.get("FileData") != null && !jsonObj.get("FileData").isJsonNull()) {
      TrfFtBytes.validateJsonElement(jsonObj.get("FileData"));
    }
    // validate the required field `ReadingStatus`
    RFIDErrorCodes.validateJsonElement(jsonObj.get("ReadingStatus"));
    // validate the optional field `PA_Status`
    if (jsonObj.get("PA_Status") != null && !jsonObj.get("PA_Status").isJsonNull()) {
      RFIDErrorCodes.validateJsonElement(jsonObj.get("PA_Status"));
    }
    // ensure the optional json data is an array if present
    if (jsonObj.get("Notifications") != null
        && !jsonObj.get("Notifications").isJsonNull()
        && !jsonObj.get("Notifications").isJsonArray()) {
      System.err.println(
          String.format(
              "Expected the field `Notifications` to be an array in the JSON string but got `%s`",
              jsonObj.get("Notifications").toString()));
    }
    // ensure the optional json data is an array if present
    if (jsonObj.get("DocFields_Text") != null
        && !jsonObj.get("DocFields_Text").isJsonNull()
        && !jsonObj.get("DocFields_Text").isJsonArray()) {
      System.err.println(
          String.format(
              "Expected the field `DocFields_Text` to be an array in the JSON string but got `%s`",
              jsonObj.get("DocFields_Text").toString()));
    }
    // ensure the optional json data is an array if present
    if (jsonObj.get("DocFields_Graphics") != null
        && !jsonObj.get("DocFields_Graphics").isJsonNull()
        && !jsonObj.get("DocFields_Graphics").isJsonArray()) {
      System.err.println(
          String.format(
              "Expected the field `DocFields_Graphics` to be an array in the JSON string but got `%s`",
              jsonObj.get("DocFields_Graphics").toString()));
    }
    // ensure the optional json data is an array if present
    if (jsonObj.get("DocFields_Originals") != null
        && !jsonObj.get("DocFields_Originals").isJsonNull()
        && !jsonObj.get("DocFields_Originals").isJsonArray()) {
      System.err.println(
          String.format(
              "Expected the field `DocFields_Originals` to be an array in the JSON string but got `%s`",
              jsonObj.get("DocFields_Originals").toString()));
    }
    // validate the optional field `ParsedData`
    if (jsonObj.get("ParsedData") != null && !jsonObj.get("ParsedData").isJsonNull()) {
      ParsedData.validateJsonElement(jsonObj.get("ParsedData"));
    }
    // validate the optional field `SecurityObject_Certificates`
    if (jsonObj.get("SecurityObject_Certificates") != null
        && !jsonObj.get("SecurityObject_Certificates").isJsonNull()) {
      SecurityObjectCertificates.validateJsonElement(jsonObj.get("SecurityObject_Certificates"));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!RfidDataFile.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'RfidDataFile' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<RfidDataFile> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(RfidDataFile.class));

      return (TypeAdapter<T>)
          new TypeAdapter<RfidDataFile>() {
            @Override
            public void write(JsonWriter out, RfidDataFile value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public RfidDataFile read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of RfidDataFile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RfidDataFile
   * @throws IOException if the JSON string is invalid with respect to RfidDataFile
   */
  public static RfidDataFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RfidDataFile.class);
  }

  /**
   * Convert an instance of RfidDataFile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
