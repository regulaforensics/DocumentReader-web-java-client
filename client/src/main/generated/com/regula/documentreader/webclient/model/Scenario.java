/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/** Document processing scenario */
@JsonAdapter(Scenario.Adapter.class)
public enum Scenario {

  /** Processing scenario for obtaining MRZ data */
  MRZ("Mrz"),

  /** Processing scenario for obtaining barcode data */
  BARCODE("Barcode"),

  /** Processing scenario for detecting document boundaries */
  LOCATE("Locate"),

  /** Processing scenario for obtaining visual zone OCR results */
  OCR("Ocr"),

  /** Processing scenario for document type recognition */
  DOCTYPE("DocType"),

  /** Processing scenario for obtaining MRZ and/or barcode data */
  MRZ_OR_BARCODE("MrzOrBarcode"),

  /** Processing scenario for detecting document boundaries and/or obtaining MRZ data */
  MRZ_OR_LOCATE("MrzOrLocate"),

  /** Processing scenario for detecting document boundaries and obtaining MRZ data */
  MRZ_AND_LOCATE("MrzAndLocate"),

  /** Processing scenario for detecting the document boundaries and obtaining barcode data */
  BARCODE_AND_LOCATE("BarcodeAndLocate"),

  /** Processing scenario for obtaining MRZ data or visual zone OCR results */
  MRZ_OR_OCR("MrzOrOcr"),

  /** Processing scenario for obtaining MRZ or barcode or visual zone OCR results */
  MRZ_OR_BARCODE_OR_OCR("MrzOrBarcodeOrOcr"),

  /**
   * Processing scenario for detecting document boundaries and obtaining MRZ data or visual zone OCR
   * results
   */
  LOCATE_VISUAL_AND_MRZ_OR_OCR("LocateVisual_And_MrzOrOcr"),

  /** Processing scenario for obtaining all document data */
  FULL_PROCESS("FullProcess"),

  /** Processing scenario for obtaining all document data and document authentication */
  FULL_AUTH("FullAuth"),

  /** Processing scenario for obtaining data from registration stamps */
  RUS_STAMP("RusStamp"),

  /** Processing scenario for obtaining OCR results of any image */
  OCR_FREE("OcrFree"),

  /** Processing scenario for obtaining bank card data */
  CREDIT_CARD("CreditCard"),

  /** Scenario for obtaining an original image without any processing */
  CAPTURE("Capture"),

  /** Processing scenario for Digital Travel Credentials (DTC-VC) data processing */
  DTC("DTC"),

  /** Processing scenario for RFID chip processing */
  RFID("RFID");

  private String value;

  Scenario(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Scenario fromValue(String value) {
    for (Scenario b : Scenario.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Scenario> {
    @Override
    public void write(final JsonWriter jsonWriter, final Scenario enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Scenario read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Scenario.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Scenario.fromValue(value);
  }
}
