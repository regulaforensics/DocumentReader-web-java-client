/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.documentreader.webclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.model.AnyOfGraphicFieldRectGraphicFieldRfid;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;


/**
* GraphicFieldsList
*/
public class GraphicFieldsList {
        public static final String SERIALIZED_NAME_P_ARRAY_FIELDS = "pArrayFields";
        @SerializedName(SERIALIZED_NAME_P_ARRAY_FIELDS)
                private List<AnyOfGraphicFieldRectGraphicFieldRfid> pArrayFields = new ArrayList<AnyOfGraphicFieldRectGraphicFieldRfid>();



        public static final String SERIALIZED_NAME_N_FIELDS = "nFields";
        @SerializedName(SERIALIZED_NAME_N_FIELDS)
            private BigDecimal nFields;




            public GraphicFieldsList withPArrayFields(List<AnyOfGraphicFieldRectGraphicFieldRfid> pArrayFields) {
              this.pArrayFields = pArrayFields;
              return this;
            }

            public GraphicFieldsList addPArrayFieldsItem(AnyOfGraphicFieldRectGraphicFieldRfid pArrayFieldsItem) {
                this.pArrayFields.add(pArrayFieldsItem);
                return this;
            }

    /**
        * Get pArrayFields
    * @return pArrayFields
    **/
    
    

        public  List<AnyOfGraphicFieldRectGraphicFieldRfid> getpArrayFields() {
        return pArrayFields;
    }


            public void setpArrayFields(List<AnyOfGraphicFieldRectGraphicFieldRfid> pArrayFields) {
            this.pArrayFields = pArrayFields;
        }


            public GraphicFieldsList withNFields(BigDecimal nFields) {
              this.nFields = nFields;
              return this;
            }


    /**
        * Number of pArrayFields array elements
    * @return nFields
    **/
    
    

        public BigDecimal getnFields() {
        return nFields;
    }


            public void setnFields(BigDecimal nFields) {
            this.nFields = nFields;
        }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
        return true;
        }
        if (o == null || getClass() != o.getClass()) {
        return false;
        }
            GraphicFieldsList graphicFieldsList = (GraphicFieldsList) o;
            return Objects.equals(this.pArrayFields, graphicFieldsList.pArrayFields) &&
            Objects.equals(this.nFields, graphicFieldsList.nFields);
    }

    @Override
    public int hashCode() {
        return Objects.hash(pArrayFields, nFields);
    }


@Override
public String toString() {
StringBuilder sb = new StringBuilder();
sb.append("class GraphicFieldsList {\n");
    sb.append("    pArrayFields: ").append(toIndentedString(pArrayFields)).append("\n");
    sb.append("    nFields: ").append(toIndentedString(nFields)).append("\n");
sb.append("}");
return sb.toString();
}

/**
* Convert the given object to string with each line indented by 4 spaces
* (except the first line).
*/
private String toIndentedString(java.lang.Object o) {
if (o == null) {
return "null";
}
return o.toString().replace("\n", "\n    ");
}

}

