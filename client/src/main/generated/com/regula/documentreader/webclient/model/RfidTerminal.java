/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.documentreader.webclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;


/**
* Structure is used to describe the terminal type within the context of the communication session with electronic document
*/

public class RfidTerminal {
        public static final String SERIALIZED_NAME_TERM_TYPE = "TermType";
        @SerializedName(SERIALIZED_NAME_TERM_TYPE)
            private Integer termType;



        public static final String SERIALIZED_NAME_AUTH_REQ = "AuthReq";
        @SerializedName(SERIALIZED_NAME_AUTH_REQ)
            private BigDecimal authReq;



        public static final String SERIALIZED_NAME_AUTH_REQ2 = "AuthReq2";
        @SerializedName(SERIALIZED_NAME_AUTH_REQ2)
            private BigDecimal authReq2;




            public RfidTerminal withTermType(Integer termType) {
              this.termType = termType;
              return this;
            }


    /**
        * Get termType
    * @return termType
    **/
    
    

        public Integer getTermType() {
        return termType;
    }


            public void setTermType(Integer termType) {
            this.termType = termType;
        }


            public RfidTerminal withAuthReq(BigDecimal authReq) {
              this.authReq = authReq;
              return this;
            }


    /**
        * Declared (set) combination of flags of access rights to the functionality of the document (combination of eRfidTerminalAuthorizationRequirement values)
    * @return authReq
    **/
    
    

        public BigDecimal getAuthReq() {
        return authReq;
    }


            public void setAuthReq(BigDecimal authReq) {
            this.authReq = authReq;
        }


            public RfidTerminal withAuthReq2(BigDecimal authReq2) {
              this.authReq2 = authReq2;
              return this;
            }


    /**
        * Declared (set) combination of flags of access rights to the functionality of the document (combination of RfidTerminalAuthorizationRequirement values)
    * @return authReq2
    **/
    
    

        public BigDecimal getAuthReq2() {
        return authReq2;
    }


            public void setAuthReq2(BigDecimal authReq2) {
            this.authReq2 = authReq2;
        }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
        return true;
        }
        if (o == null || getClass() != o.getClass()) {
        return false;
        }
            RfidTerminal rfidTerminal = (RfidTerminal) o;
            return Objects.equals(this.termType, rfidTerminal.termType) &&
            Objects.equals(this.authReq, rfidTerminal.authReq) &&
            Objects.equals(this.authReq2, rfidTerminal.authReq2);
    }

    @Override
    public int hashCode() {
        return Objects.hash(termType, authReq, authReq2);
    }


@Override
public String toString() {
StringBuilder sb = new StringBuilder();
sb.append("class RfidTerminal {\n");
    sb.append("    termType: ").append(toIndentedString(termType)).append("\n");
    sb.append("    authReq: ").append(toIndentedString(authReq)).append("\n");
    sb.append("    authReq2: ").append(toIndentedString(authReq2)).append("\n");
sb.append("}");
return sb.toString();
}

/**
* Convert the given object to string with each line indented by 4 spaces
* (except the first line).
*/
private String toIndentedString(java.lang.Object o) {
if (o == null) {
return "null";
}
return o.toString().replace("\n", "\n    ");
}

}

