/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Objects;

/** Document database information */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.15.0")
public class DocumentsDatabase {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";

  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_EXPORT_DATE = "ExportDate";

  @SerializedName(SERIALIZED_NAME_EXPORT_DATE)
  @javax.annotation.Nullable
  private String exportDate;

  public static final String SERIALIZED_NAME_I_D = "ID";

  @SerializedName(SERIALIZED_NAME_I_D)
  @javax.annotation.Nullable
  private String ID;

  public static final String SERIALIZED_NAME_VERSION = "Version";

  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public DocumentsDatabase() {}

  public DocumentsDatabase description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Document database description
   *
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }

  public DocumentsDatabase exportDate(@javax.annotation.Nullable String exportDate) {
    this.exportDate = exportDate;
    return this;
  }

  /**
   * Date the document database was created
   *
   * @return exportDate
   */
  @javax.annotation.Nullable
  public String getExportDate() {
    return exportDate;
  }

  public void setExportDate(@javax.annotation.Nullable String exportDate) {
    this.exportDate = exportDate;
  }

  public DocumentsDatabase ID(@javax.annotation.Nullable String ID) {
    this.ID = ID;
    return this;
  }

  /**
   * Document database identifier
   *
   * @return ID
   */
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(@javax.annotation.Nullable String ID) {
    this.ID = ID;
  }

  public DocumentsDatabase version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Document database version
   *
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentsDatabase documentsDatabase = (DocumentsDatabase) o;
    return Objects.equals(this.description, documentsDatabase.description)
        && Objects.equals(this.exportDate, documentsDatabase.exportDate)
        && Objects.equals(this.ID, documentsDatabase.ID)
        && Objects.equals(this.version, documentsDatabase.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, exportDate, ID, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentsDatabase {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    exportDate: ").append(toIndentedString(exportDate)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields =
        new HashSet<String>(Arrays.asList("Description", "ExportDate", "ID", "Version"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentsDatabase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!DocumentsDatabase.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        System.err.println(
            String.format(
                "The required field(s) %s in DocumentsDatabase is not found in the empty JSON string",
                DocumentsDatabase.openapiRequiredFields.toString()));
      }
    }

    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull())
        && !jsonObj.get("Description").isJsonPrimitive()) {
      System.err.println(
          String.format(
              "Expected the field `Description` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("Description").toString()));
    }
    if ((jsonObj.get("ExportDate") != null && !jsonObj.get("ExportDate").isJsonNull())
        && !jsonObj.get("ExportDate").isJsonPrimitive()) {
      System.err.println(
          String.format(
              "Expected the field `ExportDate` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("ExportDate").toString()));
    }
    if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull())
        && !jsonObj.get("ID").isJsonPrimitive()) {
      System.err.println(
          String.format(
              "Expected the field `ID` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("ID").toString()));
    }
    if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull())
        && !jsonObj.get("Version").isJsonPrimitive()) {
      System.err.println(
          String.format(
              "Expected the field `Version` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("Version").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!DocumentsDatabase.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'DocumentsDatabase' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<DocumentsDatabase> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(DocumentsDatabase.class));

      return (TypeAdapter<T>)
          new TypeAdapter<DocumentsDatabase>() {
            @Override
            public void write(JsonWriter out, DocumentsDatabase value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public DocumentsDatabase read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentsDatabase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentsDatabase
   * @throws IOException if the JSON string is invalid with respect to DocumentsDatabase
   */
  public static DocumentsDatabase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentsDatabase.class);
  }

  /**
   * Convert an instance of DocumentsDatabase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
