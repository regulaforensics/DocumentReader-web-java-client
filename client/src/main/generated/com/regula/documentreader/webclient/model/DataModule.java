/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Objects;

/** DataModule */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.15.0")
public class DataModule {
  public static final String SERIALIZED_NAME_M_DATA = "mData";

  @SerializedName(SERIALIZED_NAME_M_DATA)
  @javax.annotation.Nonnull
  private String mData;

  public static final String SERIALIZED_NAME_M_LENGTH = "mLength";

  @SerializedName(SERIALIZED_NAME_M_LENGTH)
  @javax.annotation.Nonnull
  private Integer mLength;

  public static final String SERIALIZED_NAME_M_RESERVED1 = "mReserved1";

  @SerializedName(SERIALIZED_NAME_M_RESERVED1)
  @javax.annotation.Nullable
  private Integer mReserved1;

  public static final String SERIALIZED_NAME_M_RESERVER2 = "mReserver2";

  @SerializedName(SERIALIZED_NAME_M_RESERVER2)
  @javax.annotation.Nullable
  private Integer mReserver2;

  public static final String SERIALIZED_NAME_M_TYPE = "mType";

  @SerializedName(SERIALIZED_NAME_M_TYPE)
  @javax.annotation.Nonnull
  private BarCodeModuleType mType;

  public DataModule() {}

  public DataModule mData(@javax.annotation.Nonnull String mData) {
    this.mData = mData;
    return this;
  }

  /**
   * Get mData
   *
   * @return mData
   */
  @javax.annotation.Nonnull
  public String getmData() {
    return mData;
  }

  public void setmData(@javax.annotation.Nonnull String mData) {
    this.mData = mData;
  }

  public DataModule mLength(@javax.annotation.Nonnull Integer mLength) {
    this.mLength = mLength;
    return this;
  }

  /**
   * Get mLength
   *
   * @return mLength
   */
  @javax.annotation.Nonnull
  public Integer getmLength() {
    return mLength;
  }

  public void setmLength(@javax.annotation.Nonnull Integer mLength) {
    this.mLength = mLength;
  }

  public DataModule mReserved1(@javax.annotation.Nullable Integer mReserved1) {
    this.mReserved1 = mReserved1;
    return this;
  }

  /**
   * Get mReserved1
   *
   * @return mReserved1
   */
  @javax.annotation.Nullable
  public Integer getmReserved1() {
    return mReserved1;
  }

  public void setmReserved1(@javax.annotation.Nullable Integer mReserved1) {
    this.mReserved1 = mReserved1;
  }

  public DataModule mReserver2(@javax.annotation.Nullable Integer mReserver2) {
    this.mReserver2 = mReserver2;
    return this;
  }

  /**
   * Get mReserver2
   *
   * @return mReserver2
   */
  @javax.annotation.Nullable
  public Integer getmReserver2() {
    return mReserver2;
  }

  public void setmReserver2(@javax.annotation.Nullable Integer mReserver2) {
    this.mReserver2 = mReserver2;
  }

  public DataModule mType(@javax.annotation.Nonnull BarCodeModuleType mType) {
    this.mType = mType;
    return this;
  }

  /**
   * Get mType
   *
   * @return mType
   */
  @javax.annotation.Nonnull
  public BarCodeModuleType getmType() {
    return mType;
  }

  public void setmType(@javax.annotation.Nonnull BarCodeModuleType mType) {
    this.mType = mType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataModule dataModule = (DataModule) o;
    return Objects.equals(this.mData, dataModule.mData)
        && Objects.equals(this.mLength, dataModule.mLength)
        && Objects.equals(this.mReserved1, dataModule.mReserved1)
        && Objects.equals(this.mReserver2, dataModule.mReserver2)
        && Objects.equals(this.mType, dataModule.mType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mData, mLength, mReserved1, mReserver2, mType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataModule {\n");
    sb.append("    mData: ").append(toIndentedString(mData)).append("\n");
    sb.append("    mLength: ").append(toIndentedString(mLength)).append("\n");
    sb.append("    mReserved1: ").append(toIndentedString(mReserved1)).append("\n");
    sb.append("    mReserver2: ").append(toIndentedString(mReserver2)).append("\n");
    sb.append("    mType: ").append(toIndentedString(mType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields =
        new HashSet<String>(Arrays.asList("mData", "mLength", "mReserved1", "mReserver2", "mType"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("mData", "mLength", "mType"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataModule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!DataModule.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        System.err.println(
            String.format(
                "The required field(s) %s in DataModule is not found in the empty JSON string",
                DataModule.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : DataModule.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        System.err.println(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("mData").isJsonPrimitive()) {
      System.err.println(
          String.format(
              "Expected the field `mData` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("mData").toString()));
    }
    // validate the required field `mType`
    BarCodeModuleType.validateJsonElement(jsonObj.get("mType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!DataModule.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'DataModule' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<DataModule> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(DataModule.class));

      return (TypeAdapter<T>)
          new TypeAdapter<DataModule>() {
            @Override
            public void write(JsonWriter out, DataModule value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public DataModule read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of DataModule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataModule
   * @throws IOException if the JSON string is invalid with respect to DataModule
   */
  public static DataModule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataModule.class);
  }

  /**
   * Convert an instance of DataModule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
