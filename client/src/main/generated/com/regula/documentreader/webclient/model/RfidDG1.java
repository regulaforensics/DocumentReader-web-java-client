/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.documentreader.webclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;


/**
* Structure used to store the contents of EF.DG1 informational data group of ePassport application – document MRZ data
*/

public class RfidDG1 {
        public static final String SERIALIZED_NAME_TYPE = "Type";
        @SerializedName(SERIALIZED_NAME_TYPE)
            private Integer type;



        public static final String SERIALIZED_NAME_DOCUMENT_I_D = "DocumentID";
        @SerializedName(SERIALIZED_NAME_DOCUMENT_I_D)
            private Integer documentID;



        public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "DocumentType";
        @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
            private String documentType;



        public static final String SERIALIZED_NAME_STATE = "State";
        @SerializedName(SERIALIZED_NAME_STATE)
            private String state;



        public static final String SERIALIZED_NAME_HOLDER = "Holder";
        @SerializedName(SERIALIZED_NAME_HOLDER)
            private String holder;



        public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "DocumentNumber";
        @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
            private String documentNumber;



        public static final String SERIALIZED_NAME_CHECK_DIGIT_DOCUMENT_NUMBER = "CheckDigitDocumentNumber";
        @SerializedName(SERIALIZED_NAME_CHECK_DIGIT_DOCUMENT_NUMBER)
            private BigDecimal checkDigitDocumentNumber;



        public static final String SERIALIZED_NAME_NATIONALITY = "Nationality";
        @SerializedName(SERIALIZED_NAME_NATIONALITY)
            private String nationality;



        public static final String SERIALIZED_NAME_BIRTHDAY = "Birthday";
        @SerializedName(SERIALIZED_NAME_BIRTHDAY)
            private String birthday;



        public static final String SERIALIZED_NAME_CHECK_DIGIT_BIRTHDAY = "CheckDigitBirthday";
        @SerializedName(SERIALIZED_NAME_CHECK_DIGIT_BIRTHDAY)
            private BigDecimal checkDigitBirthday;



        public static final String SERIALIZED_NAME_SEX = "Sex";
        @SerializedName(SERIALIZED_NAME_SEX)
            private String sex;



        public static final String SERIALIZED_NAME_EXPIRY_DATE = "ExpiryDate";
        @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
            private String expiryDate;



        public static final String SERIALIZED_NAME_CHECK_DIGIT_EXPIRY_DATE = "CheckDigitExpiryDate";
        @SerializedName(SERIALIZED_NAME_CHECK_DIGIT_EXPIRY_DATE)
            private BigDecimal checkDigitExpiryDate;



        public static final String SERIALIZED_NAME_OPTIONAL_DATA = "OptionalData";
        @SerializedName(SERIALIZED_NAME_OPTIONAL_DATA)
            private String optionalData;



        public static final String SERIALIZED_NAME_CHECK_DIGIT_OPTIONAL_DATA = "CheckDigitOptionalData";
        @SerializedName(SERIALIZED_NAME_CHECK_DIGIT_OPTIONAL_DATA)
            private BigDecimal checkDigitOptionalData;



        public static final String SERIALIZED_NAME_CHECK_DIGIT_COMPOSITE = "CheckDigitComposite";
        @SerializedName(SERIALIZED_NAME_CHECK_DIGIT_COMPOSITE)
            private BigDecimal checkDigitComposite;




            public RfidDG1 withType(Integer type) {
              this.type = type;
              return this;
            }


    /**
        * Get type
    * @return type
    **/
    
    

        public Integer getType() {
        return type;
    }


            public void setType(Integer type) {
            this.type = type;
        }


            public RfidDG1 withDocumentID(Integer documentID) {
              this.documentID = documentID;
              return this;
            }


    /**
        * Get documentID
    * @return documentID
    **/
    
    

        public Integer getDocumentID() {
        return documentID;
    }


            public void setDocumentID(Integer documentID) {
            this.documentID = documentID;
        }


            public RfidDG1 withDocumentType(String documentType) {
              this.documentType = documentType;
              return this;
            }


    /**
        * Symbolic code of document type
    * @return documentType
    **/
    
    

        public String getDocumentType() {
        return documentType;
    }


            public void setDocumentType(String documentType) {
            this.documentType = documentType;
        }


            public RfidDG1 withState(String state) {
              this.state = state;
              return this;
            }


    /**
        * Symbolic code of document issuing state
    * @return state
    **/
    
    

        public String getState() {
        return state;
    }


            public void setState(String state) {
            this.state = state;
        }


            public RfidDG1 withHolder(String holder) {
              this.holder = holder;
              return this;
            }


    /**
        * DO’s name and surname
    * @return holder
    **/
    
    

        public String getHolder() {
        return holder;
    }


            public void setHolder(String holder) {
            this.holder = holder;
        }


            public RfidDG1 withDocumentNumber(String documentNumber) {
              this.documentNumber = documentNumber;
              return this;
            }


    /**
        * Document number
    * @return documentNumber
    **/
    
    

        public String getDocumentNumber() {
        return documentNumber;
    }


            public void setDocumentNumber(String documentNumber) {
            this.documentNumber = documentNumber;
        }


            public RfidDG1 withCheckDigitDocumentNumber(BigDecimal checkDigitDocumentNumber) {
              this.checkDigitDocumentNumber = checkDigitDocumentNumber;
              return this;
            }


    /**
        * Check digit of document number
    * @return checkDigitDocumentNumber
    **/
    
    

        public BigDecimal getCheckDigitDocumentNumber() {
        return checkDigitDocumentNumber;
    }


            public void setCheckDigitDocumentNumber(BigDecimal checkDigitDocumentNumber) {
            this.checkDigitDocumentNumber = checkDigitDocumentNumber;
        }


            public RfidDG1 withNationality(String nationality) {
              this.nationality = nationality;
              return this;
            }


    /**
        * Symbolic code of DO’s nationality
    * @return nationality
    **/
    
    

        public String getNationality() {
        return nationality;
    }


            public void setNationality(String nationality) {
            this.nationality = nationality;
        }


            public RfidDG1 withBirthday(String birthday) {
              this.birthday = birthday;
              return this;
            }


    /**
        * DO’s date of birth
    * @return birthday
    **/
    
    

        public String getBirthday() {
        return birthday;
    }


            public void setBirthday(String birthday) {
            this.birthday = birthday;
        }


            public RfidDG1 withCheckDigitBirthday(BigDecimal checkDigitBirthday) {
              this.checkDigitBirthday = checkDigitBirthday;
              return this;
            }


    /**
        * Check digit of DO’s date of birth
    * @return checkDigitBirthday
    **/
    
    

        public BigDecimal getCheckDigitBirthday() {
        return checkDigitBirthday;
    }


            public void setCheckDigitBirthday(BigDecimal checkDigitBirthday) {
            this.checkDigitBirthday = checkDigitBirthday;
        }


            public RfidDG1 withSex(String sex) {
              this.sex = sex;
              return this;
            }


    /**
        * DO’s sex
    * @return sex
    **/
    
    

        public String getSex() {
        return sex;
    }


            public void setSex(String sex) {
            this.sex = sex;
        }


            public RfidDG1 withExpiryDate(String expiryDate) {
              this.expiryDate = expiryDate;
              return this;
            }


    /**
        * Term of validity of the document
    * @return expiryDate
    **/
    
    

        public String getExpiryDate() {
        return expiryDate;
    }


            public void setExpiryDate(String expiryDate) {
            this.expiryDate = expiryDate;
        }


            public RfidDG1 withCheckDigitExpiryDate(BigDecimal checkDigitExpiryDate) {
              this.checkDigitExpiryDate = checkDigitExpiryDate;
              return this;
            }


    /**
        * Check digit of term of validity of the document
    * @return checkDigitExpiryDate
    **/
    
    

        public BigDecimal getCheckDigitExpiryDate() {
        return checkDigitExpiryDate;
    }


            public void setCheckDigitExpiryDate(BigDecimal checkDigitExpiryDate) {
            this.checkDigitExpiryDate = checkDigitExpiryDate;
        }


            public RfidDG1 withOptionalData(String optionalData) {
              this.optionalData = optionalData;
              return this;
            }


    /**
        * DO’s personal number or other additional data
    * @return optionalData
    **/
    
    

        public String getOptionalData() {
        return optionalData;
    }


            public void setOptionalData(String optionalData) {
            this.optionalData = optionalData;
        }


            public RfidDG1 withCheckDigitOptionalData(BigDecimal checkDigitOptionalData) {
              this.checkDigitOptionalData = checkDigitOptionalData;
              return this;
            }


    /**
        * Check digit of additional data
    * @return checkDigitOptionalData
    **/
    
    

        public BigDecimal getCheckDigitOptionalData() {
        return checkDigitOptionalData;
    }


            public void setCheckDigitOptionalData(BigDecimal checkDigitOptionalData) {
            this.checkDigitOptionalData = checkDigitOptionalData;
        }


            public RfidDG1 withCheckDigitComposite(BigDecimal checkDigitComposite) {
              this.checkDigitComposite = checkDigitComposite;
              return this;
            }


    /**
        * General check digit
    * @return checkDigitComposite
    **/
    
    

        public BigDecimal getCheckDigitComposite() {
        return checkDigitComposite;
    }


            public void setCheckDigitComposite(BigDecimal checkDigitComposite) {
            this.checkDigitComposite = checkDigitComposite;
        }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
        return true;
        }
        if (o == null || getClass() != o.getClass()) {
        return false;
        }
            RfidDG1 rfidDG1 = (RfidDG1) o;
            return Objects.equals(this.type, rfidDG1.type) &&
            Objects.equals(this.documentID, rfidDG1.documentID) &&
            Objects.equals(this.documentType, rfidDG1.documentType) &&
            Objects.equals(this.state, rfidDG1.state) &&
            Objects.equals(this.holder, rfidDG1.holder) &&
            Objects.equals(this.documentNumber, rfidDG1.documentNumber) &&
            Objects.equals(this.checkDigitDocumentNumber, rfidDG1.checkDigitDocumentNumber) &&
            Objects.equals(this.nationality, rfidDG1.nationality) &&
            Objects.equals(this.birthday, rfidDG1.birthday) &&
            Objects.equals(this.checkDigitBirthday, rfidDG1.checkDigitBirthday) &&
            Objects.equals(this.sex, rfidDG1.sex) &&
            Objects.equals(this.expiryDate, rfidDG1.expiryDate) &&
            Objects.equals(this.checkDigitExpiryDate, rfidDG1.checkDigitExpiryDate) &&
            Objects.equals(this.optionalData, rfidDG1.optionalData) &&
            Objects.equals(this.checkDigitOptionalData, rfidDG1.checkDigitOptionalData) &&
            Objects.equals(this.checkDigitComposite, rfidDG1.checkDigitComposite);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, documentID, documentType, state, holder, documentNumber, checkDigitDocumentNumber, nationality, birthday, checkDigitBirthday, sex, expiryDate, checkDigitExpiryDate, optionalData, checkDigitOptionalData, checkDigitComposite);
    }


@Override
public String toString() {
StringBuilder sb = new StringBuilder();
sb.append("class RfidDG1 {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    documentID: ").append(toIndentedString(documentID)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    holder: ").append(toIndentedString(holder)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    checkDigitDocumentNumber: ").append(toIndentedString(checkDigitDocumentNumber)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    checkDigitBirthday: ").append(toIndentedString(checkDigitBirthday)).append("\n");
    sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    checkDigitExpiryDate: ").append(toIndentedString(checkDigitExpiryDate)).append("\n");
    sb.append("    optionalData: ").append(toIndentedString(optionalData)).append("\n");
    sb.append("    checkDigitOptionalData: ").append(toIndentedString(checkDigitOptionalData)).append("\n");
    sb.append("    checkDigitComposite: ").append(toIndentedString(checkDigitComposite)).append("\n");
sb.append("}");
return sb.toString();
}

/**
* Convert the given object to string with each line indented by 4 spaces
* (except the first line).
*/
private String toIndentedString(java.lang.Object o) {
if (o == null) {
return "null";
}
return o.toString().replace("\n", "\n    ");
}

}

