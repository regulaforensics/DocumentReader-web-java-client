/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.Objects;

/**
 * Structure used to store the contents of EF.DG1 informational data group of ePassport application
 * – document MRZ data
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class RfidDG1 {
  public static final String SERIALIZED_NAME_TYPE = "Type";

  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private RfidDataGroupTypeTag type;

  public static final String SERIALIZED_NAME_DOCUMENT_I_D = "DocumentID";

  @SerializedName(SERIALIZED_NAME_DOCUMENT_I_D)
  @javax.annotation.Nonnull
  private DocumentFormat documentID;

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "DocumentType";

  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  @javax.annotation.Nonnull
  private String documentType;

  public static final String SERIALIZED_NAME_STATE = "State";

  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nonnull
  private String state;

  public static final String SERIALIZED_NAME_HOLDER = "Holder";

  @SerializedName(SERIALIZED_NAME_HOLDER)
  @javax.annotation.Nonnull
  private String holder;

  public static final String SERIALIZED_NAME_DOCUMENT_NUMBER = "DocumentNumber";

  @SerializedName(SERIALIZED_NAME_DOCUMENT_NUMBER)
  @javax.annotation.Nonnull
  private String documentNumber;

  public static final String SERIALIZED_NAME_CHECK_DIGIT_DOCUMENT_NUMBER =
      "CheckDigitDocumentNumber";

  @SerializedName(SERIALIZED_NAME_CHECK_DIGIT_DOCUMENT_NUMBER)
  @javax.annotation.Nonnull
  private BigDecimal checkDigitDocumentNumber;

  public static final String SERIALIZED_NAME_NATIONALITY = "Nationality";

  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  @javax.annotation.Nonnull
  private String nationality;

  public static final String SERIALIZED_NAME_BIRTHDAY = "Birthday";

  @SerializedName(SERIALIZED_NAME_BIRTHDAY)
  @javax.annotation.Nonnull
  private String birthday;

  public static final String SERIALIZED_NAME_CHECK_DIGIT_BIRTHDAY = "CheckDigitBirthday";

  @SerializedName(SERIALIZED_NAME_CHECK_DIGIT_BIRTHDAY)
  @javax.annotation.Nonnull
  private BigDecimal checkDigitBirthday;

  public static final String SERIALIZED_NAME_SEX = "Sex";

  @SerializedName(SERIALIZED_NAME_SEX)
  @javax.annotation.Nonnull
  private String sex;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "ExpiryDate";

  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  @javax.annotation.Nonnull
  private String expiryDate;

  public static final String SERIALIZED_NAME_CHECK_DIGIT_EXPIRY_DATE = "CheckDigitExpiryDate";

  @SerializedName(SERIALIZED_NAME_CHECK_DIGIT_EXPIRY_DATE)
  @javax.annotation.Nonnull
  private BigDecimal checkDigitExpiryDate;

  public static final String SERIALIZED_NAME_OPTIONAL_DATA = "OptionalData";

  @SerializedName(SERIALIZED_NAME_OPTIONAL_DATA)
  @javax.annotation.Nonnull
  private String optionalData;

  public static final String SERIALIZED_NAME_CHECK_DIGIT_OPTIONAL_DATA = "CheckDigitOptionalData";

  @SerializedName(SERIALIZED_NAME_CHECK_DIGIT_OPTIONAL_DATA)
  @javax.annotation.Nonnull
  private BigDecimal checkDigitOptionalData;

  public static final String SERIALIZED_NAME_CHECK_DIGIT_COMPOSITE = "CheckDigitComposite";

  @SerializedName(SERIALIZED_NAME_CHECK_DIGIT_COMPOSITE)
  @javax.annotation.Nonnull
  private BigDecimal checkDigitComposite;

  public RfidDG1() {}

  public RfidDG1 type(@javax.annotation.Nonnull RfidDataGroupTypeTag type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  @javax.annotation.Nonnull
  public RfidDataGroupTypeTag getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull RfidDataGroupTypeTag type) {
    this.type = type;
  }

  public RfidDG1 documentID(@javax.annotation.Nonnull DocumentFormat documentID) {
    this.documentID = documentID;
    return this;
  }

  /**
   * Get documentID
   *
   * @return documentID
   */
  @javax.annotation.Nonnull
  public DocumentFormat getDocumentID() {
    return documentID;
  }

  public void setDocumentID(@javax.annotation.Nonnull DocumentFormat documentID) {
    this.documentID = documentID;
  }

  public RfidDG1 documentType(@javax.annotation.Nonnull String documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * Symbolic code of document type
   *
   * @return documentType
   */
  @javax.annotation.Nonnull
  public String getDocumentType() {
    return documentType;
  }

  public void setDocumentType(@javax.annotation.Nonnull String documentType) {
    this.documentType = documentType;
  }

  public RfidDG1 state(@javax.annotation.Nonnull String state) {
    this.state = state;
    return this;
  }

  /**
   * Symbolic code of document issuing state
   *
   * @return state
   */
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nonnull String state) {
    this.state = state;
  }

  public RfidDG1 holder(@javax.annotation.Nonnull String holder) {
    this.holder = holder;
    return this;
  }

  /**
   * DO’s name and surname
   *
   * @return holder
   */
  @javax.annotation.Nonnull
  public String getHolder() {
    return holder;
  }

  public void setHolder(@javax.annotation.Nonnull String holder) {
    this.holder = holder;
  }

  public RfidDG1 documentNumber(@javax.annotation.Nonnull String documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

  /**
   * Document number
   *
   * @return documentNumber
   */
  @javax.annotation.Nonnull
  public String getDocumentNumber() {
    return documentNumber;
  }

  public void setDocumentNumber(@javax.annotation.Nonnull String documentNumber) {
    this.documentNumber = documentNumber;
  }

  public RfidDG1 checkDigitDocumentNumber(
      @javax.annotation.Nonnull BigDecimal checkDigitDocumentNumber) {
    this.checkDigitDocumentNumber = checkDigitDocumentNumber;
    return this;
  }

  /**
   * Check digit of document number
   *
   * @return checkDigitDocumentNumber
   */
  @javax.annotation.Nonnull
  public BigDecimal getCheckDigitDocumentNumber() {
    return checkDigitDocumentNumber;
  }

  public void setCheckDigitDocumentNumber(
      @javax.annotation.Nonnull BigDecimal checkDigitDocumentNumber) {
    this.checkDigitDocumentNumber = checkDigitDocumentNumber;
  }

  public RfidDG1 nationality(@javax.annotation.Nonnull String nationality) {
    this.nationality = nationality;
    return this;
  }

  /**
   * Symbolic code of DO’s nationality
   *
   * @return nationality
   */
  @javax.annotation.Nonnull
  public String getNationality() {
    return nationality;
  }

  public void setNationality(@javax.annotation.Nonnull String nationality) {
    this.nationality = nationality;
  }

  public RfidDG1 birthday(@javax.annotation.Nonnull String birthday) {
    this.birthday = birthday;
    return this;
  }

  /**
   * DO’s date of birth
   *
   * @return birthday
   */
  @javax.annotation.Nonnull
  public String getBirthday() {
    return birthday;
  }

  public void setBirthday(@javax.annotation.Nonnull String birthday) {
    this.birthday = birthday;
  }

  public RfidDG1 checkDigitBirthday(@javax.annotation.Nonnull BigDecimal checkDigitBirthday) {
    this.checkDigitBirthday = checkDigitBirthday;
    return this;
  }

  /**
   * Check digit of DO’s date of birth
   *
   * @return checkDigitBirthday
   */
  @javax.annotation.Nonnull
  public BigDecimal getCheckDigitBirthday() {
    return checkDigitBirthday;
  }

  public void setCheckDigitBirthday(@javax.annotation.Nonnull BigDecimal checkDigitBirthday) {
    this.checkDigitBirthday = checkDigitBirthday;
  }

  public RfidDG1 sex(@javax.annotation.Nonnull String sex) {
    this.sex = sex;
    return this;
  }

  /**
   * DO’s sex
   *
   * @return sex
   */
  @javax.annotation.Nonnull
  public String getSex() {
    return sex;
  }

  public void setSex(@javax.annotation.Nonnull String sex) {
    this.sex = sex;
  }

  public RfidDG1 expiryDate(@javax.annotation.Nonnull String expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * Term of validity of the document
   *
   * @return expiryDate
   */
  @javax.annotation.Nonnull
  public String getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(@javax.annotation.Nonnull String expiryDate) {
    this.expiryDate = expiryDate;
  }

  public RfidDG1 checkDigitExpiryDate(@javax.annotation.Nonnull BigDecimal checkDigitExpiryDate) {
    this.checkDigitExpiryDate = checkDigitExpiryDate;
    return this;
  }

  /**
   * Check digit of term of validity of the document
   *
   * @return checkDigitExpiryDate
   */
  @javax.annotation.Nonnull
  public BigDecimal getCheckDigitExpiryDate() {
    return checkDigitExpiryDate;
  }

  public void setCheckDigitExpiryDate(@javax.annotation.Nonnull BigDecimal checkDigitExpiryDate) {
    this.checkDigitExpiryDate = checkDigitExpiryDate;
  }

  public RfidDG1 optionalData(@javax.annotation.Nonnull String optionalData) {
    this.optionalData = optionalData;
    return this;
  }

  /**
   * DO’s personal number or other additional data
   *
   * @return optionalData
   */
  @javax.annotation.Nonnull
  public String getOptionalData() {
    return optionalData;
  }

  public void setOptionalData(@javax.annotation.Nonnull String optionalData) {
    this.optionalData = optionalData;
  }

  public RfidDG1 checkDigitOptionalData(
      @javax.annotation.Nonnull BigDecimal checkDigitOptionalData) {
    this.checkDigitOptionalData = checkDigitOptionalData;
    return this;
  }

  /**
   * Check digit of additional data
   *
   * @return checkDigitOptionalData
   */
  @javax.annotation.Nonnull
  public BigDecimal getCheckDigitOptionalData() {
    return checkDigitOptionalData;
  }

  public void setCheckDigitOptionalData(
      @javax.annotation.Nonnull BigDecimal checkDigitOptionalData) {
    this.checkDigitOptionalData = checkDigitOptionalData;
  }

  public RfidDG1 checkDigitComposite(@javax.annotation.Nonnull BigDecimal checkDigitComposite) {
    this.checkDigitComposite = checkDigitComposite;
    return this;
  }

  /**
   * General check digit
   *
   * @return checkDigitComposite
   */
  @javax.annotation.Nonnull
  public BigDecimal getCheckDigitComposite() {
    return checkDigitComposite;
  }

  public void setCheckDigitComposite(@javax.annotation.Nonnull BigDecimal checkDigitComposite) {
    this.checkDigitComposite = checkDigitComposite;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RfidDG1 rfidDG1 = (RfidDG1) o;
    return Objects.equals(this.type, rfidDG1.type)
        && Objects.equals(this.documentID, rfidDG1.documentID)
        && Objects.equals(this.documentType, rfidDG1.documentType)
        && Objects.equals(this.state, rfidDG1.state)
        && Objects.equals(this.holder, rfidDG1.holder)
        && Objects.equals(this.documentNumber, rfidDG1.documentNumber)
        && Objects.equals(this.checkDigitDocumentNumber, rfidDG1.checkDigitDocumentNumber)
        && Objects.equals(this.nationality, rfidDG1.nationality)
        && Objects.equals(this.birthday, rfidDG1.birthday)
        && Objects.equals(this.checkDigitBirthday, rfidDG1.checkDigitBirthday)
        && Objects.equals(this.sex, rfidDG1.sex)
        && Objects.equals(this.expiryDate, rfidDG1.expiryDate)
        && Objects.equals(this.checkDigitExpiryDate, rfidDG1.checkDigitExpiryDate)
        && Objects.equals(this.optionalData, rfidDG1.optionalData)
        && Objects.equals(this.checkDigitOptionalData, rfidDG1.checkDigitOptionalData)
        && Objects.equals(this.checkDigitComposite, rfidDG1.checkDigitComposite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        type,
        documentID,
        documentType,
        state,
        holder,
        documentNumber,
        checkDigitDocumentNumber,
        nationality,
        birthday,
        checkDigitBirthday,
        sex,
        expiryDate,
        checkDigitExpiryDate,
        optionalData,
        checkDigitOptionalData,
        checkDigitComposite);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RfidDG1 {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    documentID: ").append(toIndentedString(documentID)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    holder: ").append(toIndentedString(holder)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    checkDigitDocumentNumber: ")
        .append(toIndentedString(checkDigitDocumentNumber))
        .append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    birthday: ").append(toIndentedString(birthday)).append("\n");
    sb.append("    checkDigitBirthday: ").append(toIndentedString(checkDigitBirthday)).append("\n");
    sb.append("    sex: ").append(toIndentedString(sex)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    checkDigitExpiryDate: ")
        .append(toIndentedString(checkDigitExpiryDate))
        .append("\n");
    sb.append("    optionalData: ").append(toIndentedString(optionalData)).append("\n");
    sb.append("    checkDigitOptionalData: ")
        .append(toIndentedString(checkDigitOptionalData))
        .append("\n");
    sb.append("    checkDigitComposite: ")
        .append(toIndentedString(checkDigitComposite))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Type");
    openapiFields.add("DocumentID");
    openapiFields.add("DocumentType");
    openapiFields.add("State");
    openapiFields.add("Holder");
    openapiFields.add("DocumentNumber");
    openapiFields.add("CheckDigitDocumentNumber");
    openapiFields.add("Nationality");
    openapiFields.add("Birthday");
    openapiFields.add("CheckDigitBirthday");
    openapiFields.add("Sex");
    openapiFields.add("ExpiryDate");
    openapiFields.add("CheckDigitExpiryDate");
    openapiFields.add("OptionalData");
    openapiFields.add("CheckDigitOptionalData");
    openapiFields.add("CheckDigitComposite");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("DocumentID");
    openapiRequiredFields.add("DocumentType");
    openapiRequiredFields.add("State");
    openapiRequiredFields.add("Holder");
    openapiRequiredFields.add("DocumentNumber");
    openapiRequiredFields.add("CheckDigitDocumentNumber");
    openapiRequiredFields.add("Nationality");
    openapiRequiredFields.add("Birthday");
    openapiRequiredFields.add("CheckDigitBirthday");
    openapiRequiredFields.add("Sex");
    openapiRequiredFields.add("ExpiryDate");
    openapiRequiredFields.add("CheckDigitExpiryDate");
    openapiRequiredFields.add("OptionalData");
    openapiRequiredFields.add("CheckDigitOptionalData");
    openapiRequiredFields.add("CheckDigitComposite");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RfidDG1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!RfidDG1.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in RfidDG1 is not found in the empty JSON string",
                RfidDG1.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : RfidDG1.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `Type`
    RfidDataGroupTypeTag.validateJsonElement(jsonObj.get("Type"));
    // validate the required field `DocumentID`
    DocumentFormat.validateJsonElement(jsonObj.get("DocumentID"));
    if (!jsonObj.get("DocumentType").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `DocumentType` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("DocumentType").toString()));
    }
    if (!jsonObj.get("State").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `State` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("State").toString()));
    }
    if (!jsonObj.get("Holder").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Holder` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("Holder").toString()));
    }
    if (!jsonObj.get("DocumentNumber").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `DocumentNumber` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("DocumentNumber").toString()));
    }
    if (!jsonObj.get("Nationality").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Nationality` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("Nationality").toString()));
    }
    if (!jsonObj.get("Birthday").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Birthday` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("Birthday").toString()));
    }
    if (!jsonObj.get("Sex").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Sex` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("Sex").toString()));
    }
    if (!jsonObj.get("ExpiryDate").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `ExpiryDate` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("ExpiryDate").toString()));
    }
    if (!jsonObj.get("OptionalData").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `OptionalData` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("OptionalData").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!RfidDG1.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'RfidDG1' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<RfidDG1> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(RfidDG1.class));

      return (TypeAdapter<T>)
          new TypeAdapter<RfidDG1>() {
            @Override
            public void write(JsonWriter out, RfidDG1 value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public RfidDG1 read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of RfidDG1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RfidDG1
   * @throws IOException if the JSON string is invalid with respect to RfidDG1
   */
  public static RfidDG1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RfidDG1.class);
  }

  /**
   * Convert an instance of RfidDG1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
