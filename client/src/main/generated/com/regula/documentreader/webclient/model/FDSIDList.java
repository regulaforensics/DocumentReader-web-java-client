/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/** Extended document type info and Regula&#39;s &#39;Information Reference Systems&#39; links */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.13.0")
public class FDSIDList {
  public static final String SERIALIZED_NAME_IC_A_O_CODE = "ICAOCode";

  @SerializedName(SERIALIZED_NAME_IC_A_O_CODE)
  @javax.annotation.Nonnull
  private String icAOCode;

  public static final String SERIALIZED_NAME_COUNT = "Count";

  @SerializedName(SERIALIZED_NAME_COUNT)
  @javax.annotation.Nullable
  private BigDecimal count;

  public static final String SERIALIZED_NAME_LIST = "List";

  @SerializedName(SERIALIZED_NAME_LIST)
  @javax.annotation.Nullable
  private List<Integer> list;

  public static final String SERIALIZED_NAME_D_TYPE = "dType";

  @SerializedName(SERIALIZED_NAME_D_TYPE)
  @javax.annotation.Nonnull
  private DocumentType dType;

  public static final String SERIALIZED_NAME_D_FORMAT = "dFormat";

  @SerializedName(SERIALIZED_NAME_D_FORMAT)
  @javax.annotation.Nonnull
  private DocumentFormat dFormat;

  public static final String SERIALIZED_NAME_D_M_R_Z = "dMRZ";

  @SerializedName(SERIALIZED_NAME_D_M_R_Z)
  @javax.annotation.Nonnull
  private Boolean dMRZ;

  public static final String SERIALIZED_NAME_D_DESCRIPTION = "dDescription";

  @SerializedName(SERIALIZED_NAME_D_DESCRIPTION)
  @javax.annotation.Nullable
  private String dDescription;

  public static final String SERIALIZED_NAME_D_YEAR = "dYear";

  @SerializedName(SERIALIZED_NAME_D_YEAR)
  @javax.annotation.Nullable
  private String dYear;

  public static final String SERIALIZED_NAME_D_COUNTRY_NAME = "dCountryName";

  @SerializedName(SERIALIZED_NAME_D_COUNTRY_NAME)
  @javax.annotation.Nonnull
  private String dCountryName;

  public static final String SERIALIZED_NAME_D_STATE_CODE = "dStateCode";

  @SerializedName(SERIALIZED_NAME_D_STATE_CODE)
  @javax.annotation.Nullable
  private String dStateCode;

  public static final String SERIALIZED_NAME_D_STATE_NAME = "dStateName";

  @SerializedName(SERIALIZED_NAME_D_STATE_NAME)
  @javax.annotation.Nullable
  private String dStateName;

  public static final String SERIALIZED_NAME_IS_DEPRECATED = "isDeprecated";

  @SerializedName(SERIALIZED_NAME_IS_DEPRECATED)
  @javax.annotation.Nonnull
  private Boolean isDeprecated;

  public FDSIDList() {}

  public FDSIDList icAOCode(@javax.annotation.Nonnull String icAOCode) {
    this.icAOCode = icAOCode;
    return this;
  }

  /**
   * ICAO code of the issuing country
   *
   * @return icAOCode
   */
  @javax.annotation.Nonnull
  public String getIcAOCode() {
    return icAOCode;
  }

  public void setIcAOCode(@javax.annotation.Nonnull String icAOCode) {
    this.icAOCode = icAOCode;
  }

  public FDSIDList count(@javax.annotation.Nullable BigDecimal count) {
    this.count = count;
    return this;
  }

  /**
   * Number of elements in the List
   *
   * @return count
   */
  @javax.annotation.Nullable
  public BigDecimal getCount() {
    return count;
  }

  public void setCount(@javax.annotation.Nullable BigDecimal count) {
    this.count = count;
  }

  public FDSIDList list(@javax.annotation.Nullable List<Integer> list) {
    this.list = list;
    return this;
  }

  public FDSIDList addListItem(Integer listItem) {
    if (this.list == null) {
      this.list = new ArrayList<>();
    }
    this.list.add(listItem);
    return this;
  }

  /**
   * Document identifiers in &#39;Information Reference Systems&#39;
   *
   * @return list
   */
  @javax.annotation.Nullable
  public List<Integer> getList() {
    return list;
  }

  public void setList(@javax.annotation.Nullable List<Integer> list) {
    this.list = list;
  }

  public FDSIDList dType(@javax.annotation.Nonnull DocumentType dType) {
    this.dType = dType;
    return this;
  }

  /**
   * Get dType
   *
   * @return dType
   */
  @javax.annotation.Nonnull
  public DocumentType getdType() {
    return dType;
  }

  public void setdType(@javax.annotation.Nonnull DocumentType dType) {
    this.dType = dType;
  }

  public FDSIDList dFormat(@javax.annotation.Nonnull DocumentFormat dFormat) {
    this.dFormat = dFormat;
    return this;
  }

  /**
   * Get dFormat
   *
   * @return dFormat
   */
  @javax.annotation.Nonnull
  public DocumentFormat getdFormat() {
    return dFormat;
  }

  public void setdFormat(@javax.annotation.Nonnull DocumentFormat dFormat) {
    this.dFormat = dFormat;
  }

  public FDSIDList dMRZ(@javax.annotation.Nonnull Boolean dMRZ) {
    this.dMRZ = dMRZ;
    return this;
  }

  /**
   * Flag indicating the presence of MRZ on the document
   *
   * @return dMRZ
   */
  @javax.annotation.Nonnull
  public Boolean getdMRZ() {
    return dMRZ;
  }

  public void setdMRZ(@javax.annotation.Nonnull Boolean dMRZ) {
    this.dMRZ = dMRZ;
  }

  public FDSIDList dDescription(@javax.annotation.Nullable String dDescription) {
    this.dDescription = dDescription;
    return this;
  }

  /**
   * Document description
   *
   * @return dDescription
   */
  @javax.annotation.Nullable
  public String getdDescription() {
    return dDescription;
  }

  public void setdDescription(@javax.annotation.Nullable String dDescription) {
    this.dDescription = dDescription;
  }

  public FDSIDList dYear(@javax.annotation.Nullable String dYear) {
    this.dYear = dYear;
    return this;
  }

  /**
   * Year of publication of the document
   *
   * @return dYear
   */
  @javax.annotation.Nullable
  public String getdYear() {
    return dYear;
  }

  public void setdYear(@javax.annotation.Nullable String dYear) {
    this.dYear = dYear;
  }

  public FDSIDList dCountryName(@javax.annotation.Nonnull String dCountryName) {
    this.dCountryName = dCountryName;
    return this;
  }

  /**
   * Issuing country name
   *
   * @return dCountryName
   */
  @javax.annotation.Nonnull
  public String getdCountryName() {
    return dCountryName;
  }

  public void setdCountryName(@javax.annotation.Nonnull String dCountryName) {
    this.dCountryName = dCountryName;
  }

  public FDSIDList dStateCode(@javax.annotation.Nullable String dStateCode) {
    this.dStateCode = dStateCode;
    return this;
  }

  /**
   * Issuing state code
   *
   * @return dStateCode
   */
  @javax.annotation.Nullable
  public String getdStateCode() {
    return dStateCode;
  }

  public void setdStateCode(@javax.annotation.Nullable String dStateCode) {
    this.dStateCode = dStateCode;
  }

  public FDSIDList dStateName(@javax.annotation.Nullable String dStateName) {
    this.dStateName = dStateName;
    return this;
  }

  /**
   * Issuing state name
   *
   * @return dStateName
   */
  @javax.annotation.Nullable
  public String getdStateName() {
    return dStateName;
  }

  public void setdStateName(@javax.annotation.Nullable String dStateName) {
    this.dStateName = dStateName;
  }

  public FDSIDList isDeprecated(@javax.annotation.Nonnull Boolean isDeprecated) {
    this.isDeprecated = isDeprecated;
    return this;
  }

  /**
   * Whether the document is deprecated
   *
   * @return isDeprecated
   */
  @javax.annotation.Nonnull
  public Boolean getIsDeprecated() {
    return isDeprecated;
  }

  public void setIsDeprecated(@javax.annotation.Nonnull Boolean isDeprecated) {
    this.isDeprecated = isDeprecated;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FDSIDList fdSIDList = (FDSIDList) o;
    return Objects.equals(this.icAOCode, fdSIDList.icAOCode)
        && Objects.equals(this.count, fdSIDList.count)
        && Objects.equals(this.list, fdSIDList.list)
        && Objects.equals(this.dType, fdSIDList.dType)
        && Objects.equals(this.dFormat, fdSIDList.dFormat)
        && Objects.equals(this.dMRZ, fdSIDList.dMRZ)
        && Objects.equals(this.dDescription, fdSIDList.dDescription)
        && Objects.equals(this.dYear, fdSIDList.dYear)
        && Objects.equals(this.dCountryName, fdSIDList.dCountryName)
        && Objects.equals(this.dStateCode, fdSIDList.dStateCode)
        && Objects.equals(this.dStateName, fdSIDList.dStateName)
        && Objects.equals(this.isDeprecated, fdSIDList.isDeprecated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        icAOCode,
        count,
        list,
        dType,
        dFormat,
        dMRZ,
        dDescription,
        dYear,
        dCountryName,
        dStateCode,
        dStateName,
        isDeprecated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FDSIDList {\n");
    sb.append("    icAOCode: ").append(toIndentedString(icAOCode)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    list: ").append(toIndentedString(list)).append("\n");
    sb.append("    dType: ").append(toIndentedString(dType)).append("\n");
    sb.append("    dFormat: ").append(toIndentedString(dFormat)).append("\n");
    sb.append("    dMRZ: ").append(toIndentedString(dMRZ)).append("\n");
    sb.append("    dDescription: ").append(toIndentedString(dDescription)).append("\n");
    sb.append("    dYear: ").append(toIndentedString(dYear)).append("\n");
    sb.append("    dCountryName: ").append(toIndentedString(dCountryName)).append("\n");
    sb.append("    dStateCode: ").append(toIndentedString(dStateCode)).append("\n");
    sb.append("    dStateName: ").append(toIndentedString(dStateName)).append("\n");
    sb.append("    isDeprecated: ").append(toIndentedString(isDeprecated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ICAOCode");
    openapiFields.add("Count");
    openapiFields.add("List");
    openapiFields.add("dType");
    openapiFields.add("dFormat");
    openapiFields.add("dMRZ");
    openapiFields.add("dDescription");
    openapiFields.add("dYear");
    openapiFields.add("dCountryName");
    openapiFields.add("dStateCode");
    openapiFields.add("dStateName");
    openapiFields.add("isDeprecated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ICAOCode");
    openapiRequiredFields.add("dType");
    openapiRequiredFields.add("dFormat");
    openapiRequiredFields.add("dMRZ");
    openapiRequiredFields.add("dCountryName");
    openapiRequiredFields.add("isDeprecated");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FDSIDList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!FDSIDList.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in FDSIDList is not found in the empty JSON string",
                FDSIDList.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : FDSIDList.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("ICAOCode").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `ICAOCode` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("ICAOCode").toString()));
    }
    // ensure the optional json data is an array if present
    if (jsonObj.get("List") != null
        && !jsonObj.get("List").isJsonNull()
        && !jsonObj.get("List").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `List` to be an array in the JSON string but got `%s`",
              jsonObj.get("List").toString()));
    }
    // validate the required field `dType`
    DocumentType.validateJsonElement(jsonObj.get("dType"));
    // validate the required field `dFormat`
    DocumentFormat.validateJsonElement(jsonObj.get("dFormat"));
    if ((jsonObj.get("dDescription") != null && !jsonObj.get("dDescription").isJsonNull())
        && !jsonObj.get("dDescription").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `dDescription` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("dDescription").toString()));
    }
    if ((jsonObj.get("dYear") != null && !jsonObj.get("dYear").isJsonNull())
        && !jsonObj.get("dYear").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `dYear` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("dYear").toString()));
    }
    if (!jsonObj.get("dCountryName").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `dCountryName` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("dCountryName").toString()));
    }
    if ((jsonObj.get("dStateCode") != null && !jsonObj.get("dStateCode").isJsonNull())
        && !jsonObj.get("dStateCode").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `dStateCode` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("dStateCode").toString()));
    }
    if ((jsonObj.get("dStateName") != null && !jsonObj.get("dStateName").isJsonNull())
        && !jsonObj.get("dStateName").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `dStateName` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("dStateName").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!FDSIDList.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'FDSIDList' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<FDSIDList> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(FDSIDList.class));

      return (TypeAdapter<T>)
          new TypeAdapter<FDSIDList>() {
            @Override
            public void write(JsonWriter out, FDSIDList value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public FDSIDList read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of FDSIDList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FDSIDList
   * @throws IOException if the JSON string is invalid with respect to FDSIDList
   */
  public static FDSIDList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FDSIDList.class);
  }

  /**
   * Convert an instance of FDSIDList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
