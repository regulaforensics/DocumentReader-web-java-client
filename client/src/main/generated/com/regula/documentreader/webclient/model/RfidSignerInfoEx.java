/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/**
 * Structure is used to describe the contents of a single copy of digital signature of the document
 * security object and the results of its check within the context of the communication session with
 * electronic document
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class RfidSignerInfoEx {
  public static final String SERIALIZED_NAME_VERSION = "Version";

  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private BigDecimal version;

  public static final String SERIALIZED_NAME_ISSUER = "Issuer";

  @SerializedName(SERIALIZED_NAME_ISSUER)
  @javax.annotation.Nonnull
  private RfidDistinguishedName issuer;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";

  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  @javax.annotation.Nonnull
  private TrfFtBytes serialNumber;

  public static final String SERIALIZED_NAME_SUBJECT_KEY_IDENTIFIER = "SubjectKeyIdentifier";

  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY_IDENTIFIER)
  @javax.annotation.Nonnull
  private TrfFtBytes subjectKeyIdentifier;

  public static final String SERIALIZED_NAME_DIGEST_ALGORITHM = "DigestAlgorithm";

  @SerializedName(SERIALIZED_NAME_DIGEST_ALGORITHM)
  @javax.annotation.Nonnull
  private String digestAlgorithm;

  public static final String SERIALIZED_NAME_SIGNED_ATTRIBUTES = "SignedAttributes";

  @SerializedName(SERIALIZED_NAME_SIGNED_ATTRIBUTES)
  @javax.annotation.Nonnull
  private List<RfidAttributeData> signedAttributes;

  public static final String SERIALIZED_NAME_SIGNATURE_ALGORITHM = "SignatureAlgorithm";

  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALGORITHM)
  @javax.annotation.Nonnull
  private String signatureAlgorithm;

  public static final String SERIALIZED_NAME_SIGNATURE = "Signature";

  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  @javax.annotation.Nonnull
  private TrfFtBytes signature;

  public static final String SERIALIZED_NAME_PA_STATUS = "PA_Status";

  @SerializedName(SERIALIZED_NAME_PA_STATUS)
  @javax.annotation.Nonnull
  private RFIDErrorCodes paStatus;

  public static final String SERIALIZED_NAME_CERTIFICATE_CHAIN = "CertificateChain";

  @SerializedName(SERIALIZED_NAME_CERTIFICATE_CHAIN)
  @javax.annotation.Nonnull
  private List<RfidCertificateEx> certificateChain;

  public static final String SERIALIZED_NAME_DATA_TO_HASH = "DataToHash";

  @SerializedName(SERIALIZED_NAME_DATA_TO_HASH)
  @javax.annotation.Nonnull
  private String dataToHash;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "Notifications";

  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  @javax.annotation.Nonnull
  private List<ParsingNotificationCodes> notifications;

  public RfidSignerInfoEx() {}

  public RfidSignerInfoEx version(@javax.annotation.Nonnull BigDecimal version) {
    this.version = version;
    return this;
  }

  /**
   * Version of SignerInfo ASN.1 structure
   *
   * @return version
   */
  @javax.annotation.Nonnull
  public BigDecimal getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull BigDecimal version) {
    this.version = version;
  }

  public RfidSignerInfoEx issuer(@javax.annotation.Nonnull RfidDistinguishedName issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   *
   * @return issuer
   */
  @javax.annotation.Nonnull
  public RfidDistinguishedName getIssuer() {
    return issuer;
  }

  public void setIssuer(@javax.annotation.Nonnull RfidDistinguishedName issuer) {
    this.issuer = issuer;
  }

  public RfidSignerInfoEx serialNumber(@javax.annotation.Nonnull TrfFtBytes serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Get serialNumber
   *
   * @return serialNumber
   */
  @javax.annotation.Nonnull
  public TrfFtBytes getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(@javax.annotation.Nonnull TrfFtBytes serialNumber) {
    this.serialNumber = serialNumber;
  }

  public RfidSignerInfoEx subjectKeyIdentifier(
      @javax.annotation.Nonnull TrfFtBytes subjectKeyIdentifier) {
    this.subjectKeyIdentifier = subjectKeyIdentifier;
    return this;
  }

  /**
   * Get subjectKeyIdentifier
   *
   * @return subjectKeyIdentifier
   */
  @javax.annotation.Nonnull
  public TrfFtBytes getSubjectKeyIdentifier() {
    return subjectKeyIdentifier;
  }

  public void setSubjectKeyIdentifier(@javax.annotation.Nonnull TrfFtBytes subjectKeyIdentifier) {
    this.subjectKeyIdentifier = subjectKeyIdentifier;
  }

  public RfidSignerInfoEx digestAlgorithm(@javax.annotation.Nonnull String digestAlgorithm) {
    this.digestAlgorithm = digestAlgorithm;
    return this;
  }

  /**
   * Hash algorithm identifier (OID) for digital signature generation
   *
   * @return digestAlgorithm
   */
  @javax.annotation.Nonnull
  public String getDigestAlgorithm() {
    return digestAlgorithm;
  }

  public void setDigestAlgorithm(@javax.annotation.Nonnull String digestAlgorithm) {
    this.digestAlgorithm = digestAlgorithm;
  }

  public RfidSignerInfoEx signedAttributes(
      @javax.annotation.Nonnull List<RfidAttributeData> signedAttributes) {
    this.signedAttributes = signedAttributes;
    return this;
  }

  public RfidSignerInfoEx addSignedAttributesItem(RfidAttributeData signedAttributesItem) {
    if (this.signedAttributes == null) {
      this.signedAttributes = new ArrayList<>();
    }
    this.signedAttributes.add(signedAttributesItem);
    return this;
  }

  /**
   * List of the signed attributes
   *
   * @return signedAttributes
   */
  @javax.annotation.Nonnull
  public List<RfidAttributeData> getSignedAttributes() {
    return signedAttributes;
  }

  public void setSignedAttributes(
      @javax.annotation.Nonnull List<RfidAttributeData> signedAttributes) {
    this.signedAttributes = signedAttributes;
  }

  public RfidSignerInfoEx signatureAlgorithm(@javax.annotation.Nonnull String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

  /**
   * Digital signature algorithm identifier (OID)
   *
   * @return signatureAlgorithm
   */
  @javax.annotation.Nonnull
  public String getSignatureAlgorithm() {
    return signatureAlgorithm;
  }

  public void setSignatureAlgorithm(@javax.annotation.Nonnull String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }

  public RfidSignerInfoEx signature(@javax.annotation.Nonnull TrfFtBytes signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Get signature
   *
   * @return signature
   */
  @javax.annotation.Nonnull
  public TrfFtBytes getSignature() {
    return signature;
  }

  public void setSignature(@javax.annotation.Nonnull TrfFtBytes signature) {
    this.signature = signature;
  }

  public RfidSignerInfoEx paStatus(@javax.annotation.Nonnull RFIDErrorCodes paStatus) {
    this.paStatus = paStatus;
    return this;
  }

  /**
   * Get paStatus
   *
   * @return paStatus
   */
  @javax.annotation.Nonnull
  public RFIDErrorCodes getPaStatus() {
    return paStatus;
  }

  public void setPaStatus(@javax.annotation.Nonnull RFIDErrorCodes paStatus) {
    this.paStatus = paStatus;
  }

  public RfidSignerInfoEx certificateChain(
      @javax.annotation.Nonnull List<RfidCertificateEx> certificateChain) {
    this.certificateChain = certificateChain;
    return this;
  }

  public RfidSignerInfoEx addCertificateChainItem(RfidCertificateEx certificateChainItem) {
    if (this.certificateChain == null) {
      this.certificateChain = new ArrayList<>();
    }
    this.certificateChain.add(certificateChainItem);
    return this;
  }

  /**
   * Certificate chain, used for the digital signature verification.
   *
   * @return certificateChain
   */
  @javax.annotation.Nonnull
  public List<RfidCertificateEx> getCertificateChain() {
    return certificateChain;
  }

  public void setCertificateChain(
      @javax.annotation.Nonnull List<RfidCertificateEx> certificateChain) {
    this.certificateChain = certificateChain;
  }

  public RfidSignerInfoEx dataToHash(@javax.annotation.Nonnull String dataToHash) {
    this.dataToHash = dataToHash;
    return this;
  }

  /**
   * Binary data array used to calculate the hash value for digital signature verification. Base64
   * encoded.
   *
   * @return dataToHash
   */
  @javax.annotation.Nonnull
  public String getDataToHash() {
    return dataToHash;
  }

  public void setDataToHash(@javax.annotation.Nonnull String dataToHash) {
    this.dataToHash = dataToHash;
  }

  public RfidSignerInfoEx notifications(
      @javax.annotation.Nonnull List<ParsingNotificationCodes> notifications) {
    this.notifications = notifications;
    return this;
  }

  public RfidSignerInfoEx addNotificationsItem(ParsingNotificationCodes notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * Get notifications
   *
   * @return notifications
   */
  @javax.annotation.Nonnull
  public List<ParsingNotificationCodes> getNotifications() {
    return notifications;
  }

  public void setNotifications(
      @javax.annotation.Nonnull List<ParsingNotificationCodes> notifications) {
    this.notifications = notifications;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RfidSignerInfoEx rfidSignerInfoEx = (RfidSignerInfoEx) o;
    return Objects.equals(this.version, rfidSignerInfoEx.version)
        && Objects.equals(this.issuer, rfidSignerInfoEx.issuer)
        && Objects.equals(this.serialNumber, rfidSignerInfoEx.serialNumber)
        && Objects.equals(this.subjectKeyIdentifier, rfidSignerInfoEx.subjectKeyIdentifier)
        && Objects.equals(this.digestAlgorithm, rfidSignerInfoEx.digestAlgorithm)
        && Objects.equals(this.signedAttributes, rfidSignerInfoEx.signedAttributes)
        && Objects.equals(this.signatureAlgorithm, rfidSignerInfoEx.signatureAlgorithm)
        && Objects.equals(this.signature, rfidSignerInfoEx.signature)
        && Objects.equals(this.paStatus, rfidSignerInfoEx.paStatus)
        && Objects.equals(this.certificateChain, rfidSignerInfoEx.certificateChain)
        && Objects.equals(this.dataToHash, rfidSignerInfoEx.dataToHash)
        && Objects.equals(this.notifications, rfidSignerInfoEx.notifications);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        version,
        issuer,
        serialNumber,
        subjectKeyIdentifier,
        digestAlgorithm,
        signedAttributes,
        signatureAlgorithm,
        signature,
        paStatus,
        certificateChain,
        dataToHash,
        notifications);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RfidSignerInfoEx {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    subjectKeyIdentifier: ")
        .append(toIndentedString(subjectKeyIdentifier))
        .append("\n");
    sb.append("    digestAlgorithm: ").append(toIndentedString(digestAlgorithm)).append("\n");
    sb.append("    signedAttributes: ").append(toIndentedString(signedAttributes)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    paStatus: ").append(toIndentedString(paStatus)).append("\n");
    sb.append("    certificateChain: ").append(toIndentedString(certificateChain)).append("\n");
    sb.append("    dataToHash: ").append(toIndentedString(dataToHash)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Version");
    openapiFields.add("Issuer");
    openapiFields.add("SerialNumber");
    openapiFields.add("SubjectKeyIdentifier");
    openapiFields.add("DigestAlgorithm");
    openapiFields.add("SignedAttributes");
    openapiFields.add("SignatureAlgorithm");
    openapiFields.add("Signature");
    openapiFields.add("PA_Status");
    openapiFields.add("CertificateChain");
    openapiFields.add("DataToHash");
    openapiFields.add("Notifications");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Version");
    openapiRequiredFields.add("Issuer");
    openapiRequiredFields.add("SerialNumber");
    openapiRequiredFields.add("SubjectKeyIdentifier");
    openapiRequiredFields.add("DigestAlgorithm");
    openapiRequiredFields.add("SignedAttributes");
    openapiRequiredFields.add("SignatureAlgorithm");
    openapiRequiredFields.add("Signature");
    openapiRequiredFields.add("PA_Status");
    openapiRequiredFields.add("CertificateChain");
    openapiRequiredFields.add("DataToHash");
    openapiRequiredFields.add("Notifications");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RfidSignerInfoEx
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!RfidSignerInfoEx.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in RfidSignerInfoEx is not found in the empty JSON string",
                RfidSignerInfoEx.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : RfidSignerInfoEx.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `Issuer`
    RfidDistinguishedName.validateJsonElement(jsonObj.get("Issuer"));
    // validate the required field `SerialNumber`
    TrfFtBytes.validateJsonElement(jsonObj.get("SerialNumber"));
    // validate the required field `SubjectKeyIdentifier`
    TrfFtBytes.validateJsonElement(jsonObj.get("SubjectKeyIdentifier"));
    if (!jsonObj.get("DigestAlgorithm").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `DigestAlgorithm` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("DigestAlgorithm").toString()));
    }
    // ensure the json data is an array
    if (!jsonObj.get("SignedAttributes").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `SignedAttributes` to be an array in the JSON string but got `%s`",
              jsonObj.get("SignedAttributes").toString()));
    }

    JsonArray jsonArraysignedAttributes = jsonObj.getAsJsonArray("SignedAttributes");
    // validate the required field `SignedAttributes` (array)
    for (int i = 0; i < jsonArraysignedAttributes.size(); i++) {
      RfidAttributeData.validateJsonElement(jsonArraysignedAttributes.get(i));
    }
    ;
    if (!jsonObj.get("SignatureAlgorithm").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `SignatureAlgorithm` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("SignatureAlgorithm").toString()));
    }
    // validate the required field `Signature`
    TrfFtBytes.validateJsonElement(jsonObj.get("Signature"));
    // validate the required field `PA_Status`
    RFIDErrorCodes.validateJsonElement(jsonObj.get("PA_Status"));
    // ensure the json data is an array
    if (!jsonObj.get("CertificateChain").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `CertificateChain` to be an array in the JSON string but got `%s`",
              jsonObj.get("CertificateChain").toString()));
    }

    JsonArray jsonArraycertificateChain = jsonObj.getAsJsonArray("CertificateChain");
    // validate the required field `CertificateChain` (array)
    for (int i = 0; i < jsonArraycertificateChain.size(); i++) {
      RfidCertificateEx.validateJsonElement(jsonArraycertificateChain.get(i));
    }
    ;
    if (!jsonObj.get("DataToHash").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `DataToHash` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("DataToHash").toString()));
    }
    // ensure the required json array is present
    if (jsonObj.get("Notifications") == null) {
      throw new IllegalArgumentException(
          "Expected the field `linkedContent` to be an array in the JSON string but got `null`");
    } else if (!jsonObj.get("Notifications").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Notifications` to be an array in the JSON string but got `%s`",
              jsonObj.get("Notifications").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!RfidSignerInfoEx.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'RfidSignerInfoEx' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<RfidSignerInfoEx> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(RfidSignerInfoEx.class));

      return (TypeAdapter<T>)
          new TypeAdapter<RfidSignerInfoEx>() {
            @Override
            public void write(JsonWriter out, RfidSignerInfoEx value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public RfidSignerInfoEx read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of RfidSignerInfoEx given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RfidSignerInfoEx
   * @throws IOException if the JSON string is invalid with respect to RfidSignerInfoEx
   */
  public static RfidSignerInfoEx fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RfidSignerInfoEx.class);
  }

  /**
   * Convert an instance of RfidSignerInfoEx to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
