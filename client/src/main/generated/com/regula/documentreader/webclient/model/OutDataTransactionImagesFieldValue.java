/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Objects;

/** OutDataTransactionImagesFieldValue */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.13.0")
public class OutDataTransactionImagesFieldValue {
  public static final String SERIALIZED_NAME_FIELD_TYPE = "fieldType";

  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  @javax.annotation.Nullable
  private GraphicFieldType fieldType;

  public static final String SERIALIZED_NAME_LIGHT = "light";

  @SerializedName(SERIALIZED_NAME_LIGHT)
  @javax.annotation.Nullable
  private Light light;

  public static final String SERIALIZED_NAME_LIST_IDX = "listIdx";

  @SerializedName(SERIALIZED_NAME_LIST_IDX)
  @javax.annotation.Nullable
  private Integer listIdx;

  public static final String SERIALIZED_NAME_PAGE_IDX = "pageIdx";

  @SerializedName(SERIALIZED_NAME_PAGE_IDX)
  @javax.annotation.Nullable
  private Integer pageIdx;

  public static final String SERIALIZED_NAME_URL = "url";

  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nullable
  private String url;

  public OutDataTransactionImagesFieldValue() {}

  public OutDataTransactionImagesFieldValue fieldType(
      @javax.annotation.Nullable GraphicFieldType fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Get fieldType
   *
   * @return fieldType
   */
  @javax.annotation.Nullable
  public GraphicFieldType getFieldType() {
    return fieldType;
  }

  public void setFieldType(@javax.annotation.Nullable GraphicFieldType fieldType) {
    this.fieldType = fieldType;
  }

  public OutDataTransactionImagesFieldValue light(@javax.annotation.Nullable Light light) {
    this.light = light;
    return this;
  }

  /**
   * Get light
   *
   * @return light
   */
  @javax.annotation.Nullable
  public Light getLight() {
    return light;
  }

  public void setLight(@javax.annotation.Nullable Light light) {
    this.light = light;
  }

  public OutDataTransactionImagesFieldValue listIdx(@javax.annotation.Nullable Integer listIdx) {
    this.listIdx = listIdx;
    return this;
  }

  /**
   * Get listIdx
   *
   * @return listIdx
   */
  @javax.annotation.Nullable
  public Integer getListIdx() {
    return listIdx;
  }

  public void setListIdx(@javax.annotation.Nullable Integer listIdx) {
    this.listIdx = listIdx;
  }

  public OutDataTransactionImagesFieldValue pageIdx(@javax.annotation.Nullable Integer pageIdx) {
    this.pageIdx = pageIdx;
    return this;
  }

  /**
   * Page index of the image from input list
   *
   * @return pageIdx
   */
  @javax.annotation.Nullable
  public Integer getPageIdx() {
    return pageIdx;
  }

  public void setPageIdx(@javax.annotation.Nullable Integer pageIdx) {
    this.pageIdx = pageIdx;
  }

  public OutDataTransactionImagesFieldValue url(@javax.annotation.Nullable String url) {
    this.url = url;
    return this;
  }

  /**
   * Image url
   *
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nullable String url) {
    this.url = url;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutDataTransactionImagesFieldValue outDataTransactionImagesFieldValue =
        (OutDataTransactionImagesFieldValue) o;
    return Objects.equals(this.fieldType, outDataTransactionImagesFieldValue.fieldType)
        && Objects.equals(this.light, outDataTransactionImagesFieldValue.light)
        && Objects.equals(this.listIdx, outDataTransactionImagesFieldValue.listIdx)
        && Objects.equals(this.pageIdx, outDataTransactionImagesFieldValue.pageIdx)
        && Objects.equals(this.url, outDataTransactionImagesFieldValue.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldType, light, listIdx, pageIdx, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutDataTransactionImagesFieldValue {\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    light: ").append(toIndentedString(light)).append("\n");
    sb.append("    listIdx: ").append(toIndentedString(listIdx)).append("\n");
    sb.append("    pageIdx: ").append(toIndentedString(pageIdx)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fieldType");
    openapiFields.add("light");
    openapiFields.add("listIdx");
    openapiFields.add("pageIdx");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to
   *     OutDataTransactionImagesFieldValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!OutDataTransactionImagesFieldValue.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in OutDataTransactionImagesFieldValue is not found in the empty JSON string",
                OutDataTransactionImagesFieldValue.openapiRequiredFields.toString()));
      }
    }

    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the optional field `fieldType`
    if (jsonObj.get("fieldType") != null && !jsonObj.get("fieldType").isJsonNull()) {
      GraphicFieldType.validateJsonElement(jsonObj.get("fieldType"));
    }
    // validate the optional field `light`
    if (jsonObj.get("light") != null && !jsonObj.get("light").isJsonNull()) {
      Light.validateJsonElement(jsonObj.get("light"));
    }
    if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull())
        && !jsonObj.get("url").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `url` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("url").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!OutDataTransactionImagesFieldValue.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'OutDataTransactionImagesFieldValue' and its
                     // subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<OutDataTransactionImagesFieldValue> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(OutDataTransactionImagesFieldValue.class));

      return (TypeAdapter<T>)
          new TypeAdapter<OutDataTransactionImagesFieldValue>() {
            @Override
            public void write(JsonWriter out, OutDataTransactionImagesFieldValue value)
                throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public OutDataTransactionImagesFieldValue read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of OutDataTransactionImagesFieldValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutDataTransactionImagesFieldValue
   * @throws IOException if the JSON string is invalid with respect to
   *     OutDataTransactionImagesFieldValue
   */
  public static OutDataTransactionImagesFieldValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutDataTransactionImagesFieldValue.class);
  }

  /**
   * Convert an instance of OutDataTransactionImagesFieldValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
