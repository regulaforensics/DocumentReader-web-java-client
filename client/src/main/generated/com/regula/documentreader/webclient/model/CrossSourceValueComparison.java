/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** CrossSourceValueComparison */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.11.0")
public class CrossSourceValueComparison {
  public static final String SERIALIZED_NAME_SOURCE_LEFT = "sourceLeft";

  @SerializedName(SERIALIZED_NAME_SOURCE_LEFT)
  @javax.annotation.Nonnull
  private Source sourceLeft;

  public static final String SERIALIZED_NAME_SOURCE_RIGHT = "sourceRight";

  @SerializedName(SERIALIZED_NAME_SOURCE_RIGHT)
  @javax.annotation.Nonnull
  private Source sourceRight;

  public static final String SERIALIZED_NAME_STATUS = "status";

  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private CheckResult status;

  public CrossSourceValueComparison() {}

  public CrossSourceValueComparison sourceLeft(@javax.annotation.Nonnull Source sourceLeft) {
    this.sourceLeft = sourceLeft;
    return this;
  }

  /**
   * Get sourceLeft
   *
   * @return sourceLeft
   */
  @javax.annotation.Nonnull
  public Source getSourceLeft() {
    return sourceLeft;
  }

  public void setSourceLeft(@javax.annotation.Nonnull Source sourceLeft) {
    this.sourceLeft = sourceLeft;
  }

  public CrossSourceValueComparison sourceRight(@javax.annotation.Nonnull Source sourceRight) {
    this.sourceRight = sourceRight;
    return this;
  }

  /**
   * Get sourceRight
   *
   * @return sourceRight
   */
  @javax.annotation.Nonnull
  public Source getSourceRight() {
    return sourceRight;
  }

  public void setSourceRight(@javax.annotation.Nonnull Source sourceRight) {
    this.sourceRight = sourceRight;
  }

  public CrossSourceValueComparison status(@javax.annotation.Nonnull CheckResult status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   *
   * @return status
   */
  @javax.annotation.Nonnull
  public CheckResult getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull CheckResult status) {
    this.status = status;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrossSourceValueComparison crossSourceValueComparison = (CrossSourceValueComparison) o;
    return Objects.equals(this.sourceLeft, crossSourceValueComparison.sourceLeft)
        && Objects.equals(this.sourceRight, crossSourceValueComparison.sourceRight)
        && Objects.equals(this.status, crossSourceValueComparison.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceLeft, sourceRight, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrossSourceValueComparison {\n");
    sb.append("    sourceLeft: ").append(toIndentedString(sourceLeft)).append("\n");
    sb.append("    sourceRight: ").append(toIndentedString(sourceRight)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceLeft");
    openapiFields.add("sourceRight");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceLeft");
    openapiRequiredFields.add("sourceRight");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrossSourceValueComparison
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!CrossSourceValueComparison.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in CrossSourceValueComparison is not found in the empty JSON string",
                CrossSourceValueComparison.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!CrossSourceValueComparison.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `CrossSourceValueComparison` properties. JSON: %s",
                entry.getKey(), jsonElement.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : CrossSourceValueComparison.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `sourceLeft`
    Source.validateJsonElement(jsonObj.get("sourceLeft"));
    // validate the required field `sourceRight`
    Source.validateJsonElement(jsonObj.get("sourceRight"));
    // validate the required field `status`
    CheckResult.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!CrossSourceValueComparison.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'CrossSourceValueComparison' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<CrossSourceValueComparison> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(CrossSourceValueComparison.class));

      return (TypeAdapter<T>)
          new TypeAdapter<CrossSourceValueComparison>() {
            @Override
            public void write(JsonWriter out, CrossSourceValueComparison value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public CrossSourceValueComparison read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of CrossSourceValueComparison given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrossSourceValueComparison
   * @throws IOException if the JSON string is invalid with respect to CrossSourceValueComparison
   */
  public static CrossSourceValueComparison fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrossSourceValueComparison.class);
  }

  /**
   * Convert an instance of CrossSourceValueComparison to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
