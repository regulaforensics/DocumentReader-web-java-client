/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Objects;

/** Details on performed RFID checks */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.13.0")
public class DetailsRFID {
  public static final String SERIALIZED_NAME_OVERALL_STATUS = "overallStatus";

  @SerializedName(SERIALIZED_NAME_OVERALL_STATUS)
  @javax.annotation.Nonnull
  private CheckResult overallStatus;

  public static final String SERIALIZED_NAME_A_A = "AA";

  @SerializedName(SERIALIZED_NAME_A_A)
  @javax.annotation.Nonnull
  private CheckResult AA;

  public static final String SERIALIZED_NAME_B_A_C = "BAC";

  @SerializedName(SERIALIZED_NAME_B_A_C)
  @javax.annotation.Nonnull
  private CheckResult BAC;

  public static final String SERIALIZED_NAME_C_A = "CA";

  @SerializedName(SERIALIZED_NAME_C_A)
  @javax.annotation.Nonnull
  private CheckResult CA;

  public static final String SERIALIZED_NAME_P_A = "PA";

  @SerializedName(SERIALIZED_NAME_P_A)
  @javax.annotation.Nonnull
  private CheckResult PA;

  public static final String SERIALIZED_NAME_P_A_C_E = "PACE";

  @SerializedName(SERIALIZED_NAME_P_A_C_E)
  @javax.annotation.Nonnull
  private CheckResult PACE;

  public static final String SERIALIZED_NAME_T_A = "TA";

  @SerializedName(SERIALIZED_NAME_T_A)
  @javax.annotation.Nonnull
  private CheckResult TA;

  public DetailsRFID() {}

  public DetailsRFID overallStatus(@javax.annotation.Nonnull CheckResult overallStatus) {
    this.overallStatus = overallStatus;
    return this;
  }

  /**
   * Get overallStatus
   *
   * @return overallStatus
   */
  @javax.annotation.Nonnull
  public CheckResult getOverallStatus() {
    return overallStatus;
  }

  public void setOverallStatus(@javax.annotation.Nonnull CheckResult overallStatus) {
    this.overallStatus = overallStatus;
  }

  public DetailsRFID AA(@javax.annotation.Nonnull CheckResult AA) {
    this.AA = AA;
    return this;
  }

  /**
   * Get AA
   *
   * @return AA
   */
  @javax.annotation.Nonnull
  public CheckResult getAA() {
    return AA;
  }

  public void setAA(@javax.annotation.Nonnull CheckResult AA) {
    this.AA = AA;
  }

  public DetailsRFID BAC(@javax.annotation.Nonnull CheckResult BAC) {
    this.BAC = BAC;
    return this;
  }

  /**
   * Get BAC
   *
   * @return BAC
   */
  @javax.annotation.Nonnull
  public CheckResult getBAC() {
    return BAC;
  }

  public void setBAC(@javax.annotation.Nonnull CheckResult BAC) {
    this.BAC = BAC;
  }

  public DetailsRFID CA(@javax.annotation.Nonnull CheckResult CA) {
    this.CA = CA;
    return this;
  }

  /**
   * Get CA
   *
   * @return CA
   */
  @javax.annotation.Nonnull
  public CheckResult getCA() {
    return CA;
  }

  public void setCA(@javax.annotation.Nonnull CheckResult CA) {
    this.CA = CA;
  }

  public DetailsRFID PA(@javax.annotation.Nonnull CheckResult PA) {
    this.PA = PA;
    return this;
  }

  /**
   * Get PA
   *
   * @return PA
   */
  @javax.annotation.Nonnull
  public CheckResult getPA() {
    return PA;
  }

  public void setPA(@javax.annotation.Nonnull CheckResult PA) {
    this.PA = PA;
  }

  public DetailsRFID PACE(@javax.annotation.Nonnull CheckResult PACE) {
    this.PACE = PACE;
    return this;
  }

  /**
   * Get PACE
   *
   * @return PACE
   */
  @javax.annotation.Nonnull
  public CheckResult getPACE() {
    return PACE;
  }

  public void setPACE(@javax.annotation.Nonnull CheckResult PACE) {
    this.PACE = PACE;
  }

  public DetailsRFID TA(@javax.annotation.Nonnull CheckResult TA) {
    this.TA = TA;
    return this;
  }

  /**
   * Get TA
   *
   * @return TA
   */
  @javax.annotation.Nonnull
  public CheckResult getTA() {
    return TA;
  }

  public void setTA(@javax.annotation.Nonnull CheckResult TA) {
    this.TA = TA;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailsRFID detailsRFID = (DetailsRFID) o;
    return Objects.equals(this.overallStatus, detailsRFID.overallStatus)
        && Objects.equals(this.AA, detailsRFID.AA)
        && Objects.equals(this.BAC, detailsRFID.BAC)
        && Objects.equals(this.CA, detailsRFID.CA)
        && Objects.equals(this.PA, detailsRFID.PA)
        && Objects.equals(this.PACE, detailsRFID.PACE)
        && Objects.equals(this.TA, detailsRFID.TA);
  }

  @Override
  public int hashCode() {
    return Objects.hash(overallStatus, AA, BAC, CA, PA, PACE, TA);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailsRFID {\n");
    sb.append("    overallStatus: ").append(toIndentedString(overallStatus)).append("\n");
    sb.append("    AA: ").append(toIndentedString(AA)).append("\n");
    sb.append("    BAC: ").append(toIndentedString(BAC)).append("\n");
    sb.append("    CA: ").append(toIndentedString(CA)).append("\n");
    sb.append("    PA: ").append(toIndentedString(PA)).append("\n");
    sb.append("    PACE: ").append(toIndentedString(PACE)).append("\n");
    sb.append("    TA: ").append(toIndentedString(TA)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("overallStatus");
    openapiFields.add("AA");
    openapiFields.add("BAC");
    openapiFields.add("CA");
    openapiFields.add("PA");
    openapiFields.add("PACE");
    openapiFields.add("TA");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("overallStatus");
    openapiRequiredFields.add("AA");
    openapiRequiredFields.add("BAC");
    openapiRequiredFields.add("CA");
    openapiRequiredFields.add("PA");
    openapiRequiredFields.add("PACE");
    openapiRequiredFields.add("TA");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetailsRFID
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!DetailsRFID.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in DetailsRFID is not found in the empty JSON string",
                DetailsRFID.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : DetailsRFID.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `overallStatus`
    CheckResult.validateJsonElement(jsonObj.get("overallStatus"));
    // validate the required field `AA`
    CheckResult.validateJsonElement(jsonObj.get("AA"));
    // validate the required field `BAC`
    CheckResult.validateJsonElement(jsonObj.get("BAC"));
    // validate the required field `CA`
    CheckResult.validateJsonElement(jsonObj.get("CA"));
    // validate the required field `PA`
    CheckResult.validateJsonElement(jsonObj.get("PA"));
    // validate the required field `PACE`
    CheckResult.validateJsonElement(jsonObj.get("PACE"));
    // validate the required field `TA`
    CheckResult.validateJsonElement(jsonObj.get("TA"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!DetailsRFID.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'DetailsRFID' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<DetailsRFID> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(DetailsRFID.class));

      return (TypeAdapter<T>)
          new TypeAdapter<DetailsRFID>() {
            @Override
            public void write(JsonWriter out, DetailsRFID value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public DetailsRFID read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of DetailsRFID given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetailsRFID
   * @throws IOException if the JSON string is invalid with respect to DetailsRFID
   */
  public static DetailsRFID fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetailsRFID.class);
  }

  /**
   * Convert an instance of DetailsRFID to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
