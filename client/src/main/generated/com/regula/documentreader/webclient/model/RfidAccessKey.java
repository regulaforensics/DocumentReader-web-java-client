/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Objects;

/**
 * Structure is used to describe the contents of secure data access key within the context of the
 * communication session with electronic document
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class RfidAccessKey {
  public static final String SERIALIZED_NAME_ACCESS_KEY = "AccessKey";

  @SerializedName(SERIALIZED_NAME_ACCESS_KEY)
  @javax.annotation.Nonnull
  private String accessKey;

  public static final String SERIALIZED_NAME_KEY_TYPE = "KeyType";

  @SerializedName(SERIALIZED_NAME_KEY_TYPE)
  @javax.annotation.Nonnull
  private RfidPasswordType keyType;

  public static final String SERIALIZED_NAME_ACCESS_TYPE = "AccessType";

  @SerializedName(SERIALIZED_NAME_ACCESS_TYPE)
  @javax.annotation.Nonnull
  private RfidAccessControlProcedureType accessType;

  public static final String SERIALIZED_NAME_CHECK_FULL_KEY_MATCHING = "CheckFullKeyMatching";

  @SerializedName(SERIALIZED_NAME_CHECK_FULL_KEY_MATCHING)
  @javax.annotation.Nonnull
  private Boolean checkFullKeyMatching;

  public RfidAccessKey() {}

  public RfidAccessKey accessKey(@javax.annotation.Nonnull String accessKey) {
    this.accessKey = accessKey;
    return this;
  }

  /**
   * Key contents
   *
   * @return accessKey
   */
  @javax.annotation.Nonnull
  public String getAccessKey() {
    return accessKey;
  }

  public void setAccessKey(@javax.annotation.Nonnull String accessKey) {
    this.accessKey = accessKey;
  }

  public RfidAccessKey keyType(@javax.annotation.Nonnull RfidPasswordType keyType) {
    this.keyType = keyType;
    return this;
  }

  /**
   * Get keyType
   *
   * @return keyType
   */
  @javax.annotation.Nonnull
  public RfidPasswordType getKeyType() {
    return keyType;
  }

  public void setKeyType(@javax.annotation.Nonnull RfidPasswordType keyType) {
    this.keyType = keyType;
  }

  public RfidAccessKey accessType(
      @javax.annotation.Nonnull RfidAccessControlProcedureType accessType) {
    this.accessType = accessType;
    return this;
  }

  /**
   * Get accessType
   *
   * @return accessType
   */
  @javax.annotation.Nonnull
  public RfidAccessControlProcedureType getAccessType() {
    return accessType;
  }

  public void setAccessType(@javax.annotation.Nonnull RfidAccessControlProcedureType accessType) {
    this.accessType = accessType;
  }

  public RfidAccessKey checkFullKeyMatching(
      @javax.annotation.Nonnull Boolean checkFullKeyMatching) {
    this.checkFullKeyMatching = checkFullKeyMatching;
    return this;
  }

  /**
   * Logical sign of the need for a full comparison of AccessKey contents with the contents of DG1
   * (MRZ) data group
   *
   * @return checkFullKeyMatching
   */
  @javax.annotation.Nonnull
  public Boolean getCheckFullKeyMatching() {
    return checkFullKeyMatching;
  }

  public void setCheckFullKeyMatching(@javax.annotation.Nonnull Boolean checkFullKeyMatching) {
    this.checkFullKeyMatching = checkFullKeyMatching;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RfidAccessKey rfidAccessKey = (RfidAccessKey) o;
    return Objects.equals(this.accessKey, rfidAccessKey.accessKey)
        && Objects.equals(this.keyType, rfidAccessKey.keyType)
        && Objects.equals(this.accessType, rfidAccessKey.accessType)
        && Objects.equals(this.checkFullKeyMatching, rfidAccessKey.checkFullKeyMatching);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessKey, keyType, accessType, checkFullKeyMatching);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RfidAccessKey {\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    keyType: ").append(toIndentedString(keyType)).append("\n");
    sb.append("    accessType: ").append(toIndentedString(accessType)).append("\n");
    sb.append("    checkFullKeyMatching: ")
        .append(toIndentedString(checkFullKeyMatching))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccessKey");
    openapiFields.add("KeyType");
    openapiFields.add("AccessType");
    openapiFields.add("CheckFullKeyMatching");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AccessKey");
    openapiRequiredFields.add("KeyType");
    openapiRequiredFields.add("AccessType");
    openapiRequiredFields.add("CheckFullKeyMatching");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RfidAccessKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!RfidAccessKey.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in RfidAccessKey is not found in the empty JSON string",
                RfidAccessKey.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : RfidAccessKey.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("AccessKey").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `AccessKey` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("AccessKey").toString()));
    }
    // validate the required field `KeyType`
    RfidPasswordType.validateJsonElement(jsonObj.get("KeyType"));
    // validate the required field `AccessType`
    RfidAccessControlProcedureType.validateJsonElement(jsonObj.get("AccessType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!RfidAccessKey.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'RfidAccessKey' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<RfidAccessKey> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(RfidAccessKey.class));

      return (TypeAdapter<T>)
          new TypeAdapter<RfidAccessKey>() {
            @Override
            public void write(JsonWriter out, RfidAccessKey value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public RfidAccessKey read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of RfidAccessKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RfidAccessKey
   * @throws IOException if the JSON string is invalid with respect to RfidAccessKey
   */
  public static RfidAccessKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RfidAccessKey.class);
  }

  /**
   * Convert an instance of RfidAccessKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
