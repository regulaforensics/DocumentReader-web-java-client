/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/** FaceItem */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class FaceItem {
  public static final String SERIALIZED_NAME_COINCIDENCE_TO_PHOTO_AREA = "CoincidenceToPhotoArea";

  @SerializedName(SERIALIZED_NAME_COINCIDENCE_TO_PHOTO_AREA)
  @javax.annotation.Nonnull
  private Integer coincidenceToPhotoArea;

  public static final String SERIALIZED_NAME_FACE_RECT = "FaceRect";

  @SerializedName(SERIALIZED_NAME_FACE_RECT)
  @javax.annotation.Nonnull
  private RectangleCoordinates faceRect;

  public static final String SERIALIZED_NAME_FIELD_RECT = "FieldRect";

  @SerializedName(SERIALIZED_NAME_FIELD_RECT)
  @javax.annotation.Nonnull
  private RectangleCoordinates fieldRect;

  public static final String SERIALIZED_NAME_GRAPH_FIELD_NUMBER = "GraphFieldNumber";

  @SerializedName(SERIALIZED_NAME_GRAPH_FIELD_NUMBER)
  @javax.annotation.Nonnull
  private Integer graphFieldNumber;

  public static final String SERIALIZED_NAME_LANDMARKS = "Landmarks";

  @SerializedName(SERIALIZED_NAME_LANDMARKS)
  @javax.annotation.Nonnull
  private List<Point> landmarks;

  public static final String SERIALIZED_NAME_LIGHT_TYPE = "LightType";

  @SerializedName(SERIALIZED_NAME_LIGHT_TYPE)
  @javax.annotation.Nonnull
  private Light lightType;

  public static final String SERIALIZED_NAME_ORIENTATION = "Orientation";

  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  @javax.annotation.Nonnull
  private Integer orientation;

  public static final String SERIALIZED_NAME_PROBABILITY = "Probability";

  @SerializedName(SERIALIZED_NAME_PROBABILITY)
  @javax.annotation.Nonnull
  private Integer probability;

  public FaceItem() {}

  public FaceItem coincidenceToPhotoArea(@javax.annotation.Nonnull Integer coincidenceToPhotoArea) {
    this.coincidenceToPhotoArea = coincidenceToPhotoArea;
    return this;
  }

  /**
   * Get coincidenceToPhotoArea
   *
   * @return coincidenceToPhotoArea
   */
  @javax.annotation.Nonnull
  public Integer getCoincidenceToPhotoArea() {
    return coincidenceToPhotoArea;
  }

  public void setCoincidenceToPhotoArea(@javax.annotation.Nonnull Integer coincidenceToPhotoArea) {
    this.coincidenceToPhotoArea = coincidenceToPhotoArea;
  }

  public FaceItem faceRect(@javax.annotation.Nonnull RectangleCoordinates faceRect) {
    this.faceRect = faceRect;
    return this;
  }

  /**
   * Get faceRect
   *
   * @return faceRect
   */
  @javax.annotation.Nonnull
  public RectangleCoordinates getFaceRect() {
    return faceRect;
  }

  public void setFaceRect(@javax.annotation.Nonnull RectangleCoordinates faceRect) {
    this.faceRect = faceRect;
  }

  public FaceItem fieldRect(@javax.annotation.Nonnull RectangleCoordinates fieldRect) {
    this.fieldRect = fieldRect;
    return this;
  }

  /**
   * Get fieldRect
   *
   * @return fieldRect
   */
  @javax.annotation.Nonnull
  public RectangleCoordinates getFieldRect() {
    return fieldRect;
  }

  public void setFieldRect(@javax.annotation.Nonnull RectangleCoordinates fieldRect) {
    this.fieldRect = fieldRect;
  }

  public FaceItem graphFieldNumber(@javax.annotation.Nonnull Integer graphFieldNumber) {
    this.graphFieldNumber = graphFieldNumber;
    return this;
  }

  /**
   * Get graphFieldNumber
   *
   * @return graphFieldNumber
   */
  @javax.annotation.Nonnull
  public Integer getGraphFieldNumber() {
    return graphFieldNumber;
  }

  public void setGraphFieldNumber(@javax.annotation.Nonnull Integer graphFieldNumber) {
    this.graphFieldNumber = graphFieldNumber;
  }

  public FaceItem landmarks(@javax.annotation.Nonnull List<Point> landmarks) {
    this.landmarks = landmarks;
    return this;
  }

  public FaceItem addLandmarksItem(Point landmarksItem) {
    if (this.landmarks == null) {
      this.landmarks = new ArrayList<>();
    }
    this.landmarks.add(landmarksItem);
    return this;
  }

  /**
   * Get landmarks
   *
   * @return landmarks
   */
  @javax.annotation.Nonnull
  public List<Point> getLandmarks() {
    return landmarks;
  }

  public void setLandmarks(@javax.annotation.Nonnull List<Point> landmarks) {
    this.landmarks = landmarks;
  }

  public FaceItem lightType(@javax.annotation.Nonnull Light lightType) {
    this.lightType = lightType;
    return this;
  }

  /**
   * Get lightType
   *
   * @return lightType
   */
  @javax.annotation.Nonnull
  public Light getLightType() {
    return lightType;
  }

  public void setLightType(@javax.annotation.Nonnull Light lightType) {
    this.lightType = lightType;
  }

  public FaceItem orientation(@javax.annotation.Nonnull Integer orientation) {
    this.orientation = orientation;
    return this;
  }

  /**
   * Get orientation
   *
   * @return orientation
   */
  @javax.annotation.Nonnull
  public Integer getOrientation() {
    return orientation;
  }

  public void setOrientation(@javax.annotation.Nonnull Integer orientation) {
    this.orientation = orientation;
  }

  public FaceItem probability(@javax.annotation.Nonnull Integer probability) {
    this.probability = probability;
    return this;
  }

  /**
   * Get probability
   *
   * @return probability
   */
  @javax.annotation.Nonnull
  public Integer getProbability() {
    return probability;
  }

  public void setProbability(@javax.annotation.Nonnull Integer probability) {
    this.probability = probability;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaceItem faceItem = (FaceItem) o;
    return Objects.equals(this.coincidenceToPhotoArea, faceItem.coincidenceToPhotoArea)
        && Objects.equals(this.faceRect, faceItem.faceRect)
        && Objects.equals(this.fieldRect, faceItem.fieldRect)
        && Objects.equals(this.graphFieldNumber, faceItem.graphFieldNumber)
        && Objects.equals(this.landmarks, faceItem.landmarks)
        && Objects.equals(this.lightType, faceItem.lightType)
        && Objects.equals(this.orientation, faceItem.orientation)
        && Objects.equals(this.probability, faceItem.probability);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        coincidenceToPhotoArea,
        faceRect,
        fieldRect,
        graphFieldNumber,
        landmarks,
        lightType,
        orientation,
        probability);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaceItem {\n");
    sb.append("    coincidenceToPhotoArea: ")
        .append(toIndentedString(coincidenceToPhotoArea))
        .append("\n");
    sb.append("    faceRect: ").append(toIndentedString(faceRect)).append("\n");
    sb.append("    fieldRect: ").append(toIndentedString(fieldRect)).append("\n");
    sb.append("    graphFieldNumber: ").append(toIndentedString(graphFieldNumber)).append("\n");
    sb.append("    landmarks: ").append(toIndentedString(landmarks)).append("\n");
    sb.append("    lightType: ").append(toIndentedString(lightType)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    probability: ").append(toIndentedString(probability)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CoincidenceToPhotoArea");
    openapiFields.add("FaceRect");
    openapiFields.add("FieldRect");
    openapiFields.add("GraphFieldNumber");
    openapiFields.add("Landmarks");
    openapiFields.add("LightType");
    openapiFields.add("Orientation");
    openapiFields.add("Probability");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CoincidenceToPhotoArea");
    openapiRequiredFields.add("FaceRect");
    openapiRequiredFields.add("FieldRect");
    openapiRequiredFields.add("GraphFieldNumber");
    openapiRequiredFields.add("Landmarks");
    openapiRequiredFields.add("LightType");
    openapiRequiredFields.add("Orientation");
    openapiRequiredFields.add("Probability");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FaceItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!FaceItem.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in FaceItem is not found in the empty JSON string",
                FaceItem.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : FaceItem.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `FaceRect`
    RectangleCoordinates.validateJsonElement(jsonObj.get("FaceRect"));
    // validate the required field `FieldRect`
    RectangleCoordinates.validateJsonElement(jsonObj.get("FieldRect"));
    // ensure the json data is an array
    if (!jsonObj.get("Landmarks").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Landmarks` to be an array in the JSON string but got `%s`",
              jsonObj.get("Landmarks").toString()));
    }

    JsonArray jsonArraylandmarks = jsonObj.getAsJsonArray("Landmarks");
    // validate the required field `Landmarks` (array)
    for (int i = 0; i < jsonArraylandmarks.size(); i++) {
      Point.validateJsonElement(jsonArraylandmarks.get(i));
    }
    ;
    // validate the required field `LightType`
    Light.validateJsonElement(jsonObj.get("LightType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!FaceItem.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'FaceItem' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<FaceItem> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(FaceItem.class));

      return (TypeAdapter<T>)
          new TypeAdapter<FaceItem>() {
            @Override
            public void write(JsonWriter out, FaceItem value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public FaceItem read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of FaceItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FaceItem
   * @throws IOException if the JSON string is invalid with respect to FaceItem
   */
  public static FaceItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FaceItem.class);
  }

  /**
   * Convert an instance of FaceItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
