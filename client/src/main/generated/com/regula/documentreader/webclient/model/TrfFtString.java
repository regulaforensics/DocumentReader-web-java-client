/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.annotations.SerializedName;
import java.util.Objects;

/**
 * Structure is used to store information about the numeric field (4 bytes) that is a part of one of
 * the informational data groups.
 */
public class TrfFtString {
  public static final String SERIALIZED_NAME_TYPE = "Type";

  @SerializedName(SERIALIZED_NAME_TYPE)
  private AnyOfGraphicFieldTypeTextFieldType type = null;

  public static final String SERIALIZED_NAME_STATUS = "Status";

  @SerializedName(SERIALIZED_NAME_STATUS)
  private AnyOfParsingNotificationCodesParsingErrorCodes status = null;

  public static final String SERIALIZED_NAME_FORMAT = "Format";

  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_DATA = "Data";

  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public TrfFtString withType(AnyOfGraphicFieldTypeTextFieldType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  public AnyOfGraphicFieldTypeTextFieldType getType() {
    return type;
  }

  public void setType(AnyOfGraphicFieldTypeTextFieldType type) {
    this.type = type;
  }

  public TrfFtString withStatus(AnyOfParsingNotificationCodesParsingErrorCodes status) {
    this.status = status;
    return this;
  }

  /**
   * Result of logical analysis of compliance of the contents of the field with the requirements of
   * the specification
   *
   * @return status
   */
  public AnyOfParsingNotificationCodesParsingErrorCodes getStatus() {
    return status;
  }

  public void setStatus(AnyOfParsingNotificationCodesParsingErrorCodes status) {
    this.status = status;
  }

  public TrfFtString withFormat(String format) {
    this.format = format;
    return this;
  }

  /**
   * Mask of format of text information (for example, «YYMMDD» for date of birth)
   *
   * @return format
   */
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }

  public TrfFtString withData(String data) {
    this.data = data;
    return this;
  }

  /**
   * Numeric value.
   *
   * @return data
   */
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrfFtString trfFtString = (TrfFtString) o;
    return Objects.equals(this.type, trfFtString.type)
        && Objects.equals(this.status, trfFtString.status)
        && Objects.equals(this.format, trfFtString.format)
        && Objects.equals(this.data, trfFtString.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, status, format, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrfFtString {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
