/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Objects;

/** GraphData */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class GraphData {
  public static final String SERIALIZED_NAME_FIELD_TYPE = "FieldType";

  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  @javax.annotation.Nonnull
  private Integer fieldType;

  public static final String SERIALIZED_NAME_FILE_IMAGE = "File_Image";

  @SerializedName(SERIALIZED_NAME_FILE_IMAGE)
  @javax.annotation.Nonnull
  private FileImage fileImage;

  public static final String SERIALIZED_NAME_GRAPHICS_TYPE = "GraphicsType";

  @SerializedName(SERIALIZED_NAME_GRAPHICS_TYPE)
  @javax.annotation.Nonnull
  private Integer graphicsType;

  public static final String SERIALIZED_NAME_ORIGIN_D_G = "OriginDG";

  @SerializedName(SERIALIZED_NAME_ORIGIN_D_G)
  @javax.annotation.Nonnull
  private Integer originDG;

  public static final String SERIALIZED_NAME_ORIGIN_D_G_TAG = "OriginDGTag";

  @SerializedName(SERIALIZED_NAME_ORIGIN_D_G_TAG)
  @javax.annotation.Nonnull
  private Integer originDGTag;

  public static final String SERIALIZED_NAME_ORIGIN_ENTRY_VIEW = "OriginEntryView";

  @SerializedName(SERIALIZED_NAME_ORIGIN_ENTRY_VIEW)
  @javax.annotation.Nonnull
  private Integer originEntryView;

  public static final String SERIALIZED_NAME_ORIGIN_TAG_ENTRY = "OriginTagEntry";

  @SerializedName(SERIALIZED_NAME_ORIGIN_TAG_ENTRY)
  @javax.annotation.Nonnull
  private Integer originTagEntry;

  public GraphData() {}

  public GraphData fieldType(@javax.annotation.Nonnull Integer fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Get fieldType
   *
   * @return fieldType
   */
  @javax.annotation.Nonnull
  public Integer getFieldType() {
    return fieldType;
  }

  public void setFieldType(@javax.annotation.Nonnull Integer fieldType) {
    this.fieldType = fieldType;
  }

  public GraphData fileImage(@javax.annotation.Nonnull FileImage fileImage) {
    this.fileImage = fileImage;
    return this;
  }

  /**
   * Get fileImage
   *
   * @return fileImage
   */
  @javax.annotation.Nonnull
  public FileImage getFileImage() {
    return fileImage;
  }

  public void setFileImage(@javax.annotation.Nonnull FileImage fileImage) {
    this.fileImage = fileImage;
  }

  public GraphData graphicsType(@javax.annotation.Nonnull Integer graphicsType) {
    this.graphicsType = graphicsType;
    return this;
  }

  /**
   * Get graphicsType
   *
   * @return graphicsType
   */
  @javax.annotation.Nonnull
  public Integer getGraphicsType() {
    return graphicsType;
  }

  public void setGraphicsType(@javax.annotation.Nonnull Integer graphicsType) {
    this.graphicsType = graphicsType;
  }

  public GraphData originDG(@javax.annotation.Nonnull Integer originDG) {
    this.originDG = originDG;
    return this;
  }

  /**
   * Get originDG
   *
   * @return originDG
   */
  @javax.annotation.Nonnull
  public Integer getOriginDG() {
    return originDG;
  }

  public void setOriginDG(@javax.annotation.Nonnull Integer originDG) {
    this.originDG = originDG;
  }

  public GraphData originDGTag(@javax.annotation.Nonnull Integer originDGTag) {
    this.originDGTag = originDGTag;
    return this;
  }

  /**
   * Get originDGTag
   *
   * @return originDGTag
   */
  @javax.annotation.Nonnull
  public Integer getOriginDGTag() {
    return originDGTag;
  }

  public void setOriginDGTag(@javax.annotation.Nonnull Integer originDGTag) {
    this.originDGTag = originDGTag;
  }

  public GraphData originEntryView(@javax.annotation.Nonnull Integer originEntryView) {
    this.originEntryView = originEntryView;
    return this;
  }

  /**
   * Get originEntryView
   *
   * @return originEntryView
   */
  @javax.annotation.Nonnull
  public Integer getOriginEntryView() {
    return originEntryView;
  }

  public void setOriginEntryView(@javax.annotation.Nonnull Integer originEntryView) {
    this.originEntryView = originEntryView;
  }

  public GraphData originTagEntry(@javax.annotation.Nonnull Integer originTagEntry) {
    this.originTagEntry = originTagEntry;
    return this;
  }

  /**
   * Get originTagEntry
   *
   * @return originTagEntry
   */
  @javax.annotation.Nonnull
  public Integer getOriginTagEntry() {
    return originTagEntry;
  }

  public void setOriginTagEntry(@javax.annotation.Nonnull Integer originTagEntry) {
    this.originTagEntry = originTagEntry;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GraphData graphData = (GraphData) o;
    return Objects.equals(this.fieldType, graphData.fieldType)
        && Objects.equals(this.fileImage, graphData.fileImage)
        && Objects.equals(this.graphicsType, graphData.graphicsType)
        && Objects.equals(this.originDG, graphData.originDG)
        && Objects.equals(this.originDGTag, graphData.originDGTag)
        && Objects.equals(this.originEntryView, graphData.originEntryView)
        && Objects.equals(this.originTagEntry, graphData.originTagEntry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        fieldType, fileImage, graphicsType, originDG, originDGTag, originEntryView, originTagEntry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GraphData {\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    fileImage: ").append(toIndentedString(fileImage)).append("\n");
    sb.append("    graphicsType: ").append(toIndentedString(graphicsType)).append("\n");
    sb.append("    originDG: ").append(toIndentedString(originDG)).append("\n");
    sb.append("    originDGTag: ").append(toIndentedString(originDGTag)).append("\n");
    sb.append("    originEntryView: ").append(toIndentedString(originEntryView)).append("\n");
    sb.append("    originTagEntry: ").append(toIndentedString(originTagEntry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FieldType");
    openapiFields.add("File_Image");
    openapiFields.add("GraphicsType");
    openapiFields.add("OriginDG");
    openapiFields.add("OriginDGTag");
    openapiFields.add("OriginEntryView");
    openapiFields.add("OriginTagEntry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FieldType");
    openapiRequiredFields.add("File_Image");
    openapiRequiredFields.add("GraphicsType");
    openapiRequiredFields.add("OriginDG");
    openapiRequiredFields.add("OriginDGTag");
    openapiRequiredFields.add("OriginEntryView");
    openapiRequiredFields.add("OriginTagEntry");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GraphData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!GraphData.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in GraphData is not found in the empty JSON string",
                GraphData.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : GraphData.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `File_Image`
    FileImage.validateJsonElement(jsonObj.get("File_Image"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!GraphData.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'GraphData' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<GraphData> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(GraphData.class));

      return (TypeAdapter<T>)
          new TypeAdapter<GraphData>() {
            @Override
            public void write(JsonWriter out, GraphData value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public GraphData read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of GraphData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GraphData
   * @throws IOException if the JSON string is invalid with respect to GraphData
   */
  public static GraphData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GraphData.class);
  }

  /**
   * Convert an instance of GraphData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
