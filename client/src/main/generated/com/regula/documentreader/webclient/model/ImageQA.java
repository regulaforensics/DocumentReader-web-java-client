/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** ImageQA */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class ImageQA {
  public static final String SERIALIZED_NAME_BRIGHTNESS_THRESHOLD = "brightnessThreshold";

  @SerializedName(SERIALIZED_NAME_BRIGHTNESS_THRESHOLD)
  @javax.annotation.Nullable
  private Double brightnessThreshold;

  public static final String SERIALIZED_NAME_DPI_THRESHOLD = "dpiThreshold";

  @SerializedName(SERIALIZED_NAME_DPI_THRESHOLD)
  @javax.annotation.Nullable
  private Integer dpiThreshold;

  public static final String SERIALIZED_NAME_ANGLE_THRESHOLD = "angleThreshold";

  @SerializedName(SERIALIZED_NAME_ANGLE_THRESHOLD)
  @javax.annotation.Nullable
  private Integer angleThreshold;

  public static final String SERIALIZED_NAME_FOCUS_CHECK = "focusCheck";

  @SerializedName(SERIALIZED_NAME_FOCUS_CHECK)
  @javax.annotation.Nullable
  private Boolean focusCheck;

  public static final String SERIALIZED_NAME_GLARES_CHECK = "glaresCheck";

  @SerializedName(SERIALIZED_NAME_GLARES_CHECK)
  @javax.annotation.Nullable
  private Boolean glaresCheck;

  public static final String SERIALIZED_NAME_COLORNESS_CHECK = "colornessCheck";

  @SerializedName(SERIALIZED_NAME_COLORNESS_CHECK)
  @javax.annotation.Nullable
  private Boolean colornessCheck;

  public static final String SERIALIZED_NAME_MOIRE_CHECK = "moireCheck";

  @SerializedName(SERIALIZED_NAME_MOIRE_CHECK)
  @javax.annotation.Nullable
  private Boolean moireCheck;

  public static final String SERIALIZED_NAME_DOCUMENT_POSITION_INDENT = "documentPositionIndent";

  @SerializedName(SERIALIZED_NAME_DOCUMENT_POSITION_INDENT)
  @javax.annotation.Nullable
  private Integer documentPositionIndent;

  public static final String SERIALIZED_NAME_EXPECTED_PASS = "expectedPass";

  @SerializedName(SERIALIZED_NAME_EXPECTED_PASS)
  @javax.annotation.Nullable
  private List<InputImageQualityChecks> expectedPass;

  public ImageQA() {}

  public ImageQA brightnessThreshold(@javax.annotation.Nullable Double brightnessThreshold) {
    this.brightnessThreshold = brightnessThreshold;
    return this;
  }

  /**
   * Set the threshold for an actual document brightness below which the check fails
   *
   * @return brightnessThreshold
   */
  @javax.annotation.Nullable
  public Double getBrightnessThreshold() {
    return brightnessThreshold;
  }

  public void setBrightnessThreshold(@javax.annotation.Nullable Double brightnessThreshold) {
    this.brightnessThreshold = brightnessThreshold;
  }

  public ImageQA dpiThreshold(@javax.annotation.Nullable Integer dpiThreshold) {
    this.dpiThreshold = dpiThreshold;
    return this;
  }

  /**
   * This parameter sets threshold for Image QA check of the presented document physical dpi. If
   * actual document dpi is below this threshold, check will fail.
   *
   * @return dpiThreshold
   */
  @javax.annotation.Nullable
  public Integer getDpiThreshold() {
    return dpiThreshold;
  }

  public void setDpiThreshold(@javax.annotation.Nullable Integer dpiThreshold) {
    this.dpiThreshold = dpiThreshold;
  }

  public ImageQA angleThreshold(@javax.annotation.Nullable Integer angleThreshold) {
    this.angleThreshold = angleThreshold;
    return this;
  }

  /**
   * This parameter sets threshold for Image QA check of the presented document perspective angle in
   * degrees. If actual document perspective angle is above this threshold, check will fail.
   *
   * @return angleThreshold
   */
  @javax.annotation.Nullable
  public Integer getAngleThreshold() {
    return angleThreshold;
  }

  public void setAngleThreshold(@javax.annotation.Nullable Integer angleThreshold) {
    this.angleThreshold = angleThreshold;
  }

  public ImageQA focusCheck(@javax.annotation.Nullable Boolean focusCheck) {
    this.focusCheck = focusCheck;
    return this;
  }

  /**
   * This option enables focus check while performing image quality validation.
   *
   * @return focusCheck
   */
  @javax.annotation.Nullable
  public Boolean getFocusCheck() {
    return focusCheck;
  }

  public void setFocusCheck(@javax.annotation.Nullable Boolean focusCheck) {
    this.focusCheck = focusCheck;
  }

  public ImageQA glaresCheck(@javax.annotation.Nullable Boolean glaresCheck) {
    this.glaresCheck = glaresCheck;
    return this;
  }

  /**
   * This option enables glares check while performing image quality validation.
   *
   * @return glaresCheck
   */
  @javax.annotation.Nullable
  public Boolean getGlaresCheck() {
    return glaresCheck;
  }

  public void setGlaresCheck(@javax.annotation.Nullable Boolean glaresCheck) {
    this.glaresCheck = glaresCheck;
  }

  public ImageQA colornessCheck(@javax.annotation.Nullable Boolean colornessCheck) {
    this.colornessCheck = colornessCheck;
    return this;
  }

  /**
   * This option enables colorness check while performing image quality validation.
   *
   * @return colornessCheck
   */
  @javax.annotation.Nullable
  public Boolean getColornessCheck() {
    return colornessCheck;
  }

  public void setColornessCheck(@javax.annotation.Nullable Boolean colornessCheck) {
    this.colornessCheck = colornessCheck;
  }

  public ImageQA moireCheck(@javax.annotation.Nullable Boolean moireCheck) {
    this.moireCheck = moireCheck;
    return this;
  }

  /**
   * This option enables screen capture (moire patterns) check while performing image quality
   * validation.
   *
   * @return moireCheck
   */
  @javax.annotation.Nullable
  public Boolean getMoireCheck() {
    return moireCheck;
  }

  public void setMoireCheck(@javax.annotation.Nullable Boolean moireCheck) {
    this.moireCheck = moireCheck;
  }

  public ImageQA documentPositionIndent(@javax.annotation.Nullable Integer documentPositionIndent) {
    this.documentPositionIndent = documentPositionIndent;
    return this;
  }

  /**
   * This parameter specifies the necessary margin. Default 0.
   *
   * @return documentPositionIndent
   */
  @javax.annotation.Nullable
  public Integer getDocumentPositionIndent() {
    return documentPositionIndent;
  }

  public void setDocumentPositionIndent(@javax.annotation.Nullable Integer documentPositionIndent) {
    this.documentPositionIndent = documentPositionIndent;
  }

  public ImageQA expectedPass(
      @javax.annotation.Nullable List<InputImageQualityChecks> expectedPass) {
    this.expectedPass = expectedPass;
    return this;
  }

  public ImageQA addExpectedPassItem(InputImageQualityChecks expectedPassItem) {
    if (this.expectedPass == null) {
      this.expectedPass = new ArrayList<>();
    }
    this.expectedPass.add(expectedPassItem);
    return this;
  }

  /**
   * This parameter controls the quality checks that the image should pass to be considered a valid
   * input during the scanning process.
   *
   * @return expectedPass
   */
  @javax.annotation.Nullable
  public List<InputImageQualityChecks> getExpectedPass() {
    return expectedPass;
  }

  public void setExpectedPass(
      @javax.annotation.Nullable List<InputImageQualityChecks> expectedPass) {
    this.expectedPass = expectedPass;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageQA imageQA = (ImageQA) o;
    return Objects.equals(this.brightnessThreshold, imageQA.brightnessThreshold)
        && Objects.equals(this.dpiThreshold, imageQA.dpiThreshold)
        && Objects.equals(this.angleThreshold, imageQA.angleThreshold)
        && Objects.equals(this.focusCheck, imageQA.focusCheck)
        && Objects.equals(this.glaresCheck, imageQA.glaresCheck)
        && Objects.equals(this.colornessCheck, imageQA.colornessCheck)
        && Objects.equals(this.moireCheck, imageQA.moireCheck)
        && Objects.equals(this.documentPositionIndent, imageQA.documentPositionIndent)
        && Objects.equals(this.expectedPass, imageQA.expectedPass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        brightnessThreshold,
        dpiThreshold,
        angleThreshold,
        focusCheck,
        glaresCheck,
        colornessCheck,
        moireCheck,
        documentPositionIndent,
        expectedPass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageQA {\n");
    sb.append("    brightnessThreshold: ")
        .append(toIndentedString(brightnessThreshold))
        .append("\n");
    sb.append("    dpiThreshold: ").append(toIndentedString(dpiThreshold)).append("\n");
    sb.append("    angleThreshold: ").append(toIndentedString(angleThreshold)).append("\n");
    sb.append("    focusCheck: ").append(toIndentedString(focusCheck)).append("\n");
    sb.append("    glaresCheck: ").append(toIndentedString(glaresCheck)).append("\n");
    sb.append("    colornessCheck: ").append(toIndentedString(colornessCheck)).append("\n");
    sb.append("    moireCheck: ").append(toIndentedString(moireCheck)).append("\n");
    sb.append("    documentPositionIndent: ")
        .append(toIndentedString(documentPositionIndent))
        .append("\n");
    sb.append("    expectedPass: ").append(toIndentedString(expectedPass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brightnessThreshold");
    openapiFields.add("dpiThreshold");
    openapiFields.add("angleThreshold");
    openapiFields.add("focusCheck");
    openapiFields.add("glaresCheck");
    openapiFields.add("colornessCheck");
    openapiFields.add("moireCheck");
    openapiFields.add("documentPositionIndent");
    openapiFields.add("expectedPass");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageQA
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!ImageQA.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in ImageQA is not found in the empty JSON string",
                ImageQA.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!ImageQA.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `ImageQA` properties. JSON: %s",
                entry.getKey(), jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // ensure the optional json data is an array if present
    if (jsonObj.get("expectedPass") != null
        && !jsonObj.get("expectedPass").isJsonNull()
        && !jsonObj.get("expectedPass").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `expectedPass` to be an array in the JSON string but got `%s`",
              jsonObj.get("expectedPass").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ImageQA.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ImageQA' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<ImageQA> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(ImageQA.class));

      return (TypeAdapter<T>)
          new TypeAdapter<ImageQA>() {
            @Override
            public void write(JsonWriter out, ImageQA value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public ImageQA read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageQA given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageQA
   * @throws IOException if the JSON string is invalid with respect to ImageQA
   */
  public static ImageQA fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageQA.class);
  }

  /**
   * Convert an instance of ImageQA to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
