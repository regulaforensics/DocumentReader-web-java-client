/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.api;

import com.google.gson.reflect.TypeToken;
import com.regula.documentreader.webclient.ApiCallback;
import com.regula.documentreader.webclient.ApiClient;
import com.regula.documentreader.webclient.ApiException;
import com.regula.documentreader.webclient.ApiResponse;
import com.regula.documentreader.webclient.Configuration;
import com.regula.documentreader.webclient.Pair;
import com.regula.documentreader.webclient.model.ListTransactionsByTagResponse;
import com.regula.documentreader.webclient.model.ProcessResponse;
import com.regula.documentreader.webclient.model.TransactionProcessGetResponse;
import com.regula.documentreader.webclient.model.TransactionProcessRequest;
import com.regula.documentreader.webclient.model.TransactionProcessResult;
import java.io.File;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

public class TransactionApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public TransactionApi() {
    this(Configuration.getDefaultApiClient());
  }

  public TransactionApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for apiV2TagTagIdDelete
   *
   * @param tagId Tag id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Transactions deleted </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TagTagIdDeleteCall(
      UUID tagId, HashMap<String, String> headers, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/v2/tag/{tagId}"
            .replace("{" + "tagId" + "}", localVarApiClient.escapeString(tagId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }
    if (headers != null) {
      for (String key : headers.keySet()) {
        localVarHeaderParams.put(key, headers.get(key));
      }
    }
    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call apiV2TagTagIdDeleteValidateBeforeCall(
      UUID tagId, HashMap<String, String> headers, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'tagId' is set
    if (tagId == null) {
      throw new ApiException(
          "Missing the required parameter 'tagId' when calling apiV2TagTagIdDelete(Async)");
    }

    return apiV2TagTagIdDeleteCall(tagId, headers, _callback);
  }

  /**
   * Delete Reprocess transactions by tag
   *
   * @param tagId Tag id (required)
   * @return Object
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Transactions deleted </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public Object apiV2TagTagIdDelete(UUID tagId, HashMap<String, String> headers)
      throws ApiException {
    ApiResponse<Object> localVarResp = apiV2TagTagIdDeleteWithHttpInfo(tagId, headers);
    return localVarResp.getData();
  }

  /**
   * Delete Reprocess transactions by tag
   *
   * @param tagId Tag id (required)
   * @return ApiResponse&lt;Object&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Transactions deleted </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<Object> apiV2TagTagIdDeleteWithHttpInfo(
      UUID tagId, HashMap<String, String> headers) throws ApiException {
    okhttp3.Call localVarCall = apiV2TagTagIdDeleteValidateBeforeCall(tagId, headers, null);
    Type localVarReturnType = new TypeToken<Object>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete Reprocess transactions by tag (asynchronously)
   *
   * @param tagId Tag id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 204 </td><td> Transactions deleted </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TagTagIdDeleteAsync(
      UUID tagId, HashMap<String, String> headers, final ApiCallback<Object> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = apiV2TagTagIdDeleteValidateBeforeCall(tagId, headers, _callback);
    Type localVarReturnType = new TypeToken<Object>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for apiV2TagTagIdTransactionsGet
   *
   * @param tagId Tag id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transactions list by tag </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TagTagIdTransactionsGetCall(
      String tagId, HashMap<String, String> headers, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/v2/tag/{tagId}/transactions"
            .replace("{" + "tagId" + "}", localVarApiClient.escapeString(tagId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }
    if (headers != null) {
      for (String key : headers.keySet()) {
        localVarHeaderParams.put(key, headers.get(key));
      }
    }
    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call apiV2TagTagIdTransactionsGetValidateBeforeCall(
      String tagId, HashMap<String, String> headers, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'tagId' is set
    if (tagId == null) {
      throw new ApiException(
          "Missing the required parameter 'tagId' when calling apiV2TagTagIdTransactionsGet(Async)");
    }

    return apiV2TagTagIdTransactionsGetCall(tagId, headers, _callback);
  }

  /**
   * Get transactions by tag
   *
   * @param tagId Tag id (required)
   * @return ListTransactionsByTagResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transactions list by tag </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public ListTransactionsByTagResponse apiV2TagTagIdTransactionsGet(
      String tagId, HashMap<String, String> headers) throws ApiException {
    ApiResponse<ListTransactionsByTagResponse> localVarResp =
        apiV2TagTagIdTransactionsGetWithHttpInfo(tagId, headers);
    return localVarResp.getData();
  }

  /**
   * Get transactions by tag
   *
   * @param tagId Tag id (required)
   * @return ApiResponse&lt;ListTransactionsByTagResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transactions list by tag </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<ListTransactionsByTagResponse> apiV2TagTagIdTransactionsGetWithHttpInfo(
      String tagId, HashMap<String, String> headers) throws ApiException {
    okhttp3.Call localVarCall =
        apiV2TagTagIdTransactionsGetValidateBeforeCall(tagId, headers, null);
    Type localVarReturnType = new TypeToken<ListTransactionsByTagResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get transactions by tag (asynchronously)
   *
   * @param tagId Tag id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transactions list by tag </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TagTagIdTransactionsGetAsync(
      String tagId,
      HashMap<String, String> headers,
      final ApiCallback<ListTransactionsByTagResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        apiV2TagTagIdTransactionsGetValidateBeforeCall(tagId, headers, _callback);
    Type localVarReturnType = new TypeToken<ListTransactionsByTagResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for apiV2TransactionTransactionIdFileGet
   *
   * @param transactionId Transaction id (required)
   * @param name File name (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Binary file </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TransactionTransactionIdFileGetCall(
      UUID transactionId, String name, HashMap<String, String> headers, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/v2/transaction/{transactionId}/file"
            .replace(
                "{" + "transactionId" + "}",
                localVarApiClient.escapeString(transactionId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (name != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
    }

    final String[] localVarAccepts = {"application/octet-stream"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }
    if (headers != null) {
      for (String key : headers.keySet()) {
        localVarHeaderParams.put(key, headers.get(key));
      }
    }
    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call apiV2TransactionTransactionIdFileGetValidateBeforeCall(
      UUID transactionId, String name, HashMap<String, String> headers, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'transactionId' is set
    if (transactionId == null) {
      throw new ApiException(
          "Missing the required parameter 'transactionId' when calling apiV2TransactionTransactionIdFileGet(Async)");
    }

    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(
          "Missing the required parameter 'name' when calling apiV2TransactionTransactionIdFileGet(Async)");
    }

    return apiV2TransactionTransactionIdFileGetCall(transactionId, name, headers, _callback);
  }

  /**
   * Get Reprocess transaction file
   *
   * @param transactionId Transaction id (required)
   * @param name File name (required)
   * @return File
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Binary file </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
   * </table>
   */
  public File apiV2TransactionTransactionIdFileGet(
      UUID transactionId, String name, HashMap<String, String> headers) throws ApiException {
    ApiResponse<File> localVarResp =
        apiV2TransactionTransactionIdFileGetWithHttpInfo(transactionId, name, headers);
    return localVarResp.getData();
  }

  /**
   * Get Reprocess transaction file
   *
   * @param transactionId Transaction id (required)
   * @param name File name (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Binary file </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<File> apiV2TransactionTransactionIdFileGetWithHttpInfo(
      UUID transactionId, String name, HashMap<String, String> headers) throws ApiException {
    okhttp3.Call localVarCall =
        apiV2TransactionTransactionIdFileGetValidateBeforeCall(transactionId, name, headers, null);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Reprocess transaction file (asynchronously)
   *
   * @param transactionId Transaction id (required)
   * @param name File name (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Binary file </td><td>  -  </td></tr>
   * <tr><td> 404 </td><td> File not found </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TransactionTransactionIdFileGetAsync(
      UUID transactionId,
      String name,
      HashMap<String, String> headers,
      final ApiCallback<File> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        apiV2TransactionTransactionIdFileGetValidateBeforeCall(
            transactionId, name, headers, _callback);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for apiV2TransactionTransactionIdGet
   *
   * @param transactionId Transaction id (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Reprocess transaction data </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TransactionTransactionIdGetCall(
      UUID transactionId, HashMap<String, String> headers, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/v2/transaction/{transactionId}"
            .replace(
                "{" + "transactionId" + "}",
                localVarApiClient.escapeString(transactionId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }
    if (headers != null) {
      for (String key : headers.keySet()) {
        localVarHeaderParams.put(key, headers.get(key));
      }
    }
    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call apiV2TransactionTransactionIdGetValidateBeforeCall(
      UUID transactionId, HashMap<String, String> headers, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'transactionId' is set
    if (transactionId == null) {
      throw new ApiException(
          "Missing the required parameter 'transactionId' when calling apiV2TransactionTransactionIdGet(Async)");
    }

    return apiV2TransactionTransactionIdGetCall(transactionId, headers, _callback);
  }

  /**
   * Get Reprocess transaction data
   *
   * @param transactionId Transaction id (required)
   * @return TransactionProcessGetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Reprocess transaction data </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public TransactionProcessGetResponse apiV2TransactionTransactionIdGet(
      UUID transactionId, HashMap<String, String> headers) throws ApiException {
    ApiResponse<TransactionProcessGetResponse> localVarResp =
        apiV2TransactionTransactionIdGetWithHttpInfo(transactionId, headers);
    return localVarResp.getData();
  }

  /**
   * Get Reprocess transaction data
   *
   * @param transactionId Transaction id (required)
   * @return ApiResponse&lt;TransactionProcessGetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Reprocess transaction data </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<TransactionProcessGetResponse> apiV2TransactionTransactionIdGetWithHttpInfo(
      UUID transactionId, HashMap<String, String> headers) throws ApiException {
    okhttp3.Call localVarCall =
        apiV2TransactionTransactionIdGetValidateBeforeCall(transactionId, headers, null);
    Type localVarReturnType = new TypeToken<TransactionProcessGetResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Reprocess transaction data (asynchronously)
   *
   * @param transactionId Transaction id (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Reprocess transaction data </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TransactionTransactionIdGetAsync(
      UUID transactionId,
      HashMap<String, String> headers,
      final ApiCallback<TransactionProcessGetResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        apiV2TransactionTransactionIdGetValidateBeforeCall(transactionId, headers, _callback);
    Type localVarReturnType = new TypeToken<TransactionProcessGetResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for apiV2TransactionTransactionIdProcessPost
   *
   * @param transactionId Transaction id (required)
   * @param transactionProcessRequest (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transaction Process result </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TransactionTransactionIdProcessPostCall(
      UUID transactionId,
      TransactionProcessRequest transactionProcessRequest,
      HashMap<String, String> headers,
      final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = transactionProcessRequest;

    // create path and map variables
    String localVarPath =
        "/api/v2/transaction/{transactionId}/process"
            .replace(
                "{" + "transactionId" + "}",
                localVarApiClient.escapeString(transactionId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }
    if (headers != null) {
      for (String key : headers.keySet()) {
        localVarHeaderParams.put(key, headers.get(key));
      }
    }
    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call apiV2TransactionTransactionIdProcessPostValidateBeforeCall(
      UUID transactionId,
      TransactionProcessRequest transactionProcessRequest,
      HashMap<String, String> headers,
      final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'transactionId' is set
    if (transactionId == null) {
      throw new ApiException(
          "Missing the required parameter 'transactionId' when calling apiV2TransactionTransactionIdProcessPost(Async)");
    }

    // verify the required parameter 'transactionProcessRequest' is set
    if (transactionProcessRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'transactionProcessRequest' when calling apiV2TransactionTransactionIdProcessPost(Async)");
    }

    return apiV2TransactionTransactionIdProcessPostCall(
        transactionId, transactionProcessRequest, headers, _callback);
  }

  /**
   * Reprocess
   *
   * @param transactionId Transaction id (required)
   * @param transactionProcessRequest (required)
   * @return TransactionProcessResult
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transaction Process result </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public TransactionProcessResult apiV2TransactionTransactionIdProcessPost(
      UUID transactionId,
      TransactionProcessRequest transactionProcessRequest,
      HashMap<String, String> headers)
      throws ApiException {
    ApiResponse<TransactionProcessResult> localVarResp =
        apiV2TransactionTransactionIdProcessPostWithHttpInfo(
            transactionId, transactionProcessRequest, headers);
    return localVarResp.getData();
  }

  /**
   * Reprocess
   *
   * @param transactionId Transaction id (required)
   * @param transactionProcessRequest (required)
   * @return ApiResponse&lt;TransactionProcessResult&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transaction Process result </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<TransactionProcessResult> apiV2TransactionTransactionIdProcessPostWithHttpInfo(
      UUID transactionId,
      TransactionProcessRequest transactionProcessRequest,
      HashMap<String, String> headers)
      throws ApiException {
    okhttp3.Call localVarCall =
        apiV2TransactionTransactionIdProcessPostValidateBeforeCall(
            transactionId, transactionProcessRequest, headers, null);
    Type localVarReturnType = new TypeToken<TransactionProcessResult>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Reprocess (asynchronously)
   *
   * @param transactionId Transaction id (required)
   * @param transactionProcessRequest (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transaction Process result </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TransactionTransactionIdProcessPostAsync(
      UUID transactionId,
      TransactionProcessRequest transactionProcessRequest,
      HashMap<String, String> headers,
      final ApiCallback<TransactionProcessResult> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        apiV2TransactionTransactionIdProcessPostValidateBeforeCall(
            transactionId, transactionProcessRequest, headers, _callback);
    Type localVarReturnType = new TypeToken<TransactionProcessResult>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
  /**
   * Build call for apiV2TransactionTransactionIdResultsGet
   *
   * @param transactionId Transaction id (required)
   * @param withImages With base64 images or url (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transaction data </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TransactionTransactionIdResultsGetCall(
      UUID transactionId,
      Boolean withImages,
      HashMap<String, String> headers,
      final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/api/v2/transaction/{transactionId}/results"
            .replace(
                "{" + "transactionId" + "}",
                localVarApiClient.escapeString(transactionId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (withImages != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("withImages", withImages));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }
    if (headers != null) {
      for (String key : headers.keySet()) {
        localVarHeaderParams.put(key, headers.get(key));
      }
    }
    String[] localVarAuthNames = new String[] {};
    return localVarApiClient.buildCall(
        basePath,
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAuthNames,
        _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call apiV2TransactionTransactionIdResultsGetValidateBeforeCall(
      UUID transactionId,
      Boolean withImages,
      HashMap<String, String> headers,
      final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'transactionId' is set
    if (transactionId == null) {
      throw new ApiException(
          "Missing the required parameter 'transactionId' when calling apiV2TransactionTransactionIdResultsGet(Async)");
    }

    return apiV2TransactionTransactionIdResultsGetCall(
        transactionId, withImages, headers, _callback);
  }

  /**
   * Get Reprocess transaction result
   *
   * @param transactionId Transaction id (required)
   * @param withImages With base64 images or url (optional)
   * @return ProcessResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transaction data </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public ProcessResponse apiV2TransactionTransactionIdResultsGet(
      UUID transactionId, Boolean withImages, HashMap<String, String> headers) throws ApiException {
    ApiResponse<ProcessResponse> localVarResp =
        apiV2TransactionTransactionIdResultsGetWithHttpInfo(transactionId, withImages, headers);
    return localVarResp.getData();
  }

  /**
   * Get Reprocess transaction result
   *
   * @param transactionId Transaction id (required)
   * @param withImages With base64 images or url (optional)
   * @return ApiResponse&lt;ProcessResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transaction data </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public ApiResponse<ProcessResponse> apiV2TransactionTransactionIdResultsGetWithHttpInfo(
      UUID transactionId, Boolean withImages, HashMap<String, String> headers) throws ApiException {
    okhttp3.Call localVarCall =
        apiV2TransactionTransactionIdResultsGetValidateBeforeCall(
            transactionId, withImages, headers, null);
    Type localVarReturnType = new TypeToken<ProcessResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Reprocess transaction result (asynchronously)
   *
   * @param transactionId Transaction id (required)
   * @param withImages With base64 images or url (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *     <table border="1">
   * <caption>Response Details</caption>
   * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
   * <tr><td> 200 </td><td> Transaction data </td><td>  -  </td></tr>
   * <tr><td> 400 </td><td> Bad request. Check your input data. </td><td>  -  </td></tr>
   * <tr><td> 403 </td><td> Bad license. Either server or request does not contain valid license. </td><td>  -  </td></tr>
   * </table>
   */
  public okhttp3.Call apiV2TransactionTransactionIdResultsGetAsync(
      UUID transactionId,
      Boolean withImages,
      HashMap<String, String> headers,
      final ApiCallback<ProcessResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        apiV2TransactionTransactionIdResultsGetValidateBeforeCall(
            transactionId, withImages, headers, _callback);
    Type localVarReturnType = new TypeToken<ProcessResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}
