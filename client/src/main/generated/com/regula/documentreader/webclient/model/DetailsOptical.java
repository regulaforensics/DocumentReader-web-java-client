/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Objects;

/** Details on performed optical checks */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.13.0")
public class DetailsOptical {
  public static final String SERIALIZED_NAME_OVERALL_STATUS = "overallStatus";

  @SerializedName(SERIALIZED_NAME_OVERALL_STATUS)
  @javax.annotation.Nonnull
  private CheckResult overallStatus;

  public static final String SERIALIZED_NAME_DOC_TYPE = "docType";

  @SerializedName(SERIALIZED_NAME_DOC_TYPE)
  @javax.annotation.Nonnull
  private CheckResult docType;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";

  @SerializedName(SERIALIZED_NAME_EXPIRY)
  @javax.annotation.Nonnull
  private CheckResult expiry;

  public static final String SERIALIZED_NAME_IMAGE_Q_A = "imageQA";

  @SerializedName(SERIALIZED_NAME_IMAGE_Q_A)
  @javax.annotation.Nonnull
  private CheckResult imageQA;

  public static final String SERIALIZED_NAME_MRZ = "mrz";

  @SerializedName(SERIALIZED_NAME_MRZ)
  @javax.annotation.Nonnull
  private CheckResult mrz;

  public static final String SERIALIZED_NAME_PAGES_COUNT = "pagesCount";

  @SerializedName(SERIALIZED_NAME_PAGES_COUNT)
  @javax.annotation.Nonnull
  private Integer pagesCount;

  public static final String SERIALIZED_NAME_SECURITY = "security";

  @SerializedName(SERIALIZED_NAME_SECURITY)
  @javax.annotation.Nonnull
  private CheckResult security;

  public static final String SERIALIZED_NAME_TEXT = "text";

  @SerializedName(SERIALIZED_NAME_TEXT)
  @javax.annotation.Nonnull
  private CheckResult text;

  public static final String SERIALIZED_NAME_VDS = "vds";

  @SerializedName(SERIALIZED_NAME_VDS)
  @javax.annotation.Nullable
  private Integer vds;

  public DetailsOptical() {}

  public DetailsOptical overallStatus(@javax.annotation.Nonnull CheckResult overallStatus) {
    this.overallStatus = overallStatus;
    return this;
  }

  /**
   * Get overallStatus
   *
   * @return overallStatus
   */
  @javax.annotation.Nonnull
  public CheckResult getOverallStatus() {
    return overallStatus;
  }

  public void setOverallStatus(@javax.annotation.Nonnull CheckResult overallStatus) {
    this.overallStatus = overallStatus;
  }

  public DetailsOptical docType(@javax.annotation.Nonnull CheckResult docType) {
    this.docType = docType;
    return this;
  }

  /**
   * Get docType
   *
   * @return docType
   */
  @javax.annotation.Nonnull
  public CheckResult getDocType() {
    return docType;
  }

  public void setDocType(@javax.annotation.Nonnull CheckResult docType) {
    this.docType = docType;
  }

  public DetailsOptical expiry(@javax.annotation.Nonnull CheckResult expiry) {
    this.expiry = expiry;
    return this;
  }

  /**
   * Get expiry
   *
   * @return expiry
   */
  @javax.annotation.Nonnull
  public CheckResult getExpiry() {
    return expiry;
  }

  public void setExpiry(@javax.annotation.Nonnull CheckResult expiry) {
    this.expiry = expiry;
  }

  public DetailsOptical imageQA(@javax.annotation.Nonnull CheckResult imageQA) {
    this.imageQA = imageQA;
    return this;
  }

  /**
   * Get imageQA
   *
   * @return imageQA
   */
  @javax.annotation.Nonnull
  public CheckResult getImageQA() {
    return imageQA;
  }

  public void setImageQA(@javax.annotation.Nonnull CheckResult imageQA) {
    this.imageQA = imageQA;
  }

  public DetailsOptical mrz(@javax.annotation.Nonnull CheckResult mrz) {
    this.mrz = mrz;
    return this;
  }

  /**
   * Get mrz
   *
   * @return mrz
   */
  @javax.annotation.Nonnull
  public CheckResult getMrz() {
    return mrz;
  }

  public void setMrz(@javax.annotation.Nonnull CheckResult mrz) {
    this.mrz = mrz;
  }

  public DetailsOptical pagesCount(@javax.annotation.Nonnull Integer pagesCount) {
    this.pagesCount = pagesCount;
    return this;
  }

  /**
   * Number of processed pages in the document
   *
   * @return pagesCount
   */
  @javax.annotation.Nonnull
  public Integer getPagesCount() {
    return pagesCount;
  }

  public void setPagesCount(@javax.annotation.Nonnull Integer pagesCount) {
    this.pagesCount = pagesCount;
  }

  public DetailsOptical security(@javax.annotation.Nonnull CheckResult security) {
    this.security = security;
    return this;
  }

  /**
   * Get security
   *
   * @return security
   */
  @javax.annotation.Nonnull
  public CheckResult getSecurity() {
    return security;
  }

  public void setSecurity(@javax.annotation.Nonnull CheckResult security) {
    this.security = security;
  }

  public DetailsOptical text(@javax.annotation.Nonnull CheckResult text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   *
   * @return text
   */
  @javax.annotation.Nonnull
  public CheckResult getText() {
    return text;
  }

  public void setText(@javax.annotation.Nonnull CheckResult text) {
    this.text = text;
  }

  public DetailsOptical vds(@javax.annotation.Nullable Integer vds) {
    this.vds = vds;
    return this;
  }

  /**
   * Get vds
   *
   * @return vds
   */
  @javax.annotation.Nullable
  public Integer getVds() {
    return vds;
  }

  public void setVds(@javax.annotation.Nullable Integer vds) {
    this.vds = vds;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailsOptical detailsOptical = (DetailsOptical) o;
    return Objects.equals(this.overallStatus, detailsOptical.overallStatus)
        && Objects.equals(this.docType, detailsOptical.docType)
        && Objects.equals(this.expiry, detailsOptical.expiry)
        && Objects.equals(this.imageQA, detailsOptical.imageQA)
        && Objects.equals(this.mrz, detailsOptical.mrz)
        && Objects.equals(this.pagesCount, detailsOptical.pagesCount)
        && Objects.equals(this.security, detailsOptical.security)
        && Objects.equals(this.text, detailsOptical.text)
        && Objects.equals(this.vds, detailsOptical.vds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        overallStatus, docType, expiry, imageQA, mrz, pagesCount, security, text, vds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailsOptical {\n");
    sb.append("    overallStatus: ").append(toIndentedString(overallStatus)).append("\n");
    sb.append("    docType: ").append(toIndentedString(docType)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    imageQA: ").append(toIndentedString(imageQA)).append("\n");
    sb.append("    mrz: ").append(toIndentedString(mrz)).append("\n");
    sb.append("    pagesCount: ").append(toIndentedString(pagesCount)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    vds: ").append(toIndentedString(vds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("overallStatus");
    openapiFields.add("docType");
    openapiFields.add("expiry");
    openapiFields.add("imageQA");
    openapiFields.add("mrz");
    openapiFields.add("pagesCount");
    openapiFields.add("security");
    openapiFields.add("text");
    openapiFields.add("vds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("overallStatus");
    openapiRequiredFields.add("docType");
    openapiRequiredFields.add("expiry");
    openapiRequiredFields.add("imageQA");
    openapiRequiredFields.add("mrz");
    openapiRequiredFields.add("pagesCount");
    openapiRequiredFields.add("security");
    openapiRequiredFields.add("text");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetailsOptical
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!DetailsOptical.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in DetailsOptical is not found in the empty JSON string",
                DetailsOptical.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : DetailsOptical.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `overallStatus`
    CheckResult.validateJsonElement(jsonObj.get("overallStatus"));
    // validate the required field `docType`
    CheckResult.validateJsonElement(jsonObj.get("docType"));
    // validate the required field `expiry`
    CheckResult.validateJsonElement(jsonObj.get("expiry"));
    // validate the required field `imageQA`
    CheckResult.validateJsonElement(jsonObj.get("imageQA"));
    // validate the required field `mrz`
    CheckResult.validateJsonElement(jsonObj.get("mrz"));
    // validate the required field `security`
    CheckResult.validateJsonElement(jsonObj.get("security"));
    // validate the required field `text`
    CheckResult.validateJsonElement(jsonObj.get("text"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!DetailsOptical.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'DetailsOptical' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<DetailsOptical> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(DetailsOptical.class));

      return (TypeAdapter<T>)
          new TypeAdapter<DetailsOptical>() {
            @Override
            public void write(JsonWriter out, DetailsOptical value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public DetailsOptical read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of DetailsOptical given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetailsOptical
   * @throws IOException if the JSON string is invalid with respect to DetailsOptical
   */
  public static DetailsOptical fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetailsOptical.class);
  }

  /**
   * Convert an instance of DetailsOptical to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
