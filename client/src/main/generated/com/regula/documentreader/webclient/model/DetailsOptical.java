/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 5.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.annotations.SerializedName;
import java.util.Objects;

/** DetailsOptical */
public class DetailsOptical {
  public static final String SERIALIZED_NAME_OVERALL_STATUS = "overallStatus";

  @SerializedName(SERIALIZED_NAME_OVERALL_STATUS)
  private Integer overallStatus;

  public static final String SERIALIZED_NAME_DOC_TYPE = "docType";

  @SerializedName(SERIALIZED_NAME_DOC_TYPE)
  private Integer docType;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";

  @SerializedName(SERIALIZED_NAME_EXPIRY)
  private Integer expiry;

  public static final String SERIALIZED_NAME_IMAGE_Q_A = "imageQA";

  @SerializedName(SERIALIZED_NAME_IMAGE_Q_A)
  private Integer imageQA;

  public static final String SERIALIZED_NAME_MRZ = "mrz";

  @SerializedName(SERIALIZED_NAME_MRZ)
  private Integer mrz;

  public static final String SERIALIZED_NAME_PAGES_COUNT = "pagesCount";

  @SerializedName(SERIALIZED_NAME_PAGES_COUNT)
  private Integer pagesCount;

  public static final String SERIALIZED_NAME_SECURITY = "security";

  @SerializedName(SERIALIZED_NAME_SECURITY)
  private Integer security;

  public static final String SERIALIZED_NAME_TEXT = "text";

  @SerializedName(SERIALIZED_NAME_TEXT)
  private Integer text;

  public DetailsOptical withOverallStatus(Integer overallStatus) {
    this.overallStatus = overallStatus;
    return this;
  }

  /**
   * Get overallStatus
   *
   * @return overallStatus
   */
  public Integer getOverallStatus() {
    return overallStatus;
  }

  public void setOverallStatus(Integer overallStatus) {
    this.overallStatus = overallStatus;
  }

  public DetailsOptical withDocType(Integer docType) {
    this.docType = docType;
    return this;
  }

  /**
   * Get docType
   *
   * @return docType
   */
  public Integer getDocType() {
    return docType;
  }

  public void setDocType(Integer docType) {
    this.docType = docType;
  }

  public DetailsOptical withExpiry(Integer expiry) {
    this.expiry = expiry;
    return this;
  }

  /**
   * Get expiry
   *
   * @return expiry
   */
  public Integer getExpiry() {
    return expiry;
  }

  public void setExpiry(Integer expiry) {
    this.expiry = expiry;
  }

  public DetailsOptical withImageQA(Integer imageQA) {
    this.imageQA = imageQA;
    return this;
  }

  /**
   * Get imageQA
   *
   * @return imageQA
   */
  public Integer getImageQA() {
    return imageQA;
  }

  public void setImageQA(Integer imageQA) {
    this.imageQA = imageQA;
  }

  public DetailsOptical withMrz(Integer mrz) {
    this.mrz = mrz;
    return this;
  }

  /**
   * Get mrz
   *
   * @return mrz
   */
  public Integer getMrz() {
    return mrz;
  }

  public void setMrz(Integer mrz) {
    this.mrz = mrz;
  }

  public DetailsOptical withPagesCount(Integer pagesCount) {
    this.pagesCount = pagesCount;
    return this;
  }

  /**
   * Number of processed pages in the document
   *
   * @return pagesCount
   */
  public Integer getPagesCount() {
    return pagesCount;
  }

  public void setPagesCount(Integer pagesCount) {
    this.pagesCount = pagesCount;
  }

  public DetailsOptical withSecurity(Integer security) {
    this.security = security;
    return this;
  }

  /**
   * Get security
   *
   * @return security
   */
  public Integer getSecurity() {
    return security;
  }

  public void setSecurity(Integer security) {
    this.security = security;
  }

  public DetailsOptical withText(Integer text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   *
   * @return text
   */
  public Integer getText() {
    return text;
  }

  public void setText(Integer text) {
    this.text = text;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetailsOptical detailsOptical = (DetailsOptical) o;
    return Objects.equals(this.overallStatus, detailsOptical.overallStatus)
        && Objects.equals(this.docType, detailsOptical.docType)
        && Objects.equals(this.expiry, detailsOptical.expiry)
        && Objects.equals(this.imageQA, detailsOptical.imageQA)
        && Objects.equals(this.mrz, detailsOptical.mrz)
        && Objects.equals(this.pagesCount, detailsOptical.pagesCount)
        && Objects.equals(this.security, detailsOptical.security)
        && Objects.equals(this.text, detailsOptical.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(overallStatus, docType, expiry, imageQA, mrz, pagesCount, security, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetailsOptical {\n");
    sb.append("    overallStatus: ").append(toIndentedString(overallStatus)).append("\n");
    sb.append("    docType: ").append(toIndentedString(docType)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    imageQA: ").append(toIndentedString(imageQA)).append("\n");
    sb.append("    mrz: ").append(toIndentedString(mrz)).append("\n");
    sb.append("    pagesCount: ").append(toIndentedString(pagesCount)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
