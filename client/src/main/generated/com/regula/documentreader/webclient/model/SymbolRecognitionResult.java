/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/** Describes a single character recognition results in the text field line */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class SymbolRecognitionResult {
  public static final String SERIALIZED_NAME_SYMBOL_RECT = "SymbolRect";

  @SerializedName(SERIALIZED_NAME_SYMBOL_RECT)
  @javax.annotation.Nullable
  private RectangleCoordinates symbolRect;

  public static final String SERIALIZED_NAME_CANDIDATES_COUNT = "CandidatesCount";

  @SerializedName(SERIALIZED_NAME_CANDIDATES_COUNT)
  @javax.annotation.Nonnull
  private BigDecimal candidatesCount;

  public static final String SERIALIZED_NAME_LIST_OF_CANDIDATES = "ListOfCandidates";

  @SerializedName(SERIALIZED_NAME_LIST_OF_CANDIDATES)
  @javax.annotation.Nonnull
  private List<SymbolCandidate> listOfCandidates;

  public static final String SERIALIZED_NAME_BASE_LINE_BOTTOM = "BaseLineBottom";

  @SerializedName(SERIALIZED_NAME_BASE_LINE_BOTTOM)
  @javax.annotation.Nullable
  private Integer baseLineBottom;

  public static final String SERIALIZED_NAME_BASE_LINE_TOP = "BaseLineTop";

  @SerializedName(SERIALIZED_NAME_BASE_LINE_TOP)
  @javax.annotation.Nullable
  private Integer baseLineTop;

  public static final String SERIALIZED_NAME_RESERVED = "Reserved";

  @SerializedName(SERIALIZED_NAME_RESERVED)
  @javax.annotation.Nullable
  private Integer reserved;

  public SymbolRecognitionResult() {}

  public SymbolRecognitionResult symbolRect(
      @javax.annotation.Nullable RectangleCoordinates symbolRect) {
    this.symbolRect = symbolRect;
    return this;
  }

  /**
   * Get symbolRect
   *
   * @return symbolRect
   */
  @javax.annotation.Nullable
  public RectangleCoordinates getSymbolRect() {
    return symbolRect;
  }

  public void setSymbolRect(@javax.annotation.Nullable RectangleCoordinates symbolRect) {
    this.symbolRect = symbolRect;
  }

  public SymbolRecognitionResult candidatesCount(
      @javax.annotation.Nonnull BigDecimal candidatesCount) {
    this.candidatesCount = candidatesCount;
    return this;
  }

  /**
   * Number of significant elements of ListOfCandidates array
   *
   * @return candidatesCount
   */
  @javax.annotation.Nonnull
  public BigDecimal getCandidatesCount() {
    return candidatesCount;
  }

  public void setCandidatesCount(@javax.annotation.Nonnull BigDecimal candidatesCount) {
    this.candidatesCount = candidatesCount;
  }

  public SymbolRecognitionResult listOfCandidates(
      @javax.annotation.Nonnull List<SymbolCandidate> listOfCandidates) {
    this.listOfCandidates = listOfCandidates;
    return this;
  }

  public SymbolRecognitionResult addListOfCandidatesItem(SymbolCandidate listOfCandidatesItem) {
    if (this.listOfCandidates == null) {
      this.listOfCandidates = new ArrayList<>();
    }
    this.listOfCandidates.add(listOfCandidatesItem);
    return this;
  }

  /**
   * Array of candidate characters. Sorted in descending order of recognition probabilities (the
   * first element has highest probability)
   *
   * @return listOfCandidates
   */
  @javax.annotation.Nonnull
  public List<SymbolCandidate> getListOfCandidates() {
    return listOfCandidates;
  }

  public void setListOfCandidates(
      @javax.annotation.Nonnull List<SymbolCandidate> listOfCandidates) {
    this.listOfCandidates = listOfCandidates;
  }

  public SymbolRecognitionResult baseLineBottom(@javax.annotation.Nullable Integer baseLineBottom) {
    this.baseLineBottom = baseLineBottom;
    return this;
  }

  /**
   * Get baseLineBottom
   *
   * @return baseLineBottom
   */
  @javax.annotation.Nullable
  public Integer getBaseLineBottom() {
    return baseLineBottom;
  }

  public void setBaseLineBottom(@javax.annotation.Nullable Integer baseLineBottom) {
    this.baseLineBottom = baseLineBottom;
  }

  public SymbolRecognitionResult baseLineTop(@javax.annotation.Nullable Integer baseLineTop) {
    this.baseLineTop = baseLineTop;
    return this;
  }

  /**
   * Get baseLineTop
   *
   * @return baseLineTop
   */
  @javax.annotation.Nullable
  public Integer getBaseLineTop() {
    return baseLineTop;
  }

  public void setBaseLineTop(@javax.annotation.Nullable Integer baseLineTop) {
    this.baseLineTop = baseLineTop;
  }

  public SymbolRecognitionResult reserved(@javax.annotation.Nullable Integer reserved) {
    this.reserved = reserved;
    return this;
  }

  /**
   * Get reserved
   *
   * @return reserved
   */
  @javax.annotation.Nullable
  public Integer getReserved() {
    return reserved;
  }

  public void setReserved(@javax.annotation.Nullable Integer reserved) {
    this.reserved = reserved;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SymbolRecognitionResult symbolRecognitionResult = (SymbolRecognitionResult) o;
    return Objects.equals(this.symbolRect, symbolRecognitionResult.symbolRect)
        && Objects.equals(this.candidatesCount, symbolRecognitionResult.candidatesCount)
        && Objects.equals(this.listOfCandidates, symbolRecognitionResult.listOfCandidates)
        && Objects.equals(this.baseLineBottom, symbolRecognitionResult.baseLineBottom)
        && Objects.equals(this.baseLineTop, symbolRecognitionResult.baseLineTop)
        && Objects.equals(this.reserved, symbolRecognitionResult.reserved);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        symbolRect, candidatesCount, listOfCandidates, baseLineBottom, baseLineTop, reserved);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SymbolRecognitionResult {\n");
    sb.append("    symbolRect: ").append(toIndentedString(symbolRect)).append("\n");
    sb.append("    candidatesCount: ").append(toIndentedString(candidatesCount)).append("\n");
    sb.append("    listOfCandidates: ").append(toIndentedString(listOfCandidates)).append("\n");
    sb.append("    baseLineBottom: ").append(toIndentedString(baseLineBottom)).append("\n");
    sb.append("    baseLineTop: ").append(toIndentedString(baseLineTop)).append("\n");
    sb.append("    reserved: ").append(toIndentedString(reserved)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SymbolRect");
    openapiFields.add("CandidatesCount");
    openapiFields.add("ListOfCandidates");
    openapiFields.add("BaseLineBottom");
    openapiFields.add("BaseLineTop");
    openapiFields.add("Reserved");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CandidatesCount");
    openapiRequiredFields.add("ListOfCandidates");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SymbolRecognitionResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!SymbolRecognitionResult.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in SymbolRecognitionResult is not found in the empty JSON string",
                SymbolRecognitionResult.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : SymbolRecognitionResult.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the optional field `SymbolRect`
    if (jsonObj.get("SymbolRect") != null && !jsonObj.get("SymbolRect").isJsonNull()) {
      RectangleCoordinates.validateJsonElement(jsonObj.get("SymbolRect"));
    }
    // ensure the json data is an array
    if (!jsonObj.get("ListOfCandidates").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `ListOfCandidates` to be an array in the JSON string but got `%s`",
              jsonObj.get("ListOfCandidates").toString()));
    }

    JsonArray jsonArraylistOfCandidates = jsonObj.getAsJsonArray("ListOfCandidates");
    // validate the required field `ListOfCandidates` (array)
    for (int i = 0; i < jsonArraylistOfCandidates.size(); i++) {
      SymbolCandidate.validateJsonElement(jsonArraylistOfCandidates.get(i));
    }
    ;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!SymbolRecognitionResult.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'SymbolRecognitionResult' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<SymbolRecognitionResult> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(SymbolRecognitionResult.class));

      return (TypeAdapter<T>)
          new TypeAdapter<SymbolRecognitionResult>() {
            @Override
            public void write(JsonWriter out, SymbolRecognitionResult value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public SymbolRecognitionResult read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of SymbolRecognitionResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SymbolRecognitionResult
   * @throws IOException if the JSON string is invalid with respect to SymbolRecognitionResult
   */
  public static SymbolRecognitionResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SymbolRecognitionResult.class);
  }

  /**
   * Convert an instance of SymbolRecognitionResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
