/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.documentreader.webclient.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.model.ImageData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;


/**
* Information about one graphic field - abstract class
*/

public class GraphicField {
        public static final String SERIALIZED_NAME_FIELD_TYPE = "FieldType";
        @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
            private Integer fieldType;



        public static final String SERIALIZED_NAME_FIELD_NAME = "FieldName";
        @SerializedName(SERIALIZED_NAME_FIELD_NAME)
            private String fieldName;



        public static final String SERIALIZED_NAME_IMAGE = "image";
        @SerializedName(SERIALIZED_NAME_IMAGE)
            private ImageData image;




            public GraphicField withFieldType(Integer fieldType) {
              this.fieldType = fieldType;
              return this;
            }


    /**
        * Get fieldType
    * @return fieldType
    **/
    
    

        public Integer getFieldType() {
        return fieldType;
    }


            public void setFieldType(Integer fieldType) {
            this.fieldType = fieldType;
        }


            public GraphicField withFieldName(String fieldName) {
              this.fieldName = fieldName;
              return this;
            }


    /**
        * Graphic field symbolic name
    * @return fieldName
    **/
    
    

        public String getFieldName() {
        return fieldName;
    }


            public void setFieldName(String fieldName) {
            this.fieldName = fieldName;
        }


            public GraphicField withImage(ImageData image) {
              this.image = image;
              return this;
            }


    /**
        * Get image
    * @return image
    **/
    
    

        public ImageData getImage() {
        return image;
    }


            public void setImage(ImageData image) {
            this.image = image;
        }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
        return true;
        }
        if (o == null || getClass() != o.getClass()) {
        return false;
        }
            GraphicField graphicField = (GraphicField) o;
            return Objects.equals(this.fieldType, graphicField.fieldType) &&
            Objects.equals(this.fieldName, graphicField.fieldName) &&
            Objects.equals(this.image, graphicField.image);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fieldType, fieldName, image);
    }


@Override
public String toString() {
StringBuilder sb = new StringBuilder();
sb.append("class GraphicField {\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
sb.append("}");
return sb.toString();
}

/**
* Convert the given object to string with each line indented by 4 spaces
* (except the first line).
*/
private String toIndentedString(java.lang.Object o) {
if (o == null) {
return "null";
}
return o.toString().replace("\n", "\n    ");
}

}

