/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/** Enumeration contains a set of constants that define the type of certificate */
@JsonAdapter(RFIDPKDResourceType.Adapter.class)
public enum RFIDPKDResourceType {

  /** Certificate file contents (.pem, .cer, .crt, .der) */
  CERTIFICATE_PA(0),

  /** Certificate file contents (.cvcert) and private key file contents (.pkcs8) */
  CERTIFICATE_TA(1),

  /** LDIF file contents (.ldif) */
  LDIF(2),

  /** CRL file contents (.crl) */
  CRL(3),

  /** Master List (.ml, .mls) */
  ML(4),

  /** Defect List (.dl, .dls, .dfl) */
  DEFL(5),

  /** Deviance List (.dl, .dls, .dvl) */
  DEVL(6),

  /** Black List (.bl, .bls) */
  BL(7);

  private Integer value;

  RFIDPKDResourceType(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static RFIDPKDResourceType fromValue(Integer value) {
    for (RFIDPKDResourceType b : RFIDPKDResourceType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<RFIDPKDResourceType> {
    @Override
    public void write(final JsonWriter jsonWriter, final RFIDPKDResourceType enumeration)
        throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public RFIDPKDResourceType read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return RFIDPKDResourceType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    Integer value = jsonElement.getAsInt();
    RFIDPKDResourceType.fromValue(value);
  }
}
