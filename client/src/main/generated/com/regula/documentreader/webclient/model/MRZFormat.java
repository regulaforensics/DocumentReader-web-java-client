/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/** Gets or Sets MRZFormat */
@JsonAdapter(MRZFormat.Adapter.class)
public enum MRZFormat {

  /** 1x30 */
  IDL("1x30"),

  /** 3x30 */
  ID1("3x30"),

  /** 2x36 */
  ID2("2x36"),

  /** 2x44 */
  ID3("2x44"),

  /** 1x6 */
  CAN("1x6"),

  /** 2x30 */
  ID1_2_30("2x30");

  private String value;

  MRZFormat(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static MRZFormat fromValue(String value) {
    for (MRZFormat b : MRZFormat.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<MRZFormat> {
    @Override
    public void write(final JsonWriter jsonWriter, final MRZFormat enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public MRZFormat read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return MRZFormat.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    MRZFormat.fromValue(value);
  }
}
