/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/** TextFieldValue */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.13.0")
public class TextFieldValue {
  public static final String SERIALIZED_NAME_SOURCE = "source";

  @SerializedName(SERIALIZED_NAME_SOURCE)
  @javax.annotation.Nonnull
  private Source source;

  public static final String SERIALIZED_NAME_VALUE = "value";

  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nonnull
  private String value;

  public static final String SERIALIZED_NAME_ORIGINAL_VALUE = "originalValue";

  @SerializedName(SERIALIZED_NAME_ORIGINAL_VALUE)
  @javax.annotation.Nullable
  private String originalValue;

  public static final String SERIALIZED_NAME_ORIGINAL_VALIDITY = "originalValidity";

  @SerializedName(SERIALIZED_NAME_ORIGINAL_VALIDITY)
  @javax.annotation.Nonnull
  private CheckResult originalValidity;

  public static final String SERIALIZED_NAME_ORIGINAL_SYMBOLS = "originalSymbols";

  @SerializedName(SERIALIZED_NAME_ORIGINAL_SYMBOLS)
  @javax.annotation.Nullable
  private List<OriginalSymbol> originalSymbols;

  public static final String SERIALIZED_NAME_PAGE_INDEX = "pageIndex";

  @SerializedName(SERIALIZED_NAME_PAGE_INDEX)
  @javax.annotation.Nonnull
  private Integer pageIndex;

  public static final String SERIALIZED_NAME_PROBABILITY = "probability";

  @SerializedName(SERIALIZED_NAME_PROBABILITY)
  @javax.annotation.Nonnull
  private Integer probability;

  public static final String SERIALIZED_NAME_FIELD_RECT = "fieldRect";

  @SerializedName(SERIALIZED_NAME_FIELD_RECT)
  @javax.annotation.Nullable
  private RectangleCoordinates fieldRect;

  public static final String SERIALIZED_NAME_RFID_ORIGIN = "rfidOrigin";

  @SerializedName(SERIALIZED_NAME_RFID_ORIGIN)
  @javax.annotation.Nullable
  private RfidOrigin rfidOrigin;

  public static final String SERIALIZED_NAME_CONTAINER_TYPE = "containerType";

  @SerializedName(SERIALIZED_NAME_CONTAINER_TYPE)
  @javax.annotation.Nullable
  private Integer containerType = 0;

  public TextFieldValue() {}

  public TextFieldValue source(@javax.annotation.Nonnull Source source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   *
   * @return source
   */
  @javax.annotation.Nonnull
  public Source getSource() {
    return source;
  }

  public void setSource(@javax.annotation.Nonnull Source source) {
    this.source = source;
  }

  public TextFieldValue value(@javax.annotation.Nonnull String value) {
    this.value = value;
    return this;
  }

  /**
   * Parsed/processed value. Date format converted for output, delimiters removed
   *
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nonnull String value) {
    this.value = value;
  }

  public TextFieldValue originalValue(@javax.annotation.Nullable String originalValue) {
    this.originalValue = originalValue;
    return this;
  }

  /**
   * Original value as seen in the document
   *
   * @return originalValue
   */
  @javax.annotation.Nullable
  public String getOriginalValue() {
    return originalValue;
  }

  public void setOriginalValue(@javax.annotation.Nullable String originalValue) {
    this.originalValue = originalValue;
  }

  public TextFieldValue originalValidity(@javax.annotation.Nonnull CheckResult originalValidity) {
    this.originalValidity = originalValidity;
    return this;
  }

  /**
   * Get originalValidity
   *
   * @return originalValidity
   */
  @javax.annotation.Nonnull
  public CheckResult getOriginalValidity() {
    return originalValidity;
  }

  public void setOriginalValidity(@javax.annotation.Nonnull CheckResult originalValidity) {
    this.originalValidity = originalValidity;
  }

  public TextFieldValue originalSymbols(
      @javax.annotation.Nullable List<OriginalSymbol> originalSymbols) {
    this.originalSymbols = originalSymbols;
    return this;
  }

  public TextFieldValue addOriginalSymbolsItem(OriginalSymbol originalSymbolsItem) {
    if (this.originalSymbols == null) {
      this.originalSymbols = new ArrayList<>();
    }
    this.originalSymbols.add(originalSymbolsItem);
    return this;
  }

  /**
   * Get originalSymbols
   *
   * @return originalSymbols
   */
  @javax.annotation.Nullable
  public List<OriginalSymbol> getOriginalSymbols() {
    return originalSymbols;
  }

  public void setOriginalSymbols(@javax.annotation.Nullable List<OriginalSymbol> originalSymbols) {
    this.originalSymbols = originalSymbols;
  }

  public TextFieldValue pageIndex(@javax.annotation.Nonnull Integer pageIndex) {
    this.pageIndex = pageIndex;
    return this;
  }

  /**
   * Page index of the image from input list
   *
   * @return pageIndex
   */
  @javax.annotation.Nonnull
  public Integer getPageIndex() {
    return pageIndex;
  }

  public void setPageIndex(@javax.annotation.Nonnull Integer pageIndex) {
    this.pageIndex = pageIndex;
  }

  public TextFieldValue probability(@javax.annotation.Nonnull Integer probability) {
    this.probability = probability;
    return this;
  }

  /**
   * Min recognition probability. Combined minimum probability from single characters probabilities
   * minimum: 0 maximum: 100
   *
   * @return probability
   */
  @javax.annotation.Nonnull
  public Integer getProbability() {
    return probability;
  }

  public void setProbability(@javax.annotation.Nonnull Integer probability) {
    this.probability = probability;
  }

  public TextFieldValue fieldRect(@javax.annotation.Nullable RectangleCoordinates fieldRect) {
    this.fieldRect = fieldRect;
    return this;
  }

  /**
   * Get fieldRect
   *
   * @return fieldRect
   */
  @javax.annotation.Nullable
  public RectangleCoordinates getFieldRect() {
    return fieldRect;
  }

  public void setFieldRect(@javax.annotation.Nullable RectangleCoordinates fieldRect) {
    this.fieldRect = fieldRect;
  }

  public TextFieldValue rfidOrigin(@javax.annotation.Nullable RfidOrigin rfidOrigin) {
    this.rfidOrigin = rfidOrigin;
    return this;
  }

  /**
   * Get rfidOrigin
   *
   * @return rfidOrigin
   */
  @javax.annotation.Nullable
  public RfidOrigin getRfidOrigin() {
    return rfidOrigin;
  }

  public void setRfidOrigin(@javax.annotation.Nullable RfidOrigin rfidOrigin) {
    this.rfidOrigin = rfidOrigin;
  }

  public TextFieldValue containerType(@javax.annotation.Nullable Integer containerType) {
    this.containerType = containerType;
    return this;
  }

  /**
   * Same as Result type, but used for safe parsing of not-described values. See Result type.
   *
   * @return containerType
   */
  @javax.annotation.Nullable
  public Integer getContainerType() {
    return containerType;
  }

  public void setContainerType(@javax.annotation.Nullable Integer containerType) {
    this.containerType = containerType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextFieldValue textFieldValue = (TextFieldValue) o;
    return Objects.equals(this.source, textFieldValue.source)
        && Objects.equals(this.value, textFieldValue.value)
        && Objects.equals(this.originalValue, textFieldValue.originalValue)
        && Objects.equals(this.originalValidity, textFieldValue.originalValidity)
        && Objects.equals(this.originalSymbols, textFieldValue.originalSymbols)
        && Objects.equals(this.pageIndex, textFieldValue.pageIndex)
        && Objects.equals(this.probability, textFieldValue.probability)
        && Objects.equals(this.fieldRect, textFieldValue.fieldRect)
        && Objects.equals(this.rfidOrigin, textFieldValue.rfidOrigin)
        && Objects.equals(this.containerType, textFieldValue.containerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        source,
        value,
        originalValue,
        originalValidity,
        originalSymbols,
        pageIndex,
        probability,
        fieldRect,
        rfidOrigin,
        containerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextFieldValue {\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    originalValue: ").append(toIndentedString(originalValue)).append("\n");
    sb.append("    originalValidity: ").append(toIndentedString(originalValidity)).append("\n");
    sb.append("    originalSymbols: ").append(toIndentedString(originalSymbols)).append("\n");
    sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
    sb.append("    probability: ").append(toIndentedString(probability)).append("\n");
    sb.append("    fieldRect: ").append(toIndentedString(fieldRect)).append("\n");
    sb.append("    rfidOrigin: ").append(toIndentedString(rfidOrigin)).append("\n");
    sb.append("    containerType: ").append(toIndentedString(containerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("source");
    openapiFields.add("value");
    openapiFields.add("originalValue");
    openapiFields.add("originalValidity");
    openapiFields.add("originalSymbols");
    openapiFields.add("pageIndex");
    openapiFields.add("probability");
    openapiFields.add("fieldRect");
    openapiFields.add("rfidOrigin");
    openapiFields.add("containerType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("source");
    openapiRequiredFields.add("value");
    openapiRequiredFields.add("originalValidity");
    openapiRequiredFields.add("pageIndex");
    openapiRequiredFields.add("probability");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextFieldValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!TextFieldValue.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in TextFieldValue is not found in the empty JSON string",
                TextFieldValue.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : TextFieldValue.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `source`
    Source.validateJsonElement(jsonObj.get("source"));
    if (!jsonObj.get("value").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `value` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("value").toString()));
    }
    if ((jsonObj.get("originalValue") != null && !jsonObj.get("originalValue").isJsonNull())
        && !jsonObj.get("originalValue").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `originalValue` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("originalValue").toString()));
    }
    // validate the required field `originalValidity`
    CheckResult.validateJsonElement(jsonObj.get("originalValidity"));
    if (jsonObj.get("originalSymbols") != null && !jsonObj.get("originalSymbols").isJsonNull()) {
      JsonArray jsonArrayoriginalSymbols = jsonObj.getAsJsonArray("originalSymbols");
      if (jsonArrayoriginalSymbols != null) {
        // ensure the json data is an array
        if (!jsonObj.get("originalSymbols").isJsonArray()) {
          throw new IllegalArgumentException(
              String.format(
                  "Expected the field `originalSymbols` to be an array in the JSON string but got `%s`",
                  jsonObj.get("originalSymbols").toString()));
        }

        // validate the optional field `originalSymbols` (array)
        for (int i = 0; i < jsonArrayoriginalSymbols.size(); i++) {
          OriginalSymbol.validateJsonElement(jsonArrayoriginalSymbols.get(i));
        }
        ;
      }
    }
    // validate the optional field `fieldRect`
    if (jsonObj.get("fieldRect") != null && !jsonObj.get("fieldRect").isJsonNull()) {
      RectangleCoordinates.validateJsonElement(jsonObj.get("fieldRect"));
    }
    // validate the optional field `rfidOrigin`
    if (jsonObj.get("rfidOrigin") != null && !jsonObj.get("rfidOrigin").isJsonNull()) {
      RfidOrigin.validateJsonElement(jsonObj.get("rfidOrigin"));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!TextFieldValue.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'TextFieldValue' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<TextFieldValue> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(TextFieldValue.class));

      return (TypeAdapter<T>)
          new TypeAdapter<TextFieldValue>() {
            @Override
            public void write(JsonWriter out, TextFieldValue value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public TextFieldValue read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of TextFieldValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextFieldValue
   * @throws IOException if the JSON string is invalid with respect to TextFieldValue
   */
  public static TextFieldValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextFieldValue.class);
  }

  /**
   * Convert an instance of TextFieldValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
