/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 5.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.model.*;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;
import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import okio.ByteString;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;
import org.threeten.bp.format.DateTimeFormatter;

public class JSON {
  private Gson gson;
  private boolean isLenientOnJson = false;
  private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
  private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
  private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
  private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
  private ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

  public static Map<String, Class> childOfChosenDocumentTypeResultByDiscriminatorValue =
      new HashMap<String, Class>();

  static {
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("1", DocumentImageResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("102", TextDataResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("103", GraphicsResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("17", TextDataResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("18", TextDataResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("19", GraphicsResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("3", TextDataResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("33", StatusResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("36", TextResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("37", ImagesResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("6", GraphicsResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put(
        "8", DocumentTypesCandidatesResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
    childOfChosenDocumentTypeResultByDiscriminatorValue.put(
        "ChosenDocumentTypeResult", ChosenDocumentTypeResult.class);
  }

  public static Map<String, Class> childOfDocumentImageResultByDiscriminatorValue =
      new HashMap<String, Class>();

  static {
    childOfDocumentImageResultByDiscriminatorValue.put("1", DocumentImageResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("102", TextDataResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("103", GraphicsResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("17", TextDataResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("18", TextDataResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("19", GraphicsResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("3", TextDataResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("33", StatusResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("36", TextResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("37", ImagesResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("6", GraphicsResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
    childOfDocumentImageResultByDiscriminatorValue.put(
        "DocumentImageResult", DocumentImageResult.class);
  }

  public static Map<String, Class> childOfDocumentTypesCandidatesResultByDiscriminatorValue =
      new HashMap<String, Class>();

  static {
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("1", DocumentImageResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("102", TextDataResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("103", GraphicsResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("17", TextDataResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("18", TextDataResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("19", GraphicsResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("3", TextDataResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("33", StatusResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("36", TextResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("37", ImagesResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("6", GraphicsResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put(
        "8", DocumentTypesCandidatesResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put(
        "9", ChosenDocumentTypeResult.class);
    childOfDocumentTypesCandidatesResultByDiscriminatorValue.put(
        "DocumentTypesCandidatesResult", DocumentTypesCandidatesResult.class);
  }

  public static Map<String, Class> childOfGraphicsResultByDiscriminatorValue =
      new HashMap<String, Class>();

  static {
    childOfGraphicsResultByDiscriminatorValue.put("1", DocumentImageResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("102", TextDataResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("103", GraphicsResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("17", TextDataResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("18", TextDataResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("19", GraphicsResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("3", TextDataResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("33", StatusResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("36", TextResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("37", ImagesResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("6", GraphicsResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
    childOfGraphicsResultByDiscriminatorValue.put("GraphicsResult", GraphicsResult.class);
  }

  public static Map<String, Class> childOfImagesResultByDiscriminatorValue =
      new HashMap<String, Class>();

  static {
    childOfImagesResultByDiscriminatorValue.put("1", DocumentImageResult.class);
    childOfImagesResultByDiscriminatorValue.put("102", TextDataResult.class);
    childOfImagesResultByDiscriminatorValue.put("103", GraphicsResult.class);
    childOfImagesResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
    childOfImagesResultByDiscriminatorValue.put("17", TextDataResult.class);
    childOfImagesResultByDiscriminatorValue.put("18", TextDataResult.class);
    childOfImagesResultByDiscriminatorValue.put("19", GraphicsResult.class);
    childOfImagesResultByDiscriminatorValue.put("3", TextDataResult.class);
    childOfImagesResultByDiscriminatorValue.put("33", StatusResult.class);
    childOfImagesResultByDiscriminatorValue.put("36", TextResult.class);
    childOfImagesResultByDiscriminatorValue.put("37", ImagesResult.class);
    childOfImagesResultByDiscriminatorValue.put("6", GraphicsResult.class);
    childOfImagesResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
    childOfImagesResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
    childOfImagesResultByDiscriminatorValue.put("ImagesResult", ImagesResult.class);
  }

  public static Map<String, Class> childOfLexicalAnalysisResultByDiscriminatorValue =
      new HashMap<String, Class>();

  static {
    childOfLexicalAnalysisResultByDiscriminatorValue.put("1", DocumentImageResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("102", TextDataResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("103", GraphicsResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("17", TextDataResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("18", TextDataResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("19", GraphicsResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("3", TextDataResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("33", StatusResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("36", TextResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("37", ImagesResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("6", GraphicsResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
    childOfLexicalAnalysisResultByDiscriminatorValue.put(
        "LexicalAnalysisResult", LexicalAnalysisResult.class);
  }

  public static Map<String, Class> childOfResultItemByDiscriminatorValue =
      new HashMap<String, Class>();

  static {
    childOfResultItemByDiscriminatorValue.put("1", DocumentImageResult.class);
    childOfResultItemByDiscriminatorValue.put("102", TextDataResult.class);
    childOfResultItemByDiscriminatorValue.put("103", GraphicsResult.class);
    childOfResultItemByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
    childOfResultItemByDiscriminatorValue.put("17", TextDataResult.class);
    childOfResultItemByDiscriminatorValue.put("18", TextDataResult.class);
    childOfResultItemByDiscriminatorValue.put("19", GraphicsResult.class);
    childOfResultItemByDiscriminatorValue.put("3", TextDataResult.class);
    childOfResultItemByDiscriminatorValue.put("33", StatusResult.class);
    childOfResultItemByDiscriminatorValue.put("36", TextResult.class);
    childOfResultItemByDiscriminatorValue.put("37", ImagesResult.class);
    childOfResultItemByDiscriminatorValue.put("6", GraphicsResult.class);
    childOfResultItemByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
    childOfResultItemByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
    childOfResultItemByDiscriminatorValue.put(
        "ChosenDocumentTypeResult", ChosenDocumentTypeResult.class);
    childOfResultItemByDiscriminatorValue.put("DocumentImageResult", DocumentImageResult.class);
    childOfResultItemByDiscriminatorValue.put(
        "DocumentTypesCandidatesResult", DocumentTypesCandidatesResult.class);
    childOfResultItemByDiscriminatorValue.put("GraphicsResult", GraphicsResult.class);
    childOfResultItemByDiscriminatorValue.put("ImagesResult", ImagesResult.class);
    childOfResultItemByDiscriminatorValue.put("LexicalAnalysisResult", LexicalAnalysisResult.class);
    childOfResultItemByDiscriminatorValue.put("StatusResult", StatusResult.class);
    childOfResultItemByDiscriminatorValue.put("TextDataResult", TextDataResult.class);
    childOfResultItemByDiscriminatorValue.put("TextResult", TextResult.class);
    childOfResultItemByDiscriminatorValue.put("ResultItem", ResultItem.class);
  }

  public static Map<String, Class> childOfStatusResultByDiscriminatorValue =
      new HashMap<String, Class>();

  static {
    childOfStatusResultByDiscriminatorValue.put("1", DocumentImageResult.class);
    childOfStatusResultByDiscriminatorValue.put("102", TextDataResult.class);
    childOfStatusResultByDiscriminatorValue.put("103", GraphicsResult.class);
    childOfStatusResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
    childOfStatusResultByDiscriminatorValue.put("17", TextDataResult.class);
    childOfStatusResultByDiscriminatorValue.put("18", TextDataResult.class);
    childOfStatusResultByDiscriminatorValue.put("19", GraphicsResult.class);
    childOfStatusResultByDiscriminatorValue.put("3", TextDataResult.class);
    childOfStatusResultByDiscriminatorValue.put("33", StatusResult.class);
    childOfStatusResultByDiscriminatorValue.put("36", TextResult.class);
    childOfStatusResultByDiscriminatorValue.put("37", ImagesResult.class);
    childOfStatusResultByDiscriminatorValue.put("6", GraphicsResult.class);
    childOfStatusResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
    childOfStatusResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
    childOfStatusResultByDiscriminatorValue.put("StatusResult", StatusResult.class);
  }

  public static Map<String, Class> childOfTextDataResultByDiscriminatorValue =
      new HashMap<String, Class>();

  static {
    childOfTextDataResultByDiscriminatorValue.put("1", DocumentImageResult.class);
    childOfTextDataResultByDiscriminatorValue.put("102", TextDataResult.class);
    childOfTextDataResultByDiscriminatorValue.put("103", GraphicsResult.class);
    childOfTextDataResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
    childOfTextDataResultByDiscriminatorValue.put("17", TextDataResult.class);
    childOfTextDataResultByDiscriminatorValue.put("18", TextDataResult.class);
    childOfTextDataResultByDiscriminatorValue.put("19", GraphicsResult.class);
    childOfTextDataResultByDiscriminatorValue.put("3", TextDataResult.class);
    childOfTextDataResultByDiscriminatorValue.put("33", StatusResult.class);
    childOfTextDataResultByDiscriminatorValue.put("36", TextResult.class);
    childOfTextDataResultByDiscriminatorValue.put("37", ImagesResult.class);
    childOfTextDataResultByDiscriminatorValue.put("6", GraphicsResult.class);
    childOfTextDataResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
    childOfTextDataResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
    childOfTextDataResultByDiscriminatorValue.put("TextDataResult", TextDataResult.class);
  }

  public static Map<String, Class> childOfTextResultByDiscriminatorValue =
      new HashMap<String, Class>();

  static {
    childOfTextResultByDiscriminatorValue.put("1", DocumentImageResult.class);
    childOfTextResultByDiscriminatorValue.put("102", TextDataResult.class);
    childOfTextResultByDiscriminatorValue.put("103", GraphicsResult.class);
    childOfTextResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
    childOfTextResultByDiscriminatorValue.put("17", TextDataResult.class);
    childOfTextResultByDiscriminatorValue.put("18", TextDataResult.class);
    childOfTextResultByDiscriminatorValue.put("19", GraphicsResult.class);
    childOfTextResultByDiscriminatorValue.put("3", TextDataResult.class);
    childOfTextResultByDiscriminatorValue.put("33", StatusResult.class);
    childOfTextResultByDiscriminatorValue.put("36", TextResult.class);
    childOfTextResultByDiscriminatorValue.put("37", ImagesResult.class);
    childOfTextResultByDiscriminatorValue.put("6", GraphicsResult.class);
    childOfTextResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
    childOfTextResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
    childOfTextResultByDiscriminatorValue.put("TextResult", TextResult.class);
  }

  public static GsonBuilder createGson() {
    GsonFireBuilder fireBuilder =
        new GsonFireBuilder()
            .registerTypeSelector(
                ChosenDocumentTypeResult.class,
                new TypeSelector() {
                  @Override
                  public Class getClassForElement(JsonElement readElement) {
                    return getClassByDiscriminator(
                        childOfChosenDocumentTypeResultByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                DocumentImageResult.class,
                new TypeSelector() {
                  @Override
                  public Class getClassForElement(JsonElement readElement) {
                    return getClassByDiscriminator(
                        childOfDocumentImageResultByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                DocumentTypesCandidatesResult.class,
                new TypeSelector() {
                  @Override
                  public Class getClassForElement(JsonElement readElement) {
                    return getClassByDiscriminator(
                        childOfDocumentTypesCandidatesResultByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                GraphicsResult.class,
                new TypeSelector() {
                  @Override
                  public Class getClassForElement(JsonElement readElement) {
                    return getClassByDiscriminator(
                        childOfGraphicsResultByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                ImagesResult.class,
                new TypeSelector() {
                  @Override
                  public Class getClassForElement(JsonElement readElement) {
                    return getClassByDiscriminator(
                        childOfImagesResultByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                LexicalAnalysisResult.class,
                new TypeSelector() {
                  @Override
                  public Class getClassForElement(JsonElement readElement) {
                    return getClassByDiscriminator(
                        childOfLexicalAnalysisResultByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                ResultItem.class,
                new TypeSelector() {
                  @Override
                  public Class getClassForElement(JsonElement readElement) {
                    return getClassByDiscriminator(
                        childOfResultItemByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                StatusResult.class,
                new TypeSelector() {
                  @Override
                  public Class getClassForElement(JsonElement readElement) {
                    return getClassByDiscriminator(
                        childOfStatusResultByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                TextDataResult.class,
                new TypeSelector() {
                  @Override
                  public Class getClassForElement(JsonElement readElement) {
                    return getClassByDiscriminator(
                        childOfTextDataResultByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                TextResult.class,
                new TypeSelector() {
                  @Override
                  public Class getClassForElement(JsonElement readElement) {
                    return getClassByDiscriminator(
                        childOfTextResultByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                });

    // rewrite, to support default mappings
    fireBuilder.registerTypeSelector(
        ResultItem.class,
        new TypeSelector() {
          @Override
          public Class getClassForElement(JsonElement readElement) {
            String result_type = getDiscriminatorValue(readElement, "result_type");
            Class clazz = childOfResultItemByDiscriminatorValue.get(result_type);
            if (clazz == null) {
              clazz = RawResultItem.class;
            }
            return clazz;
          }
        });

    GsonBuilder builder = fireBuilder.createGsonBuilder();
    return builder;
  }

  private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
    JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
    if (null == element) {
      throw new IllegalArgumentException(
          "missing discriminator field: <" + discriminatorField + ">");
    }
    return element.getAsString();
  }

  /**
   * Returns the Java class that implements the OpenAPI schema for the specified discriminator
   * value.
   *
   * @param classByDiscriminatorValue The map of discriminator values to Java classes.
   * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
   * @return The Java class that implements the OpenAPI schema
   */
  private static Class getClassByDiscriminator(
      Map classByDiscriminatorValue, String discriminatorValue) {
    Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
    if (null == clazz) {
      throw new IllegalArgumentException(
          "cannot determine model class of name: <" + discriminatorValue + ">");
    }
    return clazz;
  }

  public JSON() {
    gson =
        createGson()
            .registerTypeAdapter(Date.class, dateTypeAdapter)
            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
            .registerTypeAdapter(byte[].class, byteArrayAdapter)
            .create();
  }

  /**
   * Get Gson.
   *
   * @return Gson
   */
  public Gson getGson() {
    return gson;
  }

  /**
   * Set Gson.
   *
   * @param gson Gson
   * @return JSON
   */
  public JSON setGson(Gson gson) {
    this.gson = gson;
    return this;
  }

  public JSON setLenientOnJson(boolean lenientOnJson) {
    isLenientOnJson = lenientOnJson;
    return this;
  }

  /**
   * Serialize the given Java object into JSON string.
   *
   * @param obj Object
   * @return String representation of the JSON
   */
  public String serialize(Object obj) {
    return gson.toJson(obj);
  }

  /**
   * Deserialize the given JSON string to Java object.
   *
   * @param <T> Type
   * @param body The JSON string
   * @param returnType The type to deserialize into
   * @return The deserialized Java object
   */
  @SuppressWarnings("unchecked")
  public <T> T deserialize(String body, Type returnType) {
    try {
      if (isLenientOnJson) {
        JsonReader jsonReader = new JsonReader(new StringReader(body));
        // see
        // https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
        jsonReader.setLenient(true);
        return gson.fromJson(jsonReader, returnType);
      } else {
        return gson.fromJson(body, returnType);
      }
    } catch (JsonParseException e) {
      // Fallback processing when failed to parse JSON form response body:
      // return the response body string directly for the String return type;
      if (returnType.equals(String.class)) {
        return (T) body;
      } else {
        throw (e);
      }
    }
  }

  /** Gson TypeAdapter for Byte Array type */
  public class ByteArrayAdapter extends TypeAdapter<byte[]> {

    @Override
    public void write(JsonWriter out, byte[] value) throws IOException {
      if (value == null) {
        out.nullValue();
      } else {
        out.value(ByteString.of(value).base64());
      }
    }

    @Override
    public byte[] read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String bytesAsBase64 = in.nextString();
          ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
          return byteString.toByteArray();
      }
    }
  }

  /** Gson TypeAdapter for JSR310 OffsetDateTime type */
  public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

    private DateTimeFormatter formatter;

    public OffsetDateTimeTypeAdapter() {
      this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
    }

    public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
      this.formatter = formatter;
    }

    public void setFormat(DateTimeFormatter dateFormat) {
      this.formatter = dateFormat;
    }

    @Override
    public void write(JsonWriter out, OffsetDateTime date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        out.value(formatter.format(date));
      }
    }

    @Override
    public OffsetDateTime read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String date = in.nextString();
          if (date.endsWith("+0000")) {
            date = date.substring(0, date.length() - 5) + "Z";
          }
          return OffsetDateTime.parse(date, formatter);
      }
    }
  }

  /** Gson TypeAdapter for JSR310 LocalDate type */
  public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

    private DateTimeFormatter formatter;

    public LocalDateTypeAdapter() {
      this(DateTimeFormatter.ISO_LOCAL_DATE);
    }

    public LocalDateTypeAdapter(DateTimeFormatter formatter) {
      this.formatter = formatter;
    }

    public void setFormat(DateTimeFormatter dateFormat) {
      this.formatter = dateFormat;
    }

    @Override
    public void write(JsonWriter out, LocalDate date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        out.value(formatter.format(date));
      }
    }

    @Override
    public LocalDate read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String date = in.nextString();
          return LocalDate.parse(date, formatter);
      }
    }
  }

  public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
    offsetDateTimeTypeAdapter.setFormat(dateFormat);
    return this;
  }

  public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
    localDateTypeAdapter.setFormat(dateFormat);
    return this;
  }

  /**
   * Gson TypeAdapter for java.sql.Date type If the dateFormat is null, a simple "yyyy-MM-dd" format
   * will be used (more efficient than SimpleDateFormat).
   */
  public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

    private DateFormat dateFormat;

    public SqlDateTypeAdapter() {}

    public SqlDateTypeAdapter(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    public void setFormat(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    @Override
    public void write(JsonWriter out, java.sql.Date date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        String value;
        if (dateFormat != null) {
          value = dateFormat.format(date);
        } else {
          value = date.toString();
        }
        out.value(value);
      }
    }

    @Override
    public java.sql.Date read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String date = in.nextString();
          try {
            if (dateFormat != null) {
              return new java.sql.Date(dateFormat.parse(date).getTime());
            }
            return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
          } catch (ParseException e) {
            throw new JsonParseException(e);
          }
      }
    }
  }

  /**
   * Gson TypeAdapter for java.util.Date type If the dateFormat is null, ISO8601Utils will be used.
   */
  public static class DateTypeAdapter extends TypeAdapter<Date> {

    private DateFormat dateFormat;

    public DateTypeAdapter() {}

    public DateTypeAdapter(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    public void setFormat(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    @Override
    public void write(JsonWriter out, Date date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        String value;
        if (dateFormat != null) {
          value = dateFormat.format(date);
        } else {
          value = ISO8601Utils.format(date, true);
        }
        out.value(value);
      }
    }

    @Override
    public Date read(JsonReader in) throws IOException {
      try {
        switch (in.peek()) {
          case NULL:
            in.nextNull();
            return null;
          default:
            String date = in.nextString();
            try {
              if (dateFormat != null) {
                return dateFormat.parse(date);
              }
              return ISO8601Utils.parse(date, new ParsePosition(0));
            } catch (ParseException e) {
              throw new JsonParseException(e);
            }
        }
      } catch (IllegalArgumentException e) {
        throw new JsonParseException(e);
      }
    }
  }

  public JSON setDateFormat(DateFormat dateFormat) {
    dateTypeAdapter.setFormat(dateFormat);
    return this;
  }

  public JSON setSqlDateFormat(DateFormat dateFormat) {
    sqlDateTypeAdapter.setFormat(dateFormat);
    return this;
  }
}
