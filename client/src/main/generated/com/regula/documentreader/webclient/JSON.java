/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;
import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import okio.ByteString;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
  private static Gson gson;
  private static boolean isLenientOnJson = false;
  private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
  private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
  private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter =
      new OffsetDateTimeTypeAdapter();
  private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
  private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

  @SuppressWarnings("unchecked")
  public static GsonBuilder createGson() {
    GsonFireBuilder fireBuilder =
        new GsonFireBuilder()
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.AuthenticityCheckResultItem.class,
                new TypeSelector<
                    com.regula.documentreader.webclient.model.AuthenticityCheckResultItem>() {
                  @Override
                  public Class<
                          ? extends
                              com.regula.documentreader.webclient.model.AuthenticityCheckResultItem>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "1", com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "1024", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "1048576", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "128", com.regula.documentreader.webclient.model.PhotoIdentResult.class);
                    classByDiscriminatorValue.put(
                        "131072", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "16", com.regula.documentreader.webclient.model.FiberResult.class);
                    classByDiscriminatorValue.put(
                        "16384", com.regula.documentreader.webclient.model.FiberResult.class);
                    classByDiscriminatorValue.put(
                        "2", com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "2048", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "256", com.regula.documentreader.webclient.model.PhotoIdentResult.class);
                    classByDiscriminatorValue.put(
                        "262144", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "32", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "32768", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "4", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "4096",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "512",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "524288", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "64",
                        com.regula.documentreader.webclient.model.OCRSecurityTextResult.class);
                    classByDiscriminatorValue.put(
                        "65536",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "8", com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "8192",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "8388608",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "AuthenticityCheckResultItem",
                        com.regula.documentreader.webclient.model.AuthenticityCheckResultItem
                            .class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "Type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.AuthenticityCheckResultListInner.class,
                new TypeSelector<
                    com.regula.documentreader.webclient.model.AuthenticityCheckResultListInner>() {
                  @Override
                  public Class<
                          ? extends
                              com.regula.documentreader.webclient.model
                                  .AuthenticityCheckResultListInner>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "1", com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "1024", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "1048576", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "128", com.regula.documentreader.webclient.model.PhotoIdentResult.class);
                    classByDiscriminatorValue.put(
                        "131072", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "16", com.regula.documentreader.webclient.model.FiberResult.class);
                    classByDiscriminatorValue.put(
                        "16384", com.regula.documentreader.webclient.model.FiberResult.class);
                    classByDiscriminatorValue.put(
                        "2", com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "2048", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "256", com.regula.documentreader.webclient.model.PhotoIdentResult.class);
                    classByDiscriminatorValue.put(
                        "262144", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "32", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "32768", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "4", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "4096",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "512",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "524288", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "64",
                        com.regula.documentreader.webclient.model.OCRSecurityTextResult.class);
                    classByDiscriminatorValue.put(
                        "65536",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "8", com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "8192",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "8388608",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "FiberResult", com.regula.documentreader.webclient.model.FiberResult.class);
                    classByDiscriminatorValue.put(
                        "IdentResult", com.regula.documentreader.webclient.model.IdentResult.class);
                    classByDiscriminatorValue.put(
                        "OCRSecurityTextResult",
                        com.regula.documentreader.webclient.model.OCRSecurityTextResult.class);
                    classByDiscriminatorValue.put(
                        "PhotoIdentResult",
                        com.regula.documentreader.webclient.model.PhotoIdentResult.class);
                    classByDiscriminatorValue.put(
                        "SecurityFeatureResult",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    classByDiscriminatorValue.put(
                        "AuthenticityCheckResult_List_inner",
                        com.regula.documentreader.webclient.model.AuthenticityCheckResultListInner
                            .class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "Type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.AuthenticityResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.AuthenticityResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.AuthenticityResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "AuthenticityResult",
                        com.regula.documentreader.webclient.model.AuthenticityResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.ByteArrayResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.ByteArrayResult>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.ByteArrayResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "ByteArrayResult",
                        com.regula.documentreader.webclient.model.ByteArrayResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.ChosenDocumentTypeResult.class,
                new TypeSelector<
                    com.regula.documentreader.webclient.model.ChosenDocumentTypeResult>() {
                  @Override
                  public Class<
                          ? extends
                              com.regula.documentreader.webclient.model.ChosenDocumentTypeResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "ChosenDocumentTypeResult",
                        com.regula.documentreader.webclient.model.ChosenDocumentTypeResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.ContainerListListInner.class,
                new TypeSelector<
                    com.regula.documentreader.webclient.model.ContainerListListInner>() {
                  @Override
                  public Class<
                          ? extends
                              com.regula.documentreader.webclient.model.ContainerListListInner>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "1", com.regula.documentreader.webclient.model.DocumentImageResult.class);
                    classByDiscriminatorValue.put(
                        "101",
                        com.regula.documentreader.webclient.model.DocumentBinaryInfoResult.class);
                    classByDiscriminatorValue.put(
                        "102", com.regula.documentreader.webclient.model.RFIDTextDataResult.class);
                    classByDiscriminatorValue.put(
                        "103", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "104",
                        com.regula.documentreader.webclient.model.DocumentBinaryInfoResult.class);
                    classByDiscriminatorValue.put(
                        "105",
                        com.regula.documentreader.webclient.model.RFIDGraphicsInfoResult.class);
                    classByDiscriminatorValue.put(
                        "109", com.regula.documentreader.webclient.model.ByteArrayResult.class);
                    classByDiscriminatorValue.put(
                        "15",
                        com.regula.documentreader.webclient.model.LexicalAnalysisResult.class);
                    classByDiscriminatorValue.put(
                        "16", com.regula.documentreader.webclient.model.DocumentImageResult.class);
                    classByDiscriminatorValue.put(
                        "17", com.regula.documentreader.webclient.model.TextDataResult.class);
                    classByDiscriminatorValue.put(
                        "18", com.regula.documentreader.webclient.model.TextDataResult.class);
                    classByDiscriminatorValue.put(
                        "19", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "20", com.regula.documentreader.webclient.model.AuthenticityResult.class);
                    classByDiscriminatorValue.put(
                        "26", com.regula.documentreader.webclient.model.TextDataResult.class);
                    classByDiscriminatorValue.put(
                        "3", com.regula.documentreader.webclient.model.TextDataResult.class);
                    classByDiscriminatorValue.put(
                        "30", com.regula.documentreader.webclient.model.ImageQualityResult.class);
                    classByDiscriminatorValue.put(
                        "32", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "33", com.regula.documentreader.webclient.model.StatusResult.class);
                    classByDiscriminatorValue.put(
                        "34", com.regula.documentreader.webclient.model.AuthenticityResult.class);
                    classByDiscriminatorValue.put(
                        "35", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "36", com.regula.documentreader.webclient.model.TextResult.class);
                    classByDiscriminatorValue.put(
                        "37", com.regula.documentreader.webclient.model.ImagesResult.class);
                    classByDiscriminatorValue.put(
                        "38", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "39", com.regula.documentreader.webclient.model.AuthenticityResult.class);
                    classByDiscriminatorValue.put(
                        "49", com.regula.documentreader.webclient.model.EncryptedRCLResult.class);
                    classByDiscriminatorValue.put(
                        "5", com.regula.documentreader.webclient.model.DocBarCodeInfo.class);
                    classByDiscriminatorValue.put(
                        "50", com.regula.documentreader.webclient.model.LicenseResult.class);
                    classByDiscriminatorValue.put(
                        "6", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "61", com.regula.documentreader.webclient.model.MRZPositionResult.class);
                    classByDiscriminatorValue.put(
                        "62",
                        com.regula.documentreader.webclient.model.DocumentPositionResult.class);
                    classByDiscriminatorValue.put(
                        "7", com.regula.documentreader.webclient.model.MRZTestQualityResult.class);
                    classByDiscriminatorValue.put(
                        "8",
                        com.regula.documentreader.webclient.model.DocumentTypesCandidatesResult
                            .class);
                    classByDiscriminatorValue.put(
                        "85",
                        com.regula.documentreader.webclient.model.DocumentPositionResult.class);
                    classByDiscriminatorValue.put(
                        "87", com.regula.documentreader.webclient.model.MRZDetectorResult.class);
                    classByDiscriminatorValue.put(
                        "9",
                        com.regula.documentreader.webclient.model.ChosenDocumentTypeResult.class);
                    classByDiscriminatorValue.put(
                        "97", com.regula.documentreader.webclient.model.FaceDetectionResult.class);
                    classByDiscriminatorValue.put(
                        "AuthenticityResult",
                        com.regula.documentreader.webclient.model.AuthenticityResult.class);
                    classByDiscriminatorValue.put(
                        "ByteArrayResult",
                        com.regula.documentreader.webclient.model.ByteArrayResult.class);
                    classByDiscriminatorValue.put(
                        "ChosenDocumentTypeResult",
                        com.regula.documentreader.webclient.model.ChosenDocumentTypeResult.class);
                    classByDiscriminatorValue.put(
                        "DocBarCodeInfo",
                        com.regula.documentreader.webclient.model.DocBarCodeInfo.class);
                    classByDiscriminatorValue.put(
                        "DocumentBinaryInfoResult",
                        com.regula.documentreader.webclient.model.DocumentBinaryInfoResult.class);
                    classByDiscriminatorValue.put(
                        "DocumentImageResult",
                        com.regula.documentreader.webclient.model.DocumentImageResult.class);
                    classByDiscriminatorValue.put(
                        "DocumentPositionResult",
                        com.regula.documentreader.webclient.model.DocumentPositionResult.class);
                    classByDiscriminatorValue.put(
                        "DocumentTypesCandidatesResult",
                        com.regula.documentreader.webclient.model.DocumentTypesCandidatesResult
                            .class);
                    classByDiscriminatorValue.put(
                        "EncryptedRCLResult",
                        com.regula.documentreader.webclient.model.EncryptedRCLResult.class);
                    classByDiscriminatorValue.put(
                        "FaceDetectionResult",
                        com.regula.documentreader.webclient.model.FaceDetectionResult.class);
                    classByDiscriminatorValue.put(
                        "GraphicsResult",
                        com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "ImageQualityResult",
                        com.regula.documentreader.webclient.model.ImageQualityResult.class);
                    classByDiscriminatorValue.put(
                        "ImagesResult",
                        com.regula.documentreader.webclient.model.ImagesResult.class);
                    classByDiscriminatorValue.put(
                        "LexicalAnalysisResult",
                        com.regula.documentreader.webclient.model.LexicalAnalysisResult.class);
                    classByDiscriminatorValue.put(
                        "LicenseResult",
                        com.regula.documentreader.webclient.model.LicenseResult.class);
                    classByDiscriminatorValue.put(
                        "MRZDetectorResult",
                        com.regula.documentreader.webclient.model.MRZDetectorResult.class);
                    classByDiscriminatorValue.put(
                        "MRZPositionResult",
                        com.regula.documentreader.webclient.model.MRZPositionResult.class);
                    classByDiscriminatorValue.put(
                        "MRZTestQualityResult",
                        com.regula.documentreader.webclient.model.MRZTestQualityResult.class);
                    classByDiscriminatorValue.put(
                        "RFIDGraphicsInfoResult",
                        com.regula.documentreader.webclient.model.RFIDGraphicsInfoResult.class);
                    classByDiscriminatorValue.put(
                        "RFIDTextDataResult",
                        com.regula.documentreader.webclient.model.RFIDTextDataResult.class);
                    classByDiscriminatorValue.put(
                        "StatusResult",
                        com.regula.documentreader.webclient.model.StatusResult.class);
                    classByDiscriminatorValue.put(
                        "TextDataResult",
                        com.regula.documentreader.webclient.model.TextDataResult.class);
                    classByDiscriminatorValue.put(
                        "TextResult", com.regula.documentreader.webclient.model.TextResult.class);
                    classByDiscriminatorValue.put(
                        "ContainerList_List_inner",
                        com.regula.documentreader.webclient.model.ContainerListListInner.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.DocBarCodeInfo.class,
                new TypeSelector<com.regula.documentreader.webclient.model.DocBarCodeInfo>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.DocBarCodeInfo>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "DocBarCodeInfo",
                        com.regula.documentreader.webclient.model.DocBarCodeInfo.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.DocumentBinaryInfoResult.class,
                new TypeSelector<
                    com.regula.documentreader.webclient.model.DocumentBinaryInfoResult>() {
                  @Override
                  public Class<
                          ? extends
                              com.regula.documentreader.webclient.model.DocumentBinaryInfoResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "DocumentBinaryInfoResult",
                        com.regula.documentreader.webclient.model.DocumentBinaryInfoResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.DocumentImageResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.DocumentImageResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.DocumentImageResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "DocumentImageResult",
                        com.regula.documentreader.webclient.model.DocumentImageResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.DocumentPositionResult.class,
                new TypeSelector<
                    com.regula.documentreader.webclient.model.DocumentPositionResult>() {
                  @Override
                  public Class<
                          ? extends
                              com.regula.documentreader.webclient.model.DocumentPositionResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "DocumentPositionResult",
                        com.regula.documentreader.webclient.model.DocumentPositionResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.DocumentTypesCandidatesResult.class,
                new TypeSelector<
                    com.regula.documentreader.webclient.model.DocumentTypesCandidatesResult>() {
                  @Override
                  public Class<
                          ? extends
                              com.regula.documentreader.webclient.model
                                  .DocumentTypesCandidatesResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "DocumentTypesCandidatesResult",
                        com.regula.documentreader.webclient.model.DocumentTypesCandidatesResult
                            .class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.EncryptedRCLResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.EncryptedRCLResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.EncryptedRCLResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "EncryptedRCLResult",
                        com.regula.documentreader.webclient.model.EncryptedRCLResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.FaceDetectionResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.FaceDetectionResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.FaceDetectionResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "FaceDetectionResult",
                        com.regula.documentreader.webclient.model.FaceDetectionResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.FiberResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.FiberResult>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.FiberResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "FiberResult", com.regula.documentreader.webclient.model.FiberResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "Type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.GraphicsResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.GraphicsResult>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.GraphicsResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "GraphicsResult",
                        com.regula.documentreader.webclient.model.GraphicsResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.IdentResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.IdentResult>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.IdentResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "IdentResult", com.regula.documentreader.webclient.model.IdentResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "Type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.ImageQualityResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.ImageQualityResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.ImageQualityResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "ImageQualityResult",
                        com.regula.documentreader.webclient.model.ImageQualityResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.ImagesResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.ImagesResult>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.ImagesResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "ImagesResult",
                        com.regula.documentreader.webclient.model.ImagesResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.LexicalAnalysisResult.class,
                new TypeSelector<
                    com.regula.documentreader.webclient.model.LexicalAnalysisResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.LexicalAnalysisResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "LexicalAnalysisResult",
                        com.regula.documentreader.webclient.model.LexicalAnalysisResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.LicenseResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.LicenseResult>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.LicenseResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "LicenseResult",
                        com.regula.documentreader.webclient.model.LicenseResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.MRZDetectorResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.MRZDetectorResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.MRZDetectorResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "MRZDetectorResult",
                        com.regula.documentreader.webclient.model.MRZDetectorResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.MRZPositionResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.MRZPositionResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.MRZPositionResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "MRZPositionResult",
                        com.regula.documentreader.webclient.model.MRZPositionResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.MRZTestQualityResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.MRZTestQualityResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.MRZTestQualityResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "MRZTestQualityResult",
                        com.regula.documentreader.webclient.model.MRZTestQualityResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.OCRSecurityTextResult.class,
                new TypeSelector<
                    com.regula.documentreader.webclient.model.OCRSecurityTextResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.OCRSecurityTextResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "OCRSecurityTextResult",
                        com.regula.documentreader.webclient.model.OCRSecurityTextResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "Type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.PhotoIdentResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.PhotoIdentResult>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.PhotoIdentResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "PhotoIdentResult",
                        com.regula.documentreader.webclient.model.PhotoIdentResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "Type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.RFIDGraphicsInfoResult.class,
                new TypeSelector<
                    com.regula.documentreader.webclient.model.RFIDGraphicsInfoResult>() {
                  @Override
                  public Class<
                          ? extends
                              com.regula.documentreader.webclient.model.RFIDGraphicsInfoResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "RFIDGraphicsInfoResult",
                        com.regula.documentreader.webclient.model.RFIDGraphicsInfoResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.RFIDTextDataResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.RFIDTextDataResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.RFIDTextDataResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "RFIDTextDataResult",
                        com.regula.documentreader.webclient.model.RFIDTextDataResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.ResultItem.class,
                new TypeSelector<com.regula.documentreader.webclient.model.ResultItem>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.ResultItem>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "1", com.regula.documentreader.webclient.model.DocumentImageResult.class);
                    classByDiscriminatorValue.put(
                        "101",
                        com.regula.documentreader.webclient.model.DocumentBinaryInfoResult.class);
                    classByDiscriminatorValue.put(
                        "102", com.regula.documentreader.webclient.model.RFIDTextDataResult.class);
                    classByDiscriminatorValue.put(
                        "103", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "104",
                        com.regula.documentreader.webclient.model.DocumentBinaryInfoResult.class);
                    classByDiscriminatorValue.put(
                        "105",
                        com.regula.documentreader.webclient.model.RFIDGraphicsInfoResult.class);
                    classByDiscriminatorValue.put(
                        "109", com.regula.documentreader.webclient.model.ByteArrayResult.class);
                    classByDiscriminatorValue.put(
                        "15",
                        com.regula.documentreader.webclient.model.LexicalAnalysisResult.class);
                    classByDiscriminatorValue.put(
                        "16", com.regula.documentreader.webclient.model.DocumentImageResult.class);
                    classByDiscriminatorValue.put(
                        "17", com.regula.documentreader.webclient.model.TextDataResult.class);
                    classByDiscriminatorValue.put(
                        "18", com.regula.documentreader.webclient.model.TextDataResult.class);
                    classByDiscriminatorValue.put(
                        "19", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "20", com.regula.documentreader.webclient.model.AuthenticityResult.class);
                    classByDiscriminatorValue.put(
                        "26", com.regula.documentreader.webclient.model.TextDataResult.class);
                    classByDiscriminatorValue.put(
                        "3", com.regula.documentreader.webclient.model.TextDataResult.class);
                    classByDiscriminatorValue.put(
                        "30", com.regula.documentreader.webclient.model.ImageQualityResult.class);
                    classByDiscriminatorValue.put(
                        "32", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "33", com.regula.documentreader.webclient.model.StatusResult.class);
                    classByDiscriminatorValue.put(
                        "34", com.regula.documentreader.webclient.model.AuthenticityResult.class);
                    classByDiscriminatorValue.put(
                        "35", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "36", com.regula.documentreader.webclient.model.TextResult.class);
                    classByDiscriminatorValue.put(
                        "37", com.regula.documentreader.webclient.model.ImagesResult.class);
                    classByDiscriminatorValue.put(
                        "38", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "39", com.regula.documentreader.webclient.model.AuthenticityResult.class);
                    classByDiscriminatorValue.put(
                        "49", com.regula.documentreader.webclient.model.EncryptedRCLResult.class);
                    classByDiscriminatorValue.put(
                        "5", com.regula.documentreader.webclient.model.DocBarCodeInfo.class);
                    classByDiscriminatorValue.put(
                        "50", com.regula.documentreader.webclient.model.LicenseResult.class);
                    classByDiscriminatorValue.put(
                        "6", com.regula.documentreader.webclient.model.GraphicsResult.class);
                    classByDiscriminatorValue.put(
                        "61", com.regula.documentreader.webclient.model.MRZPositionResult.class);
                    classByDiscriminatorValue.put(
                        "62",
                        com.regula.documentreader.webclient.model.DocumentPositionResult.class);
                    classByDiscriminatorValue.put(
                        "7", com.regula.documentreader.webclient.model.MRZTestQualityResult.class);
                    classByDiscriminatorValue.put(
                        "8",
                        com.regula.documentreader.webclient.model.DocumentTypesCandidatesResult
                            .class);
                    classByDiscriminatorValue.put(
                        "85",
                        com.regula.documentreader.webclient.model.DocumentPositionResult.class);
                    classByDiscriminatorValue.put(
                        "87", com.regula.documentreader.webclient.model.MRZDetectorResult.class);
                    classByDiscriminatorValue.put(
                        "9",
                        com.regula.documentreader.webclient.model.ChosenDocumentTypeResult.class);
                    classByDiscriminatorValue.put(
                        "97", com.regula.documentreader.webclient.model.FaceDetectionResult.class);
                    classByDiscriminatorValue.put(
                        "ResultItem", com.regula.documentreader.webclient.model.ResultItem.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.SecurityFeatureResult.class,
                new TypeSelector<
                    com.regula.documentreader.webclient.model.SecurityFeatureResult>() {
                  @Override
                  public Class<
                          ? extends com.regula.documentreader.webclient.model.SecurityFeatureResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "SecurityFeatureResult",
                        com.regula.documentreader.webclient.model.SecurityFeatureResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue, getDiscriminatorValue(readElement, "Type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.StatusResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.StatusResult>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.StatusResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "StatusResult",
                        com.regula.documentreader.webclient.model.StatusResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.TextDataResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.TextDataResult>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.TextDataResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "TextDataResult",
                        com.regula.documentreader.webclient.model.TextDataResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                })
            .registerTypeSelector(
                com.regula.documentreader.webclient.model.TextResult.class,
                new TypeSelector<com.regula.documentreader.webclient.model.TextResult>() {
                  @Override
                  public Class<? extends com.regula.documentreader.webclient.model.TextResult>
                      getClassForElement(JsonElement readElement) {
                    Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                    classByDiscriminatorValue.put(
                        "TextResult", com.regula.documentreader.webclient.model.TextResult.class);
                    return getClassByDiscriminator(
                        classByDiscriminatorValue,
                        getDiscriminatorValue(readElement, "result_type"));
                  }
                });
    GsonBuilder builder = fireBuilder.createGsonBuilder();
    return builder;
  }

  private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
    JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
    if (null == element) {
      throw new IllegalArgumentException(
          "missing discriminator field: <" + discriminatorField + ">");
    }
    return element.getAsString();
  }

  /**
   * Returns the Java class that implements the OpenAPI schema for the specified discriminator
   * value.
   *
   * @param classByDiscriminatorValue The map of discriminator values to Java classes.
   * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
   * @return The Java class that implements the OpenAPI schema
   */
  private static Class getClassByDiscriminator(
      Map classByDiscriminatorValue, String discriminatorValue) {
    Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
    if (null == clazz) {
      throw new IllegalArgumentException(
          "cannot determine model class of name: <" + discriminatorValue + ">");
    }
    return clazz;
  }

  static {
    GsonBuilder gsonBuilder = createGson();
    gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
    gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
    gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
    gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
    gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.AreaArray.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.AreaContainer.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.AuthParams.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.AuthenticityCheckList
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.AuthenticityCheckListItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.AuthenticityCheckResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.AuthenticityCheckResultListInner
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.AuthenticityResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.BcPDF417INFO.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.BcROIDETECT.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.BinaryData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ByteArrayItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ByteArrayResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.CandidatesListItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.CertificateData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ChosenDocumentType
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ChosenDocumentTypeResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ContainerList.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ContainerListListInner
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.CrossSourceValueComparison
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DataModule.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DetailsOptical.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DetailsRFID.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DeviceInfo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocBarCodeInfo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocBarCodeInfoFieldsList
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocBarCodeInfoItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocGraphicsInfoItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocVisualExtendedField
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocVisualExtendedFieldItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocVisualExtendedInfo
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocVisualExtendedInfoItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocumentBinaryInfoResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocumentImage.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocumentImageResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocumentPosition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocumentPositionItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocumentPositionResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocumentTypesCandidates
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocumentTypesCandidatesList
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocumentTypesCandidatesResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.DocumentsDatabase.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.EncryptedRCLItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.EncryptedRCLResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ErrorCoordinates.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.FDSIDList.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.FaceApi.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.FaceApiSearch.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.FaceDetection.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.FaceDetectionItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.FaceDetectionResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.FaceItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.FiberItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.FiberResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.FieldItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.FileImage.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.GetTransactionsByTagResponse
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.GraphData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.GraphicField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.GraphicFieldsList.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.GraphicsResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.Healthcheck.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.HealthcheckDocumentsDatabase
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.IdentItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.IdentResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImageData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImageQA.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImageQualityCheck.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImageQualityCheckList
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImageQualityCheckListItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImageQualityResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImageTransactionData
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.Images.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImagesAvailableSource
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImagesField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImagesFieldValue.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImagesItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ImagesResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.InData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.InDataTransactionImagesFieldValue
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.InDataVideo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.LexicalAnalysisResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.LicenseItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.LicenseResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ListTransactionsByTagResponse
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ListVerifiedFields
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ListVerifiedFieldsItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.LivenessParams.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.MRZDetectorResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.MRZPositionResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.MRZRowsItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.MRZTestQuality.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.MRZTestQualityItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.MRZTestQualityResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.MrzPosition.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.MrzPositionItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.OCRSecurityTextItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.OCRSecurityTextResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.OneCandidate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.OneCandidateItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.OriginalSymbol.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.OutData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.OutDataTransactionImagesFieldValue
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.PArrayField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ParsedData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.PerDocumentConfig.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.PhotoIdentItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.PhotoIdentResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.Point.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.PointArray.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.PointsContainer.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ProcessParams.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ProcessParamsRfid.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ProcessRequest.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ProcessRequestImage
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ProcessResponse.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ProcessSystemInfo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RFIDDocVisualExtendedField
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RFIDDocVisualExtendedFieldItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RFIDDocVisualExtendedInfo
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RFIDDocVisualExtendedInfoItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RFIDGraphicsInfoResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RFIDTextDataResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RawImageContainerItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RawImageContainerList
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RectangleCoordinates
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ResultMRZDetector.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.ResultMRZDetectorItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidAccessControlInfo
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidAccessKey.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidApplication.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidAttributeData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidAttributeName.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidCardPropertiesExt
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidCertificateEx.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidDG1.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidDataFile.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidDistinguishedName
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidOrigin.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidPkiExtension.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidRawData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidSecurityObject
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidSessionData.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidSignerInfoEx.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidTerminal.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.RfidValidity.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.SecurityFeatureItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.SecurityFeatureResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.SecurityObjectCertificates
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.SourceValidity.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.Status.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.StatusItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.StatusResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.StringItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.StringRecognitionResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.Symbol.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.SymbolCandidate.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.SymbolEstimationItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.SymbolRecognitionResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TDocBinaryInfo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TDocBinaryInfoItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TOriginalRFIDGraphicsInfo
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TOriginalRFIDGraphicsInfoItem
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.Text.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TextAvailableSource
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TextDataResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TextField.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TextFieldValue.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TextItem.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TextResult.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TransactionImage.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TransactionInfo.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TransactionProcessGetResponse
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TransactionProcessRequest
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TransactionProcessResult
            .CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TrfFtBytes.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.TrfFtString.CustomTypeAdapterFactory());
    gsonBuilder.registerTypeAdapterFactory(
        new com.regula.documentreader.webclient.model.VerifiedFieldMap.CustomTypeAdapterFactory());
    gson = gsonBuilder.create();
  }

  /**
   * Get Gson.
   *
   * @return Gson
   */
  public static Gson getGson() {
    return gson;
  }

  /**
   * Set Gson.
   *
   * @param gson Gson
   */
  public static void setGson(Gson gson) {
    JSON.gson = gson;
  }

  public static void setLenientOnJson(boolean lenientOnJson) {
    isLenientOnJson = lenientOnJson;
  }

  /**
   * Serialize the given Java object into JSON string.
   *
   * @param obj Object
   * @return String representation of the JSON
   */
  public static String serialize(Object obj) {
    return gson.toJson(obj);
  }

  /**
   * Deserialize the given JSON string to Java object.
   *
   * @param <T> Type
   * @param body The JSON string
   * @param returnType The type to deserialize into
   * @return The deserialized Java object
   */
  @SuppressWarnings("unchecked")
  public static <T> T deserialize(String body, Type returnType) {
    try {
      if (isLenientOnJson) {
        JsonReader jsonReader = new JsonReader(new StringReader(body));
        // see
        // https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
        jsonReader.setLenient(true);
        return gson.fromJson(jsonReader, returnType);
      } else {
        return gson.fromJson(body, returnType);
      }
    } catch (JsonParseException e) {
      // Fallback processing when failed to parse JSON form response body:
      // return the response body string directly for the String return type;
      if (returnType.equals(String.class)) {
        return (T) body;
      } else {
        throw (e);
      }
    }
  }

  /** Gson TypeAdapter for Byte Array type */
  public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

    @Override
    public void write(JsonWriter out, byte[] value) throws IOException {
      if (value == null) {
        out.nullValue();
      } else {
        out.value(ByteString.of(value).base64());
      }
    }

    @Override
    public byte[] read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String bytesAsBase64 = in.nextString();
          ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
          return byteString.toByteArray();
      }
    }
  }

  /** Gson TypeAdapter for JSR310 OffsetDateTime type */
  public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

    private DateTimeFormatter formatter;

    public OffsetDateTimeTypeAdapter() {
      this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
    }

    public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
      this.formatter = formatter;
    }

    public void setFormat(DateTimeFormatter dateFormat) {
      this.formatter = dateFormat;
    }

    @Override
    public void write(JsonWriter out, OffsetDateTime date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        out.value(formatter.format(date));
      }
    }

    @Override
    public OffsetDateTime read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String date = in.nextString();
          if (date.endsWith("+0000")) {
            date = date.substring(0, date.length() - 5) + "Z";
          }
          return OffsetDateTime.parse(date, formatter);
      }
    }
  }

  /** Gson TypeAdapter for JSR310 LocalDate type */
  public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

    private DateTimeFormatter formatter;

    public LocalDateTypeAdapter() {
      this(DateTimeFormatter.ISO_LOCAL_DATE);
    }

    public LocalDateTypeAdapter(DateTimeFormatter formatter) {
      this.formatter = formatter;
    }

    public void setFormat(DateTimeFormatter dateFormat) {
      this.formatter = dateFormat;
    }

    @Override
    public void write(JsonWriter out, LocalDate date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        out.value(formatter.format(date));
      }
    }

    @Override
    public LocalDate read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String date = in.nextString();
          return LocalDate.parse(date, formatter);
      }
    }
  }

  public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
    offsetDateTimeTypeAdapter.setFormat(dateFormat);
  }

  public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
    localDateTypeAdapter.setFormat(dateFormat);
  }

  /**
   * Gson TypeAdapter for java.sql.Date type If the dateFormat is null, a simple "yyyy-MM-dd" format
   * will be used (more efficient than SimpleDateFormat).
   */
  public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

    private DateFormat dateFormat;

    public SqlDateTypeAdapter() {}

    public SqlDateTypeAdapter(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    public void setFormat(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    @Override
    public void write(JsonWriter out, java.sql.Date date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        String value;
        if (dateFormat != null) {
          value = dateFormat.format(date);
        } else {
          value = date.toString();
        }
        out.value(value);
      }
    }

    @Override
    public java.sql.Date read(JsonReader in) throws IOException {
      switch (in.peek()) {
        case NULL:
          in.nextNull();
          return null;
        default:
          String date = in.nextString();
          try {
            if (dateFormat != null) {
              return new java.sql.Date(dateFormat.parse(date).getTime());
            }
            return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
          } catch (ParseException e) {
            throw new JsonParseException(e);
          }
      }
    }
  }

  /**
   * Gson TypeAdapter for java.util.Date type If the dateFormat is null, ISO8601Utils will be used.
   */
  public static class DateTypeAdapter extends TypeAdapter<Date> {

    private DateFormat dateFormat;

    public DateTypeAdapter() {}

    public DateTypeAdapter(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    public void setFormat(DateFormat dateFormat) {
      this.dateFormat = dateFormat;
    }

    @Override
    public void write(JsonWriter out, Date date) throws IOException {
      if (date == null) {
        out.nullValue();
      } else {
        String value;
        if (dateFormat != null) {
          value = dateFormat.format(date);
        } else {
          value = ISO8601Utils.format(date, true);
        }
        out.value(value);
      }
    }

    @Override
    public Date read(JsonReader in) throws IOException {
      try {
        switch (in.peek()) {
          case NULL:
            in.nextNull();
            return null;
          default:
            String date = in.nextString();
            try {
              if (dateFormat != null) {
                return dateFormat.parse(date);
              }
              return ISO8601Utils.parse(date, new ParsePosition(0));
            } catch (ParseException e) {
              throw new JsonParseException(e);
            }
        }
      } catch (IllegalArgumentException e) {
        throw new JsonParseException(e);
      }
    }
  }

  public static void setDateFormat(DateFormat dateFormat) {
    dateTypeAdapter.setFormat(dateFormat);
  }

  public static void setSqlDateFormat(DateFormat dateFormat) {
    sqlDateTypeAdapter.setFormat(dateFormat);
  }
}
