/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 7.4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.regula.documentreader.webclient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;
    import org.threeten.bp.LocalDate;
    import org.threeten.bp.OffsetDateTime;
    import org.threeten.bp.format.DateTimeFormatter;

    import com.regula.documentreader.webclient.model.*;
import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

public class JSON {
private Gson gson;
private boolean isLenientOnJson = false;
private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
private ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

  
  
  
  
  
  
  
       public static Map<String, Class> childOfAuthenticityResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfAuthenticityResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("36", TextResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfAuthenticityResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfAuthenticityResultByDiscriminatorValue.put("AuthenticityResult", AuthenticityResult.class);
       }
  
  
  
  
  
  
  
  
       public static Map<String, Class> childOfByteArrayResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfByteArrayResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("36", TextResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfByteArrayResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfByteArrayResultByDiscriminatorValue.put("ByteArrayResult", ByteArrayResult.class);
       }
  
  
  
  
       public static Map<String, Class> childOfChosenDocumentTypeResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("36", TextResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfChosenDocumentTypeResultByDiscriminatorValue.put("ChosenDocumentTypeResult", ChosenDocumentTypeResult.class);
       }
  
  
  
  
  
  
  
  
  
       public static Map<String, Class> childOfDocBarCodeInfoByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfDocBarCodeInfoByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("102", TextDataResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("17", TextDataResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("18", TextDataResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("26", TextDataResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("3", TextDataResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("33", StatusResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("36", TextResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("37", ImagesResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("50", LicenseResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfDocBarCodeInfoByDiscriminatorValue.put("DocBarCodeInfo", DocBarCodeInfo.class);
       }
  
  
  
  
  
  
  
  
  
  
       public static Map<String, Class> childOfDocumentBinaryInfoResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("36", TextResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfDocumentBinaryInfoResultByDiscriminatorValue.put("DocumentBinaryInfoResult", DocumentBinaryInfoResult.class);
       }
  
  
  
  
       public static Map<String, Class> childOfDocumentImageResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfDocumentImageResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("36", TextResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfDocumentImageResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfDocumentImageResultByDiscriminatorValue.put("DocumentImageResult", DocumentImageResult.class);
       }
  
  
  
  
       public static Map<String, Class> childOfDocumentPositionResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfDocumentPositionResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("36", TextResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfDocumentPositionResultByDiscriminatorValue.put("DocumentPositionResult", DocumentPositionResult.class);
       }
  
  
  
  
  
       public static Map<String, Class> childOfDocumentTypesCandidatesResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("36", TextResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfDocumentTypesCandidatesResultByDiscriminatorValue.put("DocumentTypesCandidatesResult", DocumentTypesCandidatesResult.class);
       }
  
  
  
  
       public static Map<String, Class> childOfEncryptedRCLResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfEncryptedRCLResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("36", TextResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfEncryptedRCLResultByDiscriminatorValue.put("EncryptedRCLResult", EncryptedRCLResult.class);
       }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
       public static Map<String, Class> childOfGraphicsResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfGraphicsResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("36", TextResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfGraphicsResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfGraphicsResultByDiscriminatorValue.put("GraphicsResult", GraphicsResult.class);
       }
  
  
  
  
  
  
  
  
  
  
  
       public static Map<String, Class> childOfImageQualityResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfImageQualityResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("36", TextResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfImageQualityResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfImageQualityResultByDiscriminatorValue.put("ImageQualityResult", ImageQualityResult.class);
       }
  
  
  
  
  
  
  
  
       public static Map<String, Class> childOfImagesResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfImagesResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfImagesResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfImagesResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfImagesResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfImagesResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfImagesResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfImagesResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfImagesResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfImagesResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfImagesResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfImagesResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfImagesResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfImagesResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfImagesResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfImagesResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfImagesResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfImagesResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfImagesResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfImagesResultByDiscriminatorValue.put("36", TextResult.class);
           childOfImagesResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfImagesResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfImagesResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfImagesResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfImagesResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfImagesResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfImagesResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfImagesResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfImagesResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfImagesResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfImagesResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfImagesResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfImagesResultByDiscriminatorValue.put("ImagesResult", ImagesResult.class);
       }
  
  
  
  
  
  
  
       public static Map<String, Class> childOfLexicalAnalysisResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfLexicalAnalysisResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("36", TextResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfLexicalAnalysisResultByDiscriminatorValue.put("LexicalAnalysisResult", LexicalAnalysisResult.class);
       }
  
  
  
       public static Map<String, Class> childOfLicenseResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfLicenseResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfLicenseResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfLicenseResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfLicenseResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfLicenseResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfLicenseResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfLicenseResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfLicenseResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfLicenseResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfLicenseResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfLicenseResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfLicenseResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfLicenseResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfLicenseResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfLicenseResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfLicenseResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfLicenseResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfLicenseResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfLicenseResultByDiscriminatorValue.put("36", TextResult.class);
           childOfLicenseResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfLicenseResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfLicenseResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfLicenseResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfLicenseResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfLicenseResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfLicenseResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfLicenseResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfLicenseResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfLicenseResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfLicenseResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfLicenseResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfLicenseResultByDiscriminatorValue.put("LicenseResult", LicenseResult.class);
       }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
       public static Map<String, Class> childOfResultItemByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfResultItemByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfResultItemByDiscriminatorValue.put("102", TextDataResult.class);
           childOfResultItemByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfResultItemByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfResultItemByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfResultItemByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfResultItemByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfResultItemByDiscriminatorValue.put("17", TextDataResult.class);
           childOfResultItemByDiscriminatorValue.put("18", TextDataResult.class);
           childOfResultItemByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfResultItemByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfResultItemByDiscriminatorValue.put("26", TextDataResult.class);
           childOfResultItemByDiscriminatorValue.put("3", TextDataResult.class);
           childOfResultItemByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfResultItemByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfResultItemByDiscriminatorValue.put("33", StatusResult.class);
           childOfResultItemByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfResultItemByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfResultItemByDiscriminatorValue.put("36", TextResult.class);
           childOfResultItemByDiscriminatorValue.put("37", ImagesResult.class);
           childOfResultItemByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfResultItemByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfResultItemByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfResultItemByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfResultItemByDiscriminatorValue.put("50", LicenseResult.class);
           childOfResultItemByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfResultItemByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfResultItemByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfResultItemByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfResultItemByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfResultItemByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfResultItemByDiscriminatorValue.put("AuthenticityResult", AuthenticityResult.class);
           childOfResultItemByDiscriminatorValue.put("ByteArrayResult", ByteArrayResult.class);
           childOfResultItemByDiscriminatorValue.put("ChosenDocumentTypeResult", ChosenDocumentTypeResult.class);
           childOfResultItemByDiscriminatorValue.put("DocBarCodeInfo", DocBarCodeInfo.class);
           childOfResultItemByDiscriminatorValue.put("DocumentBinaryInfoResult", DocumentBinaryInfoResult.class);
           childOfResultItemByDiscriminatorValue.put("DocumentImageResult", DocumentImageResult.class);
           childOfResultItemByDiscriminatorValue.put("DocumentPositionResult", DocumentPositionResult.class);
           childOfResultItemByDiscriminatorValue.put("DocumentTypesCandidatesResult", DocumentTypesCandidatesResult.class);
           childOfResultItemByDiscriminatorValue.put("EncryptedRCLResult", EncryptedRCLResult.class);
           childOfResultItemByDiscriminatorValue.put("GraphicsResult", GraphicsResult.class);
           childOfResultItemByDiscriminatorValue.put("ImageQualityResult", ImageQualityResult.class);
           childOfResultItemByDiscriminatorValue.put("ImagesResult", ImagesResult.class);
           childOfResultItemByDiscriminatorValue.put("LexicalAnalysisResult", LexicalAnalysisResult.class);
           childOfResultItemByDiscriminatorValue.put("LicenseResult", LicenseResult.class);
           childOfResultItemByDiscriminatorValue.put("StatusResult", StatusResult.class);
           childOfResultItemByDiscriminatorValue.put("TextDataResult", TextDataResult.class);
           childOfResultItemByDiscriminatorValue.put("TextResult", TextResult.class);
           childOfResultItemByDiscriminatorValue.put("ResultItem", ResultItem.class);
       }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
       public static Map<String, Class> childOfStatusResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfStatusResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfStatusResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfStatusResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfStatusResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfStatusResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfStatusResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfStatusResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfStatusResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfStatusResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfStatusResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfStatusResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfStatusResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfStatusResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfStatusResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfStatusResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfStatusResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfStatusResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfStatusResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfStatusResultByDiscriminatorValue.put("36", TextResult.class);
           childOfStatusResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfStatusResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfStatusResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfStatusResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfStatusResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfStatusResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfStatusResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfStatusResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfStatusResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfStatusResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfStatusResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfStatusResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfStatusResultByDiscriminatorValue.put("StatusResult", StatusResult.class);
       }
  
  
  
  
  
  
  
  
  
       public static Map<String, Class> childOfTextDataResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfTextDataResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfTextDataResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfTextDataResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfTextDataResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfTextDataResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfTextDataResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfTextDataResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfTextDataResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfTextDataResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfTextDataResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfTextDataResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfTextDataResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfTextDataResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfTextDataResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfTextDataResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfTextDataResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfTextDataResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfTextDataResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfTextDataResultByDiscriminatorValue.put("36", TextResult.class);
           childOfTextDataResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfTextDataResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfTextDataResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfTextDataResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfTextDataResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfTextDataResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfTextDataResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfTextDataResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfTextDataResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfTextDataResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfTextDataResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfTextDataResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfTextDataResultByDiscriminatorValue.put("TextDataResult", TextDataResult.class);
       }
  
  
  
  
  
       public static Map<String, Class> childOfTextResultByDiscriminatorValue = new HashMap<String, Class>();
       static {
           childOfTextResultByDiscriminatorValue.put("1", DocumentImageResult.class);
           childOfTextResultByDiscriminatorValue.put("102", TextDataResult.class);
           childOfTextResultByDiscriminatorValue.put("103", GraphicsResult.class);
           childOfTextResultByDiscriminatorValue.put("104", DocumentBinaryInfoResult.class);
           childOfTextResultByDiscriminatorValue.put("109", ByteArrayResult.class);
           childOfTextResultByDiscriminatorValue.put("15", LexicalAnalysisResult.class);
           childOfTextResultByDiscriminatorValue.put("16", DocumentImageResult.class);
           childOfTextResultByDiscriminatorValue.put("17", TextDataResult.class);
           childOfTextResultByDiscriminatorValue.put("18", TextDataResult.class);
           childOfTextResultByDiscriminatorValue.put("19", GraphicsResult.class);
           childOfTextResultByDiscriminatorValue.put("20", AuthenticityResult.class);
           childOfTextResultByDiscriminatorValue.put("26", TextDataResult.class);
           childOfTextResultByDiscriminatorValue.put("3", TextDataResult.class);
           childOfTextResultByDiscriminatorValue.put("30", ImageQualityResult.class);
           childOfTextResultByDiscriminatorValue.put("32", GraphicsResult.class);
           childOfTextResultByDiscriminatorValue.put("33", StatusResult.class);
           childOfTextResultByDiscriminatorValue.put("34", AuthenticityResult.class);
           childOfTextResultByDiscriminatorValue.put("35", GraphicsResult.class);
           childOfTextResultByDiscriminatorValue.put("36", TextResult.class);
           childOfTextResultByDiscriminatorValue.put("37", ImagesResult.class);
           childOfTextResultByDiscriminatorValue.put("38", GraphicsResult.class);
           childOfTextResultByDiscriminatorValue.put("39", AuthenticityResult.class);
           childOfTextResultByDiscriminatorValue.put("49", EncryptedRCLResult.class);
           childOfTextResultByDiscriminatorValue.put("5", DocBarCodeInfo.class);
           childOfTextResultByDiscriminatorValue.put("50", LicenseResult.class);
           childOfTextResultByDiscriminatorValue.put("6", GraphicsResult.class);
           childOfTextResultByDiscriminatorValue.put("61", DocumentPositionResult.class);
           childOfTextResultByDiscriminatorValue.put("62", DocumentPositionResult.class);
           childOfTextResultByDiscriminatorValue.put("8", DocumentTypesCandidatesResult.class);
           childOfTextResultByDiscriminatorValue.put("85", DocumentPositionResult.class);
           childOfTextResultByDiscriminatorValue.put("9", ChosenDocumentTypeResult.class);
           childOfTextResultByDiscriminatorValue.put("TextResult", TextResult.class);
       }
  
  
  
  
  
  
  
  
  
  
  
  

public static GsonBuilder createGson() {
GsonFireBuilder fireBuilder = new GsonFireBuilder()
            .registerTypeSelector(AuthenticityResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfAuthenticityResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(ByteArrayResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfByteArrayResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(ChosenDocumentTypeResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfChosenDocumentTypeResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(DocBarCodeInfo.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfDocBarCodeInfoByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(DocumentBinaryInfoResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfDocumentBinaryInfoResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(DocumentImageResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfDocumentImageResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(DocumentPositionResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfDocumentPositionResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(DocumentTypesCandidatesResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfDocumentTypesCandidatesResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(EncryptedRCLResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfEncryptedRCLResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(GraphicsResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfGraphicsResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(ImageQualityResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfImageQualityResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(ImagesResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfImagesResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(LexicalAnalysisResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfLexicalAnalysisResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(LicenseResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfLicenseResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(ResultItem.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfResultItemByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(StatusResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfStatusResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(TextDataResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfTextDataResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
            .registerTypeSelector(TextResult.class, new TypeSelector() {
            @Override
            public Class getClassForElement(JsonElement readElement) {
            return getClassByDiscriminator(childOfTextResultByDiscriminatorValue,
            getDiscriminatorValue(readElement, "result_type"));
            }
            })
;

// rewrite, to support default mappings
fireBuilder.registerTypeSelector(ResultItem.class, new TypeSelector() {
  @Override
  public Class getClassForElement(JsonElement readElement) {
    String result_type = getDiscriminatorValue(readElement, "result_type");
    Class clazz = childOfResultItemByDiscriminatorValue.get(result_type);
    if (clazz == null) {
      clazz = RawResultItem.class;
    }
    return clazz;
  }
});
fireBuilder.registerTypeSelector(AuthenticityCheckResultItem.class, new TypeSelector() {
  @Override
  public Class getClassForElement(JsonElement readElement) {
    String result_type = getDiscriminatorValue(readElement, "Type");
    Class clazz = childOfAuthenticityCheckResultItemByDiscriminatorValue.get(result_type);
    if (clazz == null) {
      clazz = RawAuthenticityCheckResultItem.class;
    }
    return clazz;
  }
});

GsonBuilder builder = fireBuilder.createGsonBuilder();
return builder;
}

private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
if (null == element) {
throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
}
return element.getAsString();
}

/**
* Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
*
* @param classByDiscriminatorValue The map of discriminator values to Java classes.
* @param discriminatorValue The value of the OpenAPI discriminator in the input data.
* @return The Java class that implements the OpenAPI schema
*/
private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
if (null == clazz) {
throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
}
return clazz;
}

public JSON() {
gson = createGson()
.registerTypeAdapter(Date.class, dateTypeAdapter)
.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)
    .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)
    .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)
.registerTypeAdapter(byte[].class, byteArrayAdapter)
.create();
}

/**
* Get Gson.
*
* @return Gson
*/
public Gson getGson() {
return gson;
}

/**
* Set Gson.
*
* @param gson Gson
* @return JSON
*/
public JSON setGson(Gson gson) {
this.gson = gson;
return this;
}

public JSON setLenientOnJson(boolean lenientOnJson) {
isLenientOnJson = lenientOnJson;
return this;
}

/**
* Serialize the given Java object into JSON string.
*
* @param obj Object
* @return String representation of the JSON
*/
public String serialize(Object obj) {
return gson.toJson(obj);
}

/**
* Deserialize the given JSON string to Java object.
*
* @param <T>        Type
    * @param body       The JSON string
    * @param returnType The type to deserialize into
    * @return The deserialized Java object
    */
    @SuppressWarnings("unchecked")
    public <T> T deserialize(String body, Type returnType) {
        try {
        if (isLenientOnJson) {
        JsonReader jsonReader = new JsonReader(new StringReader(body));
        // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
        jsonReader.setLenient(true);
        return gson.fromJson(jsonReader, returnType);
        } else {
        return gson.fromJson(body, returnType);
        }
        } catch (JsonParseException e) {
        // Fallback processing when failed to parse JSON form response body:
        // return the response body string directly for the String return type;
        if (returnType.equals(String.class)) {
        return (T) body;
        } else {
        throw (e);
        }
        }
        }

        /**
        * Gson TypeAdapter for Byte Array type
        */
        public class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
        if (value == null) {
        out.nullValue();
        } else {
        out.value(ByteString.of(value).base64());
        }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
        switch (in.peek()) {
        case NULL:
        in.nextNull();
        return null;
        default:
        String bytesAsBase64 = in.nextString();
        ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
        return byteString.toByteArray();
        }
        }
        }

            /**
            * Gson TypeAdapter for JSR310 OffsetDateTime type
            */
            public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

            private DateTimeFormatter formatter;

            public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
            }

            public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
            }

            public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
            }

            @Override
            public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
            out.nullValue();
            } else {
            out.value(formatter.format(date));
            }
            }

            @Override
            public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
            case NULL:
            in.nextNull();
            return null;
            default:
            String date = in.nextString();
            if (date.endsWith("+0000")) {
            date = date.substring(0, date.length()-5) + "Z";
            }
            if (date.contains(" ")) {
            date = date.replace(' ', 'T');
            }
            return OffsetDateTime.parse(date, formatter);
            }
            }
            }

            /**
            * Gson TypeAdapter for JSR310 LocalDate type
            */
            public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

            private DateTimeFormatter formatter;

            public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
            }

            public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
            }

            public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
            }

            @Override
            public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
            out.nullValue();
            } else {
            out.value(formatter.format(date));
            }
            }

            @Override
            public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
            case NULL:
            in.nextNull();
            return null;
            default:
            String date = in.nextString();
            return LocalDate.parse(date, formatter);
            }
            }
            }

            public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
            offsetDateTimeTypeAdapter.setFormat(dateFormat);
            return this;
            }

            public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {
            localDateTypeAdapter.setFormat(dateFormat);
            return this;
            }

        /**
        * Gson TypeAdapter for java.sql.Date type
        * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
        * (more efficient than SimpleDateFormat).
        */
        public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

            private DateFormat dateFormat;

            public SqlDateTypeAdapter() {}

            public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
            }

            public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
            }

            @Override
            public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
            out.nullValue();
            } else {
            String value;
            if (dateFormat != null) {
            value = dateFormat.format(date);
            } else {
            value = date.toString();
            }
            out.value(value);
            }
            }

            @Override
            public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
            case NULL:
            in.nextNull();
            return null;
            default:
            String date = in.nextString();
            try {
            if (dateFormat != null) {
            return new java.sql.Date(dateFormat.parse(date).getTime());
            }
            return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
            } catch (ParseException e) {
            throw new JsonParseException(e);
            }
            }
            }
            }

            /**
            * Gson TypeAdapter for java.util.Date type
            * If the dateFormat is null, ISO8601Utils will be used.
            */
            public static class DateTypeAdapter extends TypeAdapter<Date> {

                private DateFormat dateFormat;

                public DateTypeAdapter() {}

                public DateTypeAdapter(DateFormat dateFormat) {
                this.dateFormat = dateFormat;
                }

                public void setFormat(DateFormat dateFormat) {
                this.dateFormat = dateFormat;
                }

                @Override
                public void write(JsonWriter out, Date date) throws IOException {
                if (date == null) {
                out.nullValue();
                } else {
                String value;
                if (dateFormat != null) {
                value = dateFormat.format(date);
                } else {
                value = ISO8601Utils.format(date, true);
                }
                out.value(value);
                }
                }

                @Override
                public Date read(JsonReader in) throws IOException {
                try {
                switch (in.peek()) {
                case NULL:
                in.nextNull();
                return null;
                default:
                String date = in.nextString();
                try {
                if (dateFormat != null) {
                return dateFormat.parse(date);
                }
                return ISO8601Utils.parse(date, new ParsePosition(0));
                } catch (ParseException e) {
                throw new JsonParseException(e);
                }
                }
                } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
                }
                }
                }

                public JSON setDateFormat(DateFormat dateFormat) {
                dateTypeAdapter.setFormat(dateFormat);
                return this;
                }

                public JSON setSqlDateFormat(DateFormat dateFormat) {
                sqlDateTypeAdapter.setFormat(dateFormat);
                return this;
                }

                }
