/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 5.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.annotations.SerializedName;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** TextField */
public class TextField {
  public static final String SERIALIZED_NAME_FIELD_TYPE = "fieldType";

  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private Integer fieldType;

  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";

  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_LCID = "lcid";

  @SerializedName(SERIALIZED_NAME_LCID)
  private Integer lcid;

  public static final String SERIALIZED_NAME_STATUS = "status";

  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_VALIDITY_STATUS = "validityStatus";

  @SerializedName(SERIALIZED_NAME_VALIDITY_STATUS)
  private Integer validityStatus;

  public static final String SERIALIZED_NAME_COMPARISON_STATUS = "comparisonStatus";

  @SerializedName(SERIALIZED_NAME_COMPARISON_STATUS)
  private Integer comparisonStatus;

  public static final String SERIALIZED_NAME_VALUE = "value";

  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_VALUE_LIST = "valueList";

  @SerializedName(SERIALIZED_NAME_VALUE_LIST)
  private List<TextFieldValue> valueList = new ArrayList<TextFieldValue>();

  public static final String SERIALIZED_NAME_VALIDITY_LIST = "validityList";

  @SerializedName(SERIALIZED_NAME_VALIDITY_LIST)
  private List<SourceValidity> validityList = new ArrayList<SourceValidity>();

  public static final String SERIALIZED_NAME_COMPARISON_LIST = "comparisonList";

  @SerializedName(SERIALIZED_NAME_COMPARISON_LIST)
  private List<CrossSourceValueComparison> comparisonList =
      new ArrayList<CrossSourceValueComparison>();

  public TextField withFieldType(Integer fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Get fieldType
   *
   * @return fieldType
   */
  public Integer getFieldType() {
    return fieldType;
  }

  public void setFieldType(Integer fieldType) {
    this.fieldType = fieldType;
  }

  public TextField withFieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * Field name. Only use to search values for fields with fieldType&#x3D;50(other). In general, use
   * fieldType for lookup.
   *
   * @return fieldName
   */
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }

  public TextField withLcid(Integer lcid) {
    this.lcid = lcid;
    return this;
  }

  /**
   * Get lcid
   *
   * @return lcid
   */
  @javax.annotation.Nullable
  public Integer getLcid() {
    return lcid;
  }

  public void setLcid(Integer lcid) {
    this.lcid = lcid;
  }

  public TextField withStatus(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   *
   * @return status
   */
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }

  public TextField withValidityStatus(Integer validityStatus) {
    this.validityStatus = validityStatus;
    return this;
  }

  /**
   * Get validityStatus
   *
   * @return validityStatus
   */
  public Integer getValidityStatus() {
    return validityStatus;
  }

  public void setValidityStatus(Integer validityStatus) {
    this.validityStatus = validityStatus;
  }

  public TextField withComparisonStatus(Integer comparisonStatus) {
    this.comparisonStatus = comparisonStatus;
    return this;
  }

  /**
   * Get comparisonStatus
   *
   * @return comparisonStatus
   */
  public Integer getComparisonStatus() {
    return comparisonStatus;
  }

  public void setComparisonStatus(Integer comparisonStatus) {
    this.comparisonStatus = comparisonStatus;
  }

  public TextField withValue(String value) {
    this.value = value;
    return this;
  }

  /**
   * The most confidence value, selected from valueList
   *
   * @return value
   */
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public TextField withValueList(List<TextFieldValue> valueList) {
    this.valueList = valueList;
    return this;
  }

  public TextField addValueListItem(TextFieldValue valueListItem) {
    this.valueList.add(valueListItem);
    return this;
  }

  /**
   * Get valueList
   *
   * @return valueList
   */
  public List<TextFieldValue> getValueList() {
    return valueList;
  }

  public void setValueList(List<TextFieldValue> valueList) {
    this.valueList = valueList;
  }

  public TextField withValidityList(List<SourceValidity> validityList) {
    this.validityList = validityList;
    return this;
  }

  public TextField addValidityListItem(SourceValidity validityListItem) {
    this.validityList.add(validityListItem);
    return this;
  }

  /**
   * Validity of all field values for given source. If there are two values on different pages for
   * one field-source pair, then validity also will include logical match checking. If such values
   * do not match, validity will return error.
   *
   * @return validityList
   */
  public List<SourceValidity> getValidityList() {
    return validityList;
  }

  public void setValidityList(List<SourceValidity> validityList) {
    this.validityList = validityList;
  }

  public TextField withComparisonList(List<CrossSourceValueComparison> comparisonList) {
    this.comparisonList = comparisonList;
    return this;
  }

  public TextField addComparisonListItem(CrossSourceValueComparison comparisonListItem) {
    this.comparisonList.add(comparisonListItem);
    return this;
  }

  /**
   * Get comparisonList
   *
   * @return comparisonList
   */
  public List<CrossSourceValueComparison> getComparisonList() {
    return comparisonList;
  }

  public void setComparisonList(List<CrossSourceValueComparison> comparisonList) {
    this.comparisonList = comparisonList;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextField textField = (TextField) o;
    return Objects.equals(this.fieldType, textField.fieldType)
        && Objects.equals(this.fieldName, textField.fieldName)
        && Objects.equals(this.lcid, textField.lcid)
        && Objects.equals(this.status, textField.status)
        && Objects.equals(this.validityStatus, textField.validityStatus)
        && Objects.equals(this.comparisonStatus, textField.comparisonStatus)
        && Objects.equals(this.value, textField.value)
        && Objects.equals(this.valueList, textField.valueList)
        && Objects.equals(this.validityList, textField.validityList)
        && Objects.equals(this.comparisonList, textField.comparisonList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        fieldType,
        fieldName,
        lcid,
        status,
        validityStatus,
        comparisonStatus,
        value,
        valueList,
        validityList,
        comparisonList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextField {\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    lcid: ").append(toIndentedString(lcid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    validityStatus: ").append(toIndentedString(validityStatus)).append("\n");
    sb.append("    comparisonStatus: ").append(toIndentedString(comparisonStatus)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueList: ").append(toIndentedString(valueList)).append("\n");
    sb.append("    validityList: ").append(toIndentedString(validityList)).append("\n");
    sb.append("    comparisonList: ").append(toIndentedString(comparisonList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
