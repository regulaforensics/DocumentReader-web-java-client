/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/** TextField */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.13.0")
public class TextField {
  public static final String SERIALIZED_NAME_FIELD_TYPE = "fieldType";

  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  @javax.annotation.Nonnull
  private TextFieldType fieldType;

  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";

  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  @javax.annotation.Nonnull
  private String fieldName;

  public static final String SERIALIZED_NAME_LCID = "lcid";

  @SerializedName(SERIALIZED_NAME_LCID)
  @javax.annotation.Nonnull
  private LCID lcid;

  public static final String SERIALIZED_NAME_LCID_NAME = "lcidName";

  @SerializedName(SERIALIZED_NAME_LCID_NAME)
  @javax.annotation.Nullable
  private String lcidName;

  public static final String SERIALIZED_NAME_STATUS = "status";

  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private CheckResult status;

  public static final String SERIALIZED_NAME_VALIDITY_STATUS = "validityStatus";

  @SerializedName(SERIALIZED_NAME_VALIDITY_STATUS)
  @javax.annotation.Nonnull
  private CheckResult validityStatus;

  public static final String SERIALIZED_NAME_COMPARISON_STATUS = "comparisonStatus";

  @SerializedName(SERIALIZED_NAME_COMPARISON_STATUS)
  @javax.annotation.Nonnull
  private CheckResult comparisonStatus;

  public static final String SERIALIZED_NAME_VALUE = "value";

  @SerializedName(SERIALIZED_NAME_VALUE)
  @javax.annotation.Nonnull
  private String value;

  public static final String SERIALIZED_NAME_VALUE_LIST = "valueList";

  @SerializedName(SERIALIZED_NAME_VALUE_LIST)
  @javax.annotation.Nonnull
  private List<TextFieldValue> valueList;

  public static final String SERIALIZED_NAME_VALIDITY_LIST = "validityList";

  @SerializedName(SERIALIZED_NAME_VALIDITY_LIST)
  @javax.annotation.Nonnull
  private List<SourceValidity> validityList;

  public static final String SERIALIZED_NAME_COMPARISON_LIST = "comparisonList";

  @SerializedName(SERIALIZED_NAME_COMPARISON_LIST)
  @javax.annotation.Nonnull
  private List<CrossSourceValueComparison> comparisonList;

  public TextField() {}

  public TextField fieldType(@javax.annotation.Nonnull TextFieldType fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Get fieldType
   *
   * @return fieldType
   */
  @javax.annotation.Nonnull
  public TextFieldType getFieldType() {
    return fieldType;
  }

  public void setFieldType(@javax.annotation.Nonnull TextFieldType fieldType) {
    this.fieldType = fieldType;
  }

  public TextField fieldName(@javax.annotation.Nonnull String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * Field name. Only use to search values for fields with fieldType&#x3D;50(other). In general, use
   * fieldType for lookup.
   *
   * @return fieldName
   */
  @javax.annotation.Nonnull
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(@javax.annotation.Nonnull String fieldName) {
    this.fieldName = fieldName;
  }

  public TextField lcid(@javax.annotation.Nonnull LCID lcid) {
    this.lcid = lcid;
    return this;
  }

  /**
   * Get lcid
   *
   * @return lcid
   */
  @javax.annotation.Nonnull
  public LCID getLcid() {
    return lcid;
  }

  public void setLcid(@javax.annotation.Nonnull LCID lcid) {
    this.lcid = lcid;
  }

  public TextField lcidName(@javax.annotation.Nullable String lcidName) {
    this.lcidName = lcidName;
    return this;
  }

  /**
   * LCID name
   *
   * @return lcidName
   */
  @javax.annotation.Nullable
  public String getLcidName() {
    return lcidName;
  }

  public void setLcidName(@javax.annotation.Nullable String lcidName) {
    this.lcidName = lcidName;
  }

  public TextField status(@javax.annotation.Nonnull CheckResult status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   *
   * @return status
   */
  @javax.annotation.Nonnull
  public CheckResult getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull CheckResult status) {
    this.status = status;
  }

  public TextField validityStatus(@javax.annotation.Nonnull CheckResult validityStatus) {
    this.validityStatus = validityStatus;
    return this;
  }

  /**
   * Get validityStatus
   *
   * @return validityStatus
   */
  @javax.annotation.Nonnull
  public CheckResult getValidityStatus() {
    return validityStatus;
  }

  public void setValidityStatus(@javax.annotation.Nonnull CheckResult validityStatus) {
    this.validityStatus = validityStatus;
  }

  public TextField comparisonStatus(@javax.annotation.Nonnull CheckResult comparisonStatus) {
    this.comparisonStatus = comparisonStatus;
    return this;
  }

  /**
   * Get comparisonStatus
   *
   * @return comparisonStatus
   */
  @javax.annotation.Nonnull
  public CheckResult getComparisonStatus() {
    return comparisonStatus;
  }

  public void setComparisonStatus(@javax.annotation.Nonnull CheckResult comparisonStatus) {
    this.comparisonStatus = comparisonStatus;
  }

  public TextField value(@javax.annotation.Nonnull String value) {
    this.value = value;
    return this;
  }

  /**
   * The most confidence value, selected from valueList
   *
   * @return value
   */
  @javax.annotation.Nonnull
  public String getValue() {
    return value;
  }

  public void setValue(@javax.annotation.Nonnull String value) {
    this.value = value;
  }

  public TextField valueList(@javax.annotation.Nonnull List<TextFieldValue> valueList) {
    this.valueList = valueList;
    return this;
  }

  public TextField addValueListItem(TextFieldValue valueListItem) {
    if (this.valueList == null) {
      this.valueList = new ArrayList<>();
    }
    this.valueList.add(valueListItem);
    return this;
  }

  /**
   * Get valueList
   *
   * @return valueList
   */
  @javax.annotation.Nonnull
  public List<TextFieldValue> getValueList() {
    return valueList;
  }

  public void setValueList(@javax.annotation.Nonnull List<TextFieldValue> valueList) {
    this.valueList = valueList;
  }

  public TextField validityList(@javax.annotation.Nonnull List<SourceValidity> validityList) {
    this.validityList = validityList;
    return this;
  }

  public TextField addValidityListItem(SourceValidity validityListItem) {
    if (this.validityList == null) {
      this.validityList = new ArrayList<>();
    }
    this.validityList.add(validityListItem);
    return this;
  }

  /**
   * Validity of all field values for given source. If there are two values on different pages for
   * one field-source pair, then validity also will include logical match checking. If such values
   * do not match, validity will return error.
   *
   * @return validityList
   */
  @javax.annotation.Nonnull
  public List<SourceValidity> getValidityList() {
    return validityList;
  }

  public void setValidityList(@javax.annotation.Nonnull List<SourceValidity> validityList) {
    this.validityList = validityList;
  }

  public TextField comparisonList(
      @javax.annotation.Nonnull List<CrossSourceValueComparison> comparisonList) {
    this.comparisonList = comparisonList;
    return this;
  }

  public TextField addComparisonListItem(CrossSourceValueComparison comparisonListItem) {
    if (this.comparisonList == null) {
      this.comparisonList = new ArrayList<>();
    }
    this.comparisonList.add(comparisonListItem);
    return this;
  }

  /**
   * Get comparisonList
   *
   * @return comparisonList
   */
  @javax.annotation.Nonnull
  public List<CrossSourceValueComparison> getComparisonList() {
    return comparisonList;
  }

  public void setComparisonList(
      @javax.annotation.Nonnull List<CrossSourceValueComparison> comparisonList) {
    this.comparisonList = comparisonList;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextField textField = (TextField) o;
    return Objects.equals(this.fieldType, textField.fieldType)
        && Objects.equals(this.fieldName, textField.fieldName)
        && Objects.equals(this.lcid, textField.lcid)
        && Objects.equals(this.lcidName, textField.lcidName)
        && Objects.equals(this.status, textField.status)
        && Objects.equals(this.validityStatus, textField.validityStatus)
        && Objects.equals(this.comparisonStatus, textField.comparisonStatus)
        && Objects.equals(this.value, textField.value)
        && Objects.equals(this.valueList, textField.valueList)
        && Objects.equals(this.validityList, textField.validityList)
        && Objects.equals(this.comparisonList, textField.comparisonList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        fieldType,
        fieldName,
        lcid,
        lcidName,
        status,
        validityStatus,
        comparisonStatus,
        value,
        valueList,
        validityList,
        comparisonList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextField {\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    lcid: ").append(toIndentedString(lcid)).append("\n");
    sb.append("    lcidName: ").append(toIndentedString(lcidName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    validityStatus: ").append(toIndentedString(validityStatus)).append("\n");
    sb.append("    comparisonStatus: ").append(toIndentedString(comparisonStatus)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueList: ").append(toIndentedString(valueList)).append("\n");
    sb.append("    validityList: ").append(toIndentedString(validityList)).append("\n");
    sb.append("    comparisonList: ").append(toIndentedString(comparisonList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fieldType");
    openapiFields.add("fieldName");
    openapiFields.add("lcid");
    openapiFields.add("lcidName");
    openapiFields.add("status");
    openapiFields.add("validityStatus");
    openapiFields.add("comparisonStatus");
    openapiFields.add("value");
    openapiFields.add("valueList");
    openapiFields.add("validityList");
    openapiFields.add("comparisonList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fieldType");
    openapiRequiredFields.add("fieldName");
    openapiRequiredFields.add("lcid");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("validityStatus");
    openapiRequiredFields.add("comparisonStatus");
    openapiRequiredFields.add("value");
    openapiRequiredFields.add("valueList");
    openapiRequiredFields.add("validityList");
    openapiRequiredFields.add("comparisonList");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextField
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!TextField.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in TextField is not found in the empty JSON string",
                TextField.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : TextField.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `fieldType`
    TextFieldType.validateJsonElement(jsonObj.get("fieldType"));
    if (!jsonObj.get("fieldName").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `fieldName` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("fieldName").toString()));
    }
    // validate the required field `lcid`
    LCID.validateJsonElement(jsonObj.get("lcid"));
    if ((jsonObj.get("lcidName") != null && !jsonObj.get("lcidName").isJsonNull())
        && !jsonObj.get("lcidName").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `lcidName` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("lcidName").toString()));
    }
    // validate the required field `status`
    CheckResult.validateJsonElement(jsonObj.get("status"));
    // validate the required field `validityStatus`
    CheckResult.validateJsonElement(jsonObj.get("validityStatus"));
    // validate the required field `comparisonStatus`
    CheckResult.validateJsonElement(jsonObj.get("comparisonStatus"));
    if (!jsonObj.get("value").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `value` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("value").toString()));
    }
    // ensure the json data is an array
    if (!jsonObj.get("valueList").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `valueList` to be an array in the JSON string but got `%s`",
              jsonObj.get("valueList").toString()));
    }

    JsonArray jsonArrayvalueList = jsonObj.getAsJsonArray("valueList");
    // validate the required field `valueList` (array)
    for (int i = 0; i < jsonArrayvalueList.size(); i++) {
      TextFieldValue.validateJsonElement(jsonArrayvalueList.get(i));
    }
    ;
    // ensure the json data is an array
    if (!jsonObj.get("validityList").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `validityList` to be an array in the JSON string but got `%s`",
              jsonObj.get("validityList").toString()));
    }

    JsonArray jsonArrayvalidityList = jsonObj.getAsJsonArray("validityList");
    // validate the required field `validityList` (array)
    for (int i = 0; i < jsonArrayvalidityList.size(); i++) {
      SourceValidity.validateJsonElement(jsonArrayvalidityList.get(i));
    }
    ;
    // ensure the json data is an array
    if (!jsonObj.get("comparisonList").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `comparisonList` to be an array in the JSON string but got `%s`",
              jsonObj.get("comparisonList").toString()));
    }

    JsonArray jsonArraycomparisonList = jsonObj.getAsJsonArray("comparisonList");
    // validate the required field `comparisonList` (array)
    for (int i = 0; i < jsonArraycomparisonList.size(); i++) {
      CrossSourceValueComparison.validateJsonElement(jsonArraycomparisonList.get(i));
    }
    ;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!TextField.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'TextField' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<TextField> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(TextField.class));

      return (TypeAdapter<T>)
          new TypeAdapter<TextField>() {
            @Override
            public void write(JsonWriter out, TextField value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public TextField read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of TextField given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextField
   * @throws IOException if the JSON string is invalid with respect to TextField
   */
  public static TextField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextField.class);
  }

  /**
   * Convert an instance of TextField to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
