/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.11.0")
public class TrfFtStringType extends AbstractOpenApiSchema {
  private static final Logger log = Logger.getLogger(TrfFtStringType.class.getName());

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!TrfFtStringType.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'TrfFtStringType' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<GraphicFieldType> adapterGraphicFieldType =
          gson.getDelegateAdapter(this, TypeToken.get(GraphicFieldType.class));
      final TypeAdapter<TextFieldType> adapterTextFieldType =
          gson.getDelegateAdapter(this, TypeToken.get(TextFieldType.class));

      return (TypeAdapter<T>)
          new TypeAdapter<TrfFtStringType>() {
            @Override
            public void write(JsonWriter out, TrfFtStringType value) throws IOException {
              if (value == null || value.getActualInstance() == null) {
                elementAdapter.write(out, null);
                return;
              }

              // check if the actual instance is of the type `GraphicFieldType`
              if (value.getActualInstance() instanceof GraphicFieldType) {
                JsonElement element =
                    adapterGraphicFieldType.toJsonTree(
                        (GraphicFieldType) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `TextFieldType`
              if (value.getActualInstance() instanceof TextFieldType) {
                JsonElement element =
                    adapterTextFieldType.toJsonTree((TextFieldType) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              throw new IOException(
                  "Failed to serialize as the type doesn't match oneOf schemas: GraphicFieldType, TextFieldType");
            }

            @Override
            public TrfFtStringType read(JsonReader in) throws IOException {
              Object deserialized = null;
              JsonElement jsonElement = elementAdapter.read(in);

              int match = 0;
              ArrayList<String> errorMessages = new ArrayList<>();
              TypeAdapter actualAdapter = elementAdapter;

              // deserialize GraphicFieldType
              try {
                // validate the JSON object to see if any exception is thrown
                GraphicFieldType.validateJsonElement(jsonElement);
                actualAdapter = adapterGraphicFieldType;
                match++;
                log.log(Level.FINER, "Input data matches schema 'GraphicFieldType'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for GraphicFieldType failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'GraphicFieldType'", e);
              }
              // deserialize TextFieldType
              try {
                // validate the JSON object to see if any exception is thrown
                TextFieldType.validateJsonElement(jsonElement);
                actualAdapter = adapterTextFieldType;
                match++;
                log.log(Level.FINER, "Input data matches schema 'TextFieldType'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for TextFieldType failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'TextFieldType'", e);
              }

              if (match == 1) {
                TrfFtStringType ret = new TrfFtStringType();
                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                return ret;
              }

              throw new IOException(
                  String.format(
                      "Failed deserialization for TrfFtStringType: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s",
                      match, errorMessages, jsonElement.toString()));
            }
          }.nullSafe();
    }
  }

  // store a list of schema names defined in oneOf
  public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

  public TrfFtStringType() {
    super("oneOf", Boolean.FALSE);
  }

  public TrfFtStringType(Object o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  static {
    schemas.put("GraphicFieldType", GraphicFieldType.class);
    schemas.put("TextFieldType", TextFieldType.class);
  }

  @Override
  public Map<String, Class<?>> getSchemas() {
    return TrfFtStringType.schemas;
  }

  /**
   * Set the instance that matches the oneOf child schema, check the instance parameter is valid
   * against the oneOf child schemas: GraphicFieldType, TextFieldType
   *
   * <p>It could be an instance of the 'oneOf' schemas.
   */
  @Override
  public void setActualInstance(Object instance) {
    if (instance instanceof GraphicFieldType) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof TextFieldType) {
      super.setActualInstance(instance);
      return;
    }

    throw new RuntimeException("Invalid instance type. Must be GraphicFieldType, TextFieldType");
  }

  /**
   * Get the actual instance, which can be the following: GraphicFieldType, TextFieldType
   *
   * @return The actual instance (GraphicFieldType, TextFieldType)
   */
  @SuppressWarnings("unchecked")
  @Override
  public Object getActualInstance() {
    return super.getActualInstance();
  }

  /**
   * Get the actual instance of `GraphicFieldType`. If the actual instance is not
   * `GraphicFieldType`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `GraphicFieldType`
   * @throws ClassCastException if the instance is not `GraphicFieldType`
   */
  public GraphicFieldType getGraphicFieldType() throws ClassCastException {
    return (GraphicFieldType) super.getActualInstance();
  }

  /**
   * Get the actual instance of `TextFieldType`. If the actual instance is not `TextFieldType`, the
   * ClassCastException will be thrown.
   *
   * @return The actual instance of `TextFieldType`
   * @throws ClassCastException if the instance is not `TextFieldType`
   */
  public TextFieldType getTextFieldType() throws ClassCastException {
    return (TextFieldType) super.getActualInstance();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrfFtStringType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with GraphicFieldType
    try {
      GraphicFieldType.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for GraphicFieldType failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TextFieldType
    try {
      TextFieldType.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for TextFieldType failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(
          String.format(
              "The JSON string is invalid for TrfFtStringType with oneOf schemas: GraphicFieldType, TextFieldType. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s",
              validCount, errorMessages, jsonElement.toString()));
    }
  }

  /**
   * Create an instance of TrfFtStringType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrfFtStringType
   * @throws IOException if the JSON string is invalid with respect to TrfFtStringType
   */
  public static TrfFtStringType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrfFtStringType.class);
  }

  /**
   * Convert an instance of TrfFtStringType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
