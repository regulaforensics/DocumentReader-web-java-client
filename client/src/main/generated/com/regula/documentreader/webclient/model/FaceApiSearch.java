/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/**
 * A search filter that can be applied if the \&quot;match+search\&quot; mode is enabled. May
 * include limit, threshold, group_ids. If the group_ids are specified, the search is performed only
 * in these groups. Find more information in the &lt;a
 * href&#x3D;\&quot;https://dev.regulaforensics.com/FaceSDK-web-openapi/#tag/search/operation/search\&quot;
 * target&#x3D;\&quot;_blank\&quot;&gt;OpenAPI documentation&lt;/a&gt;.
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class FaceApiSearch {
  public static final String SERIALIZED_NAME_LIMIT = "limit";

  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private Integer limit;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";

  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  @javax.annotation.Nullable
  private Float threshold;

  public static final String SERIALIZED_NAME_GROUP_IDS = "group_ids";

  @SerializedName(SERIALIZED_NAME_GROUP_IDS)
  @javax.annotation.Nullable
  private List<Integer> groupIds;

  public FaceApiSearch() {}

  public FaceApiSearch limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The maximum number of results to be returned.
   *
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }

  public FaceApiSearch threshold(@javax.annotation.Nullable Float threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * The similarity threshold.
   *
   * @return threshold
   */
  @javax.annotation.Nullable
  public Float getThreshold() {
    return threshold;
  }

  public void setThreshold(@javax.annotation.Nullable Float threshold) {
    this.threshold = threshold;
  }

  public FaceApiSearch groupIds(@javax.annotation.Nullable List<Integer> groupIds) {
    this.groupIds = groupIds;
    return this;
  }

  public FaceApiSearch addGroupIdsItem(Integer groupIdsItem) {
    if (this.groupIds == null) {
      this.groupIds = new ArrayList<>();
    }
    this.groupIds.add(groupIdsItem);
    return this;
  }

  /**
   * The groups where to conduct the search.
   *
   * @return groupIds
   */
  @javax.annotation.Nullable
  public List<Integer> getGroupIds() {
    return groupIds;
  }

  public void setGroupIds(@javax.annotation.Nullable List<Integer> groupIds) {
    this.groupIds = groupIds;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaceApiSearch faceApiSearch = (FaceApiSearch) o;
    return Objects.equals(this.limit, faceApiSearch.limit)
        && Objects.equals(this.threshold, faceApiSearch.threshold)
        && Objects.equals(this.groupIds, faceApiSearch.groupIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limit, threshold, groupIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaceApiSearch {\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    groupIds: ").append(toIndentedString(groupIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("limit");
    openapiFields.add("threshold");
    openapiFields.add("group_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FaceApiSearch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!FaceApiSearch.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in FaceApiSearch is not found in the empty JSON string",
                FaceApiSearch.openapiRequiredFields.toString()));
      }
    }

    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // ensure the optional json data is an array if present
    if (jsonObj.get("group_ids") != null
        && !jsonObj.get("group_ids").isJsonNull()
        && !jsonObj.get("group_ids").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `group_ids` to be an array in the JSON string but got `%s`",
              jsonObj.get("group_ids").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!FaceApiSearch.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'FaceApiSearch' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<FaceApiSearch> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(FaceApiSearch.class));

      return (TypeAdapter<T>)
          new TypeAdapter<FaceApiSearch>() {
            @Override
            public void write(JsonWriter out, FaceApiSearch value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public FaceApiSearch read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of FaceApiSearch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FaceApiSearch
   * @throws IOException if the JSON string is invalid with respect to FaceApiSearch
   */
  public static FaceApiSearch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FaceApiSearch.class);
  }

  /**
   * Convert an instance of FaceApiSearch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
