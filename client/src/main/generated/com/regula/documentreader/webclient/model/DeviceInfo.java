/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashSet;
import java.util.Objects;

/** DeviceInfo */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class DeviceInfo {
  public static final String SERIALIZED_NAME_APP_NAME = "app-name";

  @SerializedName(SERIALIZED_NAME_APP_NAME)
  @javax.annotation.Nullable
  private String appName;

  public static final String SERIALIZED_NAME_VERSION = "version";

  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_LICENSE_ID = "license-id";

  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  @javax.annotation.Nullable
  private String licenseId;

  public static final String SERIALIZED_NAME_LICENSE_SERIAL = "license-serial";

  @SerializedName(SERIALIZED_NAME_LICENSE_SERIAL)
  @javax.annotation.Nullable
  private String licenseSerial;

  public static final String SERIALIZED_NAME_VALID_UNTIL = "valid-until";

  @SerializedName(SERIALIZED_NAME_VALID_UNTIL)
  @javax.annotation.Nullable
  private OffsetDateTime validUntil;

  public static final String SERIALIZED_NAME_SERVER_TIME = "server-time";

  @SerializedName(SERIALIZED_NAME_SERVER_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime serverTime;

  public DeviceInfo() {}

  public DeviceInfo appName(@javax.annotation.Nullable String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * Get appName
   *
   * @return appName
   */
  @javax.annotation.Nullable
  public String getAppName() {
    return appName;
  }

  public void setAppName(@javax.annotation.Nullable String appName) {
    this.appName = appName;
  }

  public DeviceInfo version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   *
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }

  public DeviceInfo licenseId(@javax.annotation.Nullable String licenseId) {
    this.licenseId = licenseId;
    return this;
  }

  /**
   * Get licenseId
   *
   * @return licenseId
   */
  @javax.annotation.Nullable
  public String getLicenseId() {
    return licenseId;
  }

  public void setLicenseId(@javax.annotation.Nullable String licenseId) {
    this.licenseId = licenseId;
  }

  public DeviceInfo licenseSerial(@javax.annotation.Nullable String licenseSerial) {
    this.licenseSerial = licenseSerial;
    return this;
  }

  /**
   * Get licenseSerial
   *
   * @return licenseSerial
   */
  @javax.annotation.Nullable
  public String getLicenseSerial() {
    return licenseSerial;
  }

  public void setLicenseSerial(@javax.annotation.Nullable String licenseSerial) {
    this.licenseSerial = licenseSerial;
  }

  public DeviceInfo validUntil(@javax.annotation.Nullable OffsetDateTime validUntil) {
    this.validUntil = validUntil;
    return this;
  }

  /**
   * Get validUntil
   *
   * @return validUntil
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidUntil() {
    return validUntil;
  }

  public void setValidUntil(@javax.annotation.Nullable OffsetDateTime validUntil) {
    this.validUntil = validUntil;
  }

  public DeviceInfo serverTime(@javax.annotation.Nullable OffsetDateTime serverTime) {
    this.serverTime = serverTime;
    return this;
  }

  /**
   * Get serverTime
   *
   * @return serverTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getServerTime() {
    return serverTime;
  }

  public void setServerTime(@javax.annotation.Nullable OffsetDateTime serverTime) {
    this.serverTime = serverTime;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceInfo deviceInfo = (DeviceInfo) o;
    return Objects.equals(this.appName, deviceInfo.appName)
        && Objects.equals(this.version, deviceInfo.version)
        && Objects.equals(this.licenseId, deviceInfo.licenseId)
        && Objects.equals(this.licenseSerial, deviceInfo.licenseSerial)
        && Objects.equals(this.validUntil, deviceInfo.validUntil)
        && Objects.equals(this.serverTime, deviceInfo.serverTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appName, version, licenseId, licenseSerial, validUntil, serverTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceInfo {\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    licenseSerial: ").append(toIndentedString(licenseSerial)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("    serverTime: ").append(toIndentedString(serverTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app-name");
    openapiFields.add("version");
    openapiFields.add("license-id");
    openapiFields.add("license-serial");
    openapiFields.add("valid-until");
    openapiFields.add("server-time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!DeviceInfo.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in DeviceInfo is not found in the empty JSON string",
                DeviceInfo.openapiRequiredFields.toString()));
      }
    }

    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if ((jsonObj.get("app-name") != null && !jsonObj.get("app-name").isJsonNull())
        && !jsonObj.get("app-name").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `app-name` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("app-name").toString()));
    }
    if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull())
        && !jsonObj.get("version").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `version` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("version").toString()));
    }
    if ((jsonObj.get("license-id") != null && !jsonObj.get("license-id").isJsonNull())
        && !jsonObj.get("license-id").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `license-id` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("license-id").toString()));
    }
    if ((jsonObj.get("license-serial") != null && !jsonObj.get("license-serial").isJsonNull())
        && !jsonObj.get("license-serial").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `license-serial` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("license-serial").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!DeviceInfo.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'DeviceInfo' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<DeviceInfo> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(DeviceInfo.class));

      return (TypeAdapter<T>)
          new TypeAdapter<DeviceInfo>() {
            @Override
            public void write(JsonWriter out, DeviceInfo value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public DeviceInfo read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceInfo
   * @throws IOException if the JSON string is invalid with respect to DeviceInfo
   */
  public static DeviceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceInfo.class);
  }

  /**
   * Convert an instance of DeviceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
