/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.annotations.SerializedName;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Structure is used to describe the certificate contents used for the digital signature
 * verification of the document security object within the context of the communication session with
 * electronic document.
 */
public class RfidCertificateEx {
  public static final String SERIALIZED_NAME_VERSION = "Version";

  @SerializedName(SERIALIZED_NAME_VERSION)
  private BigDecimal version;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "SerialNumber";

  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SIGNATURE_ALGORITHM = "SignatureAlgorithm";

  @SerializedName(SERIALIZED_NAME_SIGNATURE_ALGORITHM)
  private String signatureAlgorithm;

  public static final String SERIALIZED_NAME_ISSUER = "Issuer";

  @SerializedName(SERIALIZED_NAME_ISSUER)
  private RfidDistinguishedName issuer;

  public static final String SERIALIZED_NAME_VALIDITY = "Validity";

  @SerializedName(SERIALIZED_NAME_VALIDITY)
  private RfidValidity validity;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";

  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private RfidDistinguishedName subject;

  public static final String SERIALIZED_NAME_SUBJECT_P_K_ALGORITHM = "SubjectPKAlgorithm";

  @SerializedName(SERIALIZED_NAME_SUBJECT_P_K_ALGORITHM)
  private String subjectPKAlgorithm;

  public static final String SERIALIZED_NAME_EXTENSIONS = "Extensions";

  @SerializedName(SERIALIZED_NAME_EXTENSIONS)
  private List<RfidPkiExtension> extensions = new ArrayList<RfidPkiExtension>();

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "Notifications";

  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<ParsingErrorCodes> notifications = new ArrayList<ParsingErrorCodes>();

  public static final String SERIALIZED_NAME_ORIGIN = "Origin";

  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private RfidCertificateOrigin origin;

  public static final String SERIALIZED_NAME_TYPE = "Type";

  @SerializedName(SERIALIZED_NAME_TYPE)
  private RfidCertificateType type;

  public static final String SERIALIZED_NAME_FILE_NAME = "FileName";

  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private TrfFtString fileName;

  public static final String SERIALIZED_NAME_PA_STATUS = "PA_Status";

  @SerializedName(SERIALIZED_NAME_PA_STATUS)
  private RFIDErrorCodes paStatus;

  public RfidCertificateEx withVersion(BigDecimal version) {
    this.version = version;
    return this;
  }

  /**
   * Version of Certificate ASN.1 structure
   *
   * @return version
   */
  public BigDecimal getVersion() {
    return version;
  }

  public void setVersion(BigDecimal version) {
    this.version = version;
  }

  public RfidCertificateEx withSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * Certificate serial number. Base64 encoded.
   *
   * @return serialNumber
   */
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }

  public RfidCertificateEx withSignatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
    return this;
  }

  /**
   * Certificate digital signature algorithm identifier (OID); String in the format S1 (S2), where
   * S1 – algorithm name, S2 – identifier (OID string).
   *
   * @return signatureAlgorithm
   */
  public String getSignatureAlgorithm() {
    return signatureAlgorithm;
  }

  public void setSignatureAlgorithm(String signatureAlgorithm) {
    this.signatureAlgorithm = signatureAlgorithm;
  }

  public RfidCertificateEx withIssuer(RfidDistinguishedName issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   *
   * @return issuer
   */
  public RfidDistinguishedName getIssuer() {
    return issuer;
  }

  public void setIssuer(RfidDistinguishedName issuer) {
    this.issuer = issuer;
  }

  public RfidCertificateEx withValidity(RfidValidity validity) {
    this.validity = validity;
    return this;
  }

  /**
   * Get validity
   *
   * @return validity
   */
  public RfidValidity getValidity() {
    return validity;
  }

  public void setValidity(RfidValidity validity) {
    this.validity = validity;
  }

  public RfidCertificateEx withSubject(RfidDistinguishedName subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   *
   * @return subject
   */
  public RfidDistinguishedName getSubject() {
    return subject;
  }

  public void setSubject(RfidDistinguishedName subject) {
    this.subject = subject;
  }

  public RfidCertificateEx withSubjectPKAlgorithm(String subjectPKAlgorithm) {
    this.subjectPKAlgorithm = subjectPKAlgorithm;
    return this;
  }

  /**
   * Certificate public key algorithm identifier (OID); String in the format S1 (S2), where S1 –
   * algorithm name, S2 – identifier (OID string).
   *
   * @return subjectPKAlgorithm
   */
  public String getSubjectPKAlgorithm() {
    return subjectPKAlgorithm;
  }

  public void setSubjectPKAlgorithm(String subjectPKAlgorithm) {
    this.subjectPKAlgorithm = subjectPKAlgorithm;
  }

  public RfidCertificateEx withExtensions(List<RfidPkiExtension> extensions) {
    this.extensions = extensions;
    return this;
  }

  public RfidCertificateEx addExtensionsItem(RfidPkiExtension extensionsItem) {
    this.extensions.add(extensionsItem);
    return this;
  }

  /**
   * List of the certificate extensions
   *
   * @return extensions
   */
  public List<RfidPkiExtension> getExtensions() {
    return extensions;
  }

  public void setExtensions(List<RfidPkiExtension> extensions) {
    this.extensions = extensions;
  }

  public RfidCertificateEx withNotifications(List<ParsingErrorCodes> notifications) {
    this.notifications = notifications;
    return this;
  }

  public RfidCertificateEx addNotificationsItem(ParsingErrorCodes notificationsItem) {
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * List of remarks arisen during the analysis of the certificate data structure and its validity
   * verification.
   *
   * @return notifications
   */
  public List<ParsingErrorCodes> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<ParsingErrorCodes> notifications) {
    this.notifications = notifications;
  }

  public RfidCertificateEx withOrigin(RfidCertificateOrigin origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   *
   * @return origin
   */
  public RfidCertificateOrigin getOrigin() {
    return origin;
  }

  public void setOrigin(RfidCertificateOrigin origin) {
    this.origin = origin;
  }

  public RfidCertificateEx withType(RfidCertificateType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  public RfidCertificateType getType() {
    return type;
  }

  public void setType(RfidCertificateType type) {
    this.type = type;
  }

  public RfidCertificateEx withFileName(TrfFtString fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * Get fileName
   *
   * @return fileName
   */
  public TrfFtString getFileName() {
    return fileName;
  }

  public void setFileName(TrfFtString fileName) {
    this.fileName = fileName;
  }

  public RfidCertificateEx withPaStatus(RFIDErrorCodes paStatus) {
    this.paStatus = paStatus;
    return this;
  }

  /**
   * Get paStatus
   *
   * @return paStatus
   */
  public RFIDErrorCodes getPaStatus() {
    return paStatus;
  }

  public void setPaStatus(RFIDErrorCodes paStatus) {
    this.paStatus = paStatus;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RfidCertificateEx rfidCertificateEx = (RfidCertificateEx) o;
    return Objects.equals(this.version, rfidCertificateEx.version)
        && Objects.equals(this.serialNumber, rfidCertificateEx.serialNumber)
        && Objects.equals(this.signatureAlgorithm, rfidCertificateEx.signatureAlgorithm)
        && Objects.equals(this.issuer, rfidCertificateEx.issuer)
        && Objects.equals(this.validity, rfidCertificateEx.validity)
        && Objects.equals(this.subject, rfidCertificateEx.subject)
        && Objects.equals(this.subjectPKAlgorithm, rfidCertificateEx.subjectPKAlgorithm)
        && Objects.equals(this.extensions, rfidCertificateEx.extensions)
        && Objects.equals(this.notifications, rfidCertificateEx.notifications)
        && Objects.equals(this.origin, rfidCertificateEx.origin)
        && Objects.equals(this.type, rfidCertificateEx.type)
        && Objects.equals(this.fileName, rfidCertificateEx.fileName)
        && Objects.equals(this.paStatus, rfidCertificateEx.paStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        version,
        serialNumber,
        signatureAlgorithm,
        issuer,
        validity,
        subject,
        subjectPKAlgorithm,
        extensions,
        notifications,
        origin,
        type,
        fileName,
        paStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RfidCertificateEx {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    signatureAlgorithm: ").append(toIndentedString(signatureAlgorithm)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    validity: ").append(toIndentedString(validity)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    subjectPKAlgorithm: ").append(toIndentedString(subjectPKAlgorithm)).append("\n");
    sb.append("    extensions: ").append(toIndentedString(extensions)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    paStatus: ").append(toIndentedString(paStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
