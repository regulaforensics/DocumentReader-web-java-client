/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** FieldItem */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class FieldItem {
  public static final String SERIALIZED_NAME_FIELD_LENGTH = "FieldLength";

  @SerializedName(SERIALIZED_NAME_FIELD_LENGTH)
  @javax.annotation.Nonnull
  private Integer fieldLength;

  public static final String SERIALIZED_NAME_FIELD_POS = "FieldPos";

  @SerializedName(SERIALIZED_NAME_FIELD_POS)
  @javax.annotation.Nonnull
  private Integer fieldPos;

  public static final String SERIALIZED_NAME_FIELD_TYPE = "FieldType";

  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  @javax.annotation.Nonnull
  private Integer fieldType;

  public static final String SERIALIZED_NAME_T_E_S_T_R_E_S_U_L_T = "TEST_RESULT";

  @SerializedName(SERIALIZED_NAME_T_E_S_T_R_E_S_U_L_T)
  @javax.annotation.Nonnull
  private Integer TEST_RESULT;

  public static final String SERIALIZED_NAME_VALID_CHECK_SUM = "ValidCheckSum";

  @SerializedName(SERIALIZED_NAME_VALID_CHECK_SUM)
  @javax.annotation.Nonnull
  private Integer validCheckSum;

  public static final String SERIALIZED_NAME_RESERVED = "reserved";

  @SerializedName(SERIALIZED_NAME_RESERVED)
  @javax.annotation.Nonnull
  private Integer reserved;

  public FieldItem() {}

  public FieldItem fieldLength(@javax.annotation.Nonnull Integer fieldLength) {
    this.fieldLength = fieldLength;
    return this;
  }

  /**
   * Get fieldLength
   *
   * @return fieldLength
   */
  @javax.annotation.Nonnull
  public Integer getFieldLength() {
    return fieldLength;
  }

  public void setFieldLength(@javax.annotation.Nonnull Integer fieldLength) {
    this.fieldLength = fieldLength;
  }

  public FieldItem fieldPos(@javax.annotation.Nonnull Integer fieldPos) {
    this.fieldPos = fieldPos;
    return this;
  }

  /**
   * Get fieldPos
   *
   * @return fieldPos
   */
  @javax.annotation.Nonnull
  public Integer getFieldPos() {
    return fieldPos;
  }

  public void setFieldPos(@javax.annotation.Nonnull Integer fieldPos) {
    this.fieldPos = fieldPos;
  }

  public FieldItem fieldType(@javax.annotation.Nonnull Integer fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Get fieldType
   *
   * @return fieldType
   */
  @javax.annotation.Nonnull
  public Integer getFieldType() {
    return fieldType;
  }

  public void setFieldType(@javax.annotation.Nonnull Integer fieldType) {
    this.fieldType = fieldType;
  }

  public FieldItem TEST_RESULT(@javax.annotation.Nonnull Integer TEST_RESULT) {
    this.TEST_RESULT = TEST_RESULT;
    return this;
  }

  /**
   * Get TEST_RESULT
   *
   * @return TEST_RESULT
   */
  @javax.annotation.Nonnull
  public Integer getTESTRESULT() {
    return TEST_RESULT;
  }

  public void setTESTRESULT(@javax.annotation.Nonnull Integer TEST_RESULT) {
    this.TEST_RESULT = TEST_RESULT;
  }

  public FieldItem validCheckSum(@javax.annotation.Nonnull Integer validCheckSum) {
    this.validCheckSum = validCheckSum;
    return this;
  }

  /**
   * Get validCheckSum
   *
   * @return validCheckSum
   */
  @javax.annotation.Nonnull
  public Integer getValidCheckSum() {
    return validCheckSum;
  }

  public void setValidCheckSum(@javax.annotation.Nonnull Integer validCheckSum) {
    this.validCheckSum = validCheckSum;
  }

  public FieldItem reserved(@javax.annotation.Nonnull Integer reserved) {
    this.reserved = reserved;
    return this;
  }

  /**
   * Get reserved
   *
   * @return reserved
   */
  @javax.annotation.Nonnull
  public Integer getReserved() {
    return reserved;
  }

  public void setReserved(@javax.annotation.Nonnull Integer reserved) {
    this.reserved = reserved;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldItem fieldItem = (FieldItem) o;
    return Objects.equals(this.fieldLength, fieldItem.fieldLength)
        && Objects.equals(this.fieldPos, fieldItem.fieldPos)
        && Objects.equals(this.fieldType, fieldItem.fieldType)
        && Objects.equals(this.TEST_RESULT, fieldItem.TEST_RESULT)
        && Objects.equals(this.validCheckSum, fieldItem.validCheckSum)
        && Objects.equals(this.reserved, fieldItem.reserved);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldLength, fieldPos, fieldType, TEST_RESULT, validCheckSum, reserved);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldItem {\n");
    sb.append("    fieldLength: ").append(toIndentedString(fieldLength)).append("\n");
    sb.append("    fieldPos: ").append(toIndentedString(fieldPos)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    TEST_RESULT: ").append(toIndentedString(TEST_RESULT)).append("\n");
    sb.append("    validCheckSum: ").append(toIndentedString(validCheckSum)).append("\n");
    sb.append("    reserved: ").append(toIndentedString(reserved)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FieldLength");
    openapiFields.add("FieldPos");
    openapiFields.add("FieldType");
    openapiFields.add("TEST_RESULT");
    openapiFields.add("ValidCheckSum");
    openapiFields.add("reserved");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FieldLength");
    openapiRequiredFields.add("FieldPos");
    openapiRequiredFields.add("FieldType");
    openapiRequiredFields.add("TEST_RESULT");
    openapiRequiredFields.add("ValidCheckSum");
    openapiRequiredFields.add("reserved");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FieldItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!FieldItem.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in FieldItem is not found in the empty JSON string",
                FieldItem.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!FieldItem.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `FieldItem` properties. JSON: %s",
                entry.getKey(), jsonElement.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : FieldItem.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!FieldItem.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'FieldItem' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<FieldItem> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(FieldItem.class));

      return (TypeAdapter<T>)
          new TypeAdapter<FieldItem>() {
            @Override
            public void write(JsonWriter out, FieldItem value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public FieldItem read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of FieldItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FieldItem
   * @throws IOException if the JSON string is invalid with respect to FieldItem
   */
  public static FieldItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FieldItem.class);
  }

  /**
   * Convert an instance of FieldItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
