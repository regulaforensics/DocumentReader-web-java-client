/*
 * Regula Document Reader Web API
 * Regula Document Reader Web API
 *
 * The version of the OpenAPI document: 5.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.annotations.SerializedName;
import java.util.Arrays;
import java.util.Objects;

/** ImagesFieldValue */
public class ImagesFieldValue {
  public static final String SERIALIZED_NAME_CONTAINER_TYPE = "containerType";

  @SerializedName(SERIALIZED_NAME_CONTAINER_TYPE)
  private int containerType;

  public static final String SERIALIZED_NAME_FIELD_RECT = "fieldRect";

  @SerializedName(SERIALIZED_NAME_FIELD_RECT)
  private RectangleCoordinates fieldRect;

  public static final String SERIALIZED_NAME_LIGHT_INDEX = "lightIndex";

  @SerializedName(SERIALIZED_NAME_LIGHT_INDEX)
  private int lightIndex;

  public static final String SERIALIZED_NAME_PAGE_INDEX = "pageIndex";

  @SerializedName(SERIALIZED_NAME_PAGE_INDEX)
  private int pageIndex;

  public static final String SERIALIZED_NAME_SOURCE = "source";

  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_VALUE = "value";

  @SerializedName(SERIALIZED_NAME_VALUE)
  private byte[] value;

  public ImagesFieldValue withContainerType(int containerType) {
    this.containerType = containerType;
    return this;
  }

  /**
   * Get containerType
   *
   * @return containerType
   */
  public int getContainerType() {
    return containerType;
  }

  public void setContainerType(int containerType) {
    this.containerType = containerType;
  }

  public ImagesFieldValue withFieldRect(RectangleCoordinates fieldRect) {
    this.fieldRect = fieldRect;
    return this;
  }

  /**
   * Get fieldRect
   *
   * @return fieldRect
   */
  public RectangleCoordinates getFieldRect() {
    return fieldRect;
  }

  public void setFieldRect(RectangleCoordinates fieldRect) {
    this.fieldRect = fieldRect;
  }

  public ImagesFieldValue withLightIndex(int lightIndex) {
    this.lightIndex = lightIndex;
    return this;
  }

  /**
   * Get lightIndex
   *
   * @return lightIndex
   */
  public int getLightIndex() {
    return lightIndex;
  }

  public void setLightIndex(int lightIndex) {
    this.lightIndex = lightIndex;
  }

  public ImagesFieldValue withPageIndex(int pageIndex) {
    this.pageIndex = pageIndex;
    return this;
  }

  /**
   * Page index of the image from input list
   *
   * @return pageIndex
   */
  public int getPageIndex() {
    return pageIndex;
  }

  public void setPageIndex(int pageIndex) {
    this.pageIndex = pageIndex;
  }

  public ImagesFieldValue withSource(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   *
   * @return source
   */
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public ImagesFieldValue withValue(byte[] value) {
    this.value = value;
    return this;
  }

  /**
   * Image base64 into byte format.
   *
   * @return value
   */
  public byte[] getValue() {
    return value;
  }

  public void setValue(byte[] value) {
    this.value = value;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImagesFieldValue imagesFieldValue = (ImagesFieldValue) o;
    return Objects.equals(this.containerType, imagesFieldValue.containerType)
        && Objects.equals(this.fieldRect, imagesFieldValue.fieldRect)
        && Objects.equals(this.lightIndex, imagesFieldValue.lightIndex)
        && Objects.equals(this.pageIndex, imagesFieldValue.pageIndex)
        && Objects.equals(this.source, imagesFieldValue.source)
        && Arrays.equals(this.value, imagesFieldValue.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        containerType, fieldRect, lightIndex, pageIndex, source, Arrays.hashCode(value));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImagesFieldValue {\n");
    sb.append("    containerType: ").append(toIndentedString(containerType)).append("\n");
    sb.append("    fieldRect: ").append(toIndentedString(fieldRect)).append("\n");
    sb.append("    lightIndex: ").append(toIndentedString(lightIndex)).append("\n");
    sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
