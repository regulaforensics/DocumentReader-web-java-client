/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Objects;
import java.util.UUID;

/** TransactionProcessGetResponse */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.15.0")
public class TransactionProcessGetResponse {
  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";

  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  @javax.annotation.Nullable
  private UUID transactionId;

  public static final String SERIALIZED_NAME_TAG = "tag";

  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private String tag;

  public static final String SERIALIZED_NAME_OUT_DATA = "outData";

  @SerializedName(SERIALIZED_NAME_OUT_DATA)
  @javax.annotation.Nullable
  private OutData outData;

  public static final String SERIALIZED_NAME_IN_DATA = "inData";

  @SerializedName(SERIALIZED_NAME_IN_DATA)
  @javax.annotation.Nullable
  private InData inData;

  public TransactionProcessGetResponse() {}

  public TransactionProcessGetResponse transactionId(
      @javax.annotation.Nullable UUID transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Get transactionId
   *
   * @return transactionId
   */
  @javax.annotation.Nullable
  public UUID getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(@javax.annotation.Nullable UUID transactionId) {
    this.transactionId = transactionId;
  }

  public TransactionProcessGetResponse tag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Get tag
   *
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
  }

  public TransactionProcessGetResponse outData(@javax.annotation.Nullable OutData outData) {
    this.outData = outData;
    return this;
  }

  /**
   * Get outData
   *
   * @return outData
   */
  @javax.annotation.Nullable
  public OutData getOutData() {
    return outData;
  }

  public void setOutData(@javax.annotation.Nullable OutData outData) {
    this.outData = outData;
  }

  public TransactionProcessGetResponse inData(@javax.annotation.Nullable InData inData) {
    this.inData = inData;
    return this;
  }

  /**
   * Get inData
   *
   * @return inData
   */
  @javax.annotation.Nullable
  public InData getInData() {
    return inData;
  }

  public void setInData(@javax.annotation.Nullable InData inData) {
    this.inData = inData;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionProcessGetResponse transactionProcessGetResponse = (TransactionProcessGetResponse) o;
    return Objects.equals(this.transactionId, transactionProcessGetResponse.transactionId)
        && Objects.equals(this.tag, transactionProcessGetResponse.tag)
        && Objects.equals(this.outData, transactionProcessGetResponse.outData)
        && Objects.equals(this.inData, transactionProcessGetResponse.inData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, tag, outData, inData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionProcessGetResponse {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    outData: ").append(toIndentedString(outData)).append("\n");
    sb.append("    inData: ").append(toIndentedString(inData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("transactionId", "tag", "outData", "inData"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to
   *     TransactionProcessGetResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!TransactionProcessGetResponse.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        System.err.println(
            String.format(
                "The required field(s) %s in TransactionProcessGetResponse is not found in the empty JSON string",
                TransactionProcessGetResponse.openapiRequiredFields.toString()));
      }
    }

    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull())
        && !jsonObj.get("transactionId").isJsonPrimitive()) {
      System.err.println(
          String.format(
              "Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("transactionId").toString()));
    }
    if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull())
        && !jsonObj.get("tag").isJsonPrimitive()) {
      System.err.println(
          String.format(
              "Expected the field `tag` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("tag").toString()));
    }
    // validate the optional field `outData`
    if (jsonObj.get("outData") != null && !jsonObj.get("outData").isJsonNull()) {
      OutData.validateJsonElement(jsonObj.get("outData"));
    }
    // validate the optional field `inData`
    if (jsonObj.get("inData") != null && !jsonObj.get("inData").isJsonNull()) {
      InData.validateJsonElement(jsonObj.get("inData"));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!TransactionProcessGetResponse.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'TransactionProcessGetResponse' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<TransactionProcessGetResponse> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(TransactionProcessGetResponse.class));

      return (TypeAdapter<T>)
          new TypeAdapter<TransactionProcessGetResponse>() {
            @Override
            public void write(JsonWriter out, TransactionProcessGetResponse value)
                throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public TransactionProcessGetResponse read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionProcessGetResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionProcessGetResponse
   * @throws IOException if the JSON string is invalid with respect to TransactionProcessGetResponse
   */
  public static TransactionProcessGetResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionProcessGetResponse.class);
  }

  /**
   * Convert an instance of TransactionProcessGetResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
