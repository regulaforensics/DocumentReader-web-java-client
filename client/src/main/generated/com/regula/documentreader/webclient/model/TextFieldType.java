/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

public class TextFieldType {

  /** Document class code */
  public static final int DOCUMENT_CLASS_CODE = 0;

  /** Issuing state code */
  public static final int ISSUING_STATE_CODE = 1;

  /** Document number */
  public static final int DOCUMENT_NUMBER = 2;

  /** Date of expiry */
  public static final int DATE_OF_EXPIRY = 3;

  /** Date of issue */
  public static final int DATE_OF_ISSUE = 4;

  /** Date of birth */
  public static final int DATE_OF_BIRTH = 5;

  /** Place of birth */
  public static final int PLACE_OF_BIRTH = 6;

  /** Personal number */
  public static final int PERSONAL_NUMBER = 7;

  /** Surname */
  public static final int SURNAME = 8;

  /** Given name(s) */
  public static final int GIVEN_NAMES = 9;

  /** Mother&#39;s name */
  public static final int MOTHERS_NAME = 10;

  /** Nationality */
  public static final int NATIONALITY = 11;

  /** Sex */
  public static final int SEX = 12;

  /** Height */
  public static final int HEIGHT = 13;

  /** Weight */
  public static final int WEIGHT = 14;

  /** Eyes color */
  public static final int EYES_COLOR = 15;

  /** Hair color */
  public static final int HAIR_COLOR = 16;

  /** Address */
  public static final int ADDRESS = 17;

  /** Donor */
  public static final int DONOR = 18;

  /** Social security number */
  public static final int SOCIAL_SECURITY_NUMBER = 19;

  /** DL class */
  public static final int DL_CLASS = 20;

  /** DL endorsement code */
  public static final int DL_ENDORSED = 21;

  /** DL restriction code */
  public static final int DL_RESTRICTION_CODE = 22;

  /** Date of 21st birthday */
  public static final int DL_UNDER_21_DATE = 23;

  /** Issuing authority */
  public static final int AUTHORITY = 24;

  /** Surname and given names */
  public static final int SURNAME_AND_GIVEN_NAMES = 25;

  /** Nationality code */
  public static final int NATIONALITY_CODE = 26;

  /** Passport number */
  public static final int PASSPORT_NUMBER = 27;

  /** Invitation number */
  public static final int INVITATION_NUMBER = 28;

  /** Visa ID */
  public static final int VISA_ID = 29;

  /** Visa class */
  public static final int VISA_CLASS = 30;

  /** Visa subclass */
  public static final int VISA_SUBCLASS = 31;

  /** MRZ type */
  public static final int MRZ_TYPE = 35;

  /** Optional data */
  public static final int OPTIONAL_DATA = 36;

  /** Document class name */
  public static final int DOCUMENT_CLASS_NAME = 37;

  /** Issuing state name */
  public static final int ISSUING_STATE_NAME = 38;

  /** Place of issue */
  public static final int PLACE_OF_ISSUE = 39;

  /** Document number checksum */
  public static final int DOCUMENT_NUMBER_CHECKSUM = 40;

  /** Date of birth checksum */
  public static final int DATE_OF_BIRTH_CHECKSUM = 41;

  /** Date of expiry checksum */
  public static final int DATE_OF_EXPIRY_CHECKSUM = 42;

  /** Personal number checksum */
  public static final int PERSONAL_NUMBER_CHECKSUM = 43;

  /** Final checksum */
  public static final int FINAL_CHECKSUM = 44;

  /** Passport number checksum */
  public static final int PASSPORT_NUMBER_CHECKSUM = 45;

  /** Invitation number checksum */
  public static final int INVITATION_NUMBER_CHECKSUM = 46;

  /** Visa ID checksum */
  public static final int VISA_ID_CHECKSUM = 47;

  /** Surname and given names checksum */
  public static final int SURNAME_AND_GIVEN_NAMES_CHECKSUM = 48;

  /** Visa valid until checksum */
  public static final int VISA_VALID_UNTIL_CHECKSUM = 49;

  /** Other */
  public static final int OTHER = 50;

  /** MRZ strings */
  public static final int MRZ_STRINGS = 51;

  /** Name suffix */
  public static final int NAME_SUFFIX = 52;

  /** Name prefix */
  public static final int NAME_PREFIX = 53;

  /** Date of issue checksum */
  public static final int DATE_OF_ISSUE_CHECKSUM = 54;

  /** Date of issue check digit */
  public static final int DATE_OF_ISSUE_CHECK_DIGIT = 55;

  /** Document series */
  public static final int DOCUMENT_SERIES = 56;

  /** Registration number */
  public static final int REG_CERT_REG_NUMBER = 57;

  /** Vehicle model */
  public static final int REG_CERT_CAR_MODEL = 58;

  /** Vehicle color */
  public static final int REG_CERT_CAR_COLOR = 59;

  /** Vehicle body number */
  public static final int REG_CERT_BODY_NUMBER = 60;

  /** Vehicle type */
  public static final int REG_CERT_CAR_TYPE = 61;

  /** Max permissible weight */
  public static final int REG_CERT_MAX_WEIGHT = 62;

  /** Unladen mass */
  public static final int REG_CERT_WEIGHT = 63;

  /** Address: area */
  public static final int ADDRESS_AREA = 64;

  /** Address: state */
  public static final int ADDRESS_STATE = 65;

  /** Address: building */
  public static final int ADDRESS_BUILDING = 66;

  /** Address: house */
  public static final int ADDRESS_HOUSE = 67;

  /** Address: flat */
  public static final int ADDRESS_FLAT = 68;

  /** Place of registration */
  public static final int PLACE_OF_REGISTRATION = 69;

  /** Date of registration */
  public static final int DATE_OF_REGISTRATION = 70;

  /** Resident from */
  public static final int RESIDENT_FROM = 71;

  /** Resident until */
  public static final int RESIDENT_UNTIL = 72;

  /** Issuing authority code */
  public static final int AUTHORITY_CODE = 73;

  /** Place of birth: area */
  public static final int PLACE_OF_BIRTH_AREA = 74;

  /** Place of birth: state code */
  public static final int PLACE_OF_BIRTH_STATE_CODE = 75;

  /** Address: street */
  public static final int ADDRESS_STREET = 76;

  /** Address: city */
  public static final int ADDRESS_CITY = 77;

  /** Address: jurisdiction code */
  public static final int ADDRESS_JURISDICTION_CODE = 78;

  /** Address: postal code */
  public static final int ADDRESS_POSTAL_CODE = 79;

  /** Document number check digit */
  public static final int DOCUMENT_NUMBER_CHECK_DIGIT = 80;

  /** Date of birth check digit */
  public static final int DATE_OF_BIRTH_CHECK_DIGIT = 81;

  /** Date of expiry check digit */
  public static final int DATE_OF_EXPIRY_CHECK_DIGIT = 82;

  /** Personal number check digit */
  public static final int PERSONAL_NUMBER_CHECK_DIGIT = 83;

  /** Final check digit */
  public static final int FINAL_CHECK_DIGIT = 84;

  /** Passport number check digit */
  public static final int PASSPORT_NUMBER_CHECK_DIGIT = 85;

  /** Invitation number check digit */
  public static final int INVITATION_NUMBER_CHECK_DIGIT = 86;

  /** Visa ID check digit */
  public static final int VISA_ID_CHECK_DIGIT = 87;

  /** Surname and given names check digit */
  public static final int SURNAME_AND_GIVEN_NAMES_CHECK_DIGIT = 88;

  /** Visa valid until check digit */
  public static final int VISA_VALID_UNTIL_CHECK_DIGIT = 89;

  /** Permit class */
  public static final int PERMIT_DL_CLASS = 90;

  /** Permit expiry date */
  public static final int PERMIT_DATE_OF_EXPIRY = 91;

  /** Permit identifier */
  public static final int PERMIT_IDENTIFIER = 92;

  /** Permit issue date */
  public static final int PERMIT_DATE_OF_ISSUE = 93;

  /** Permit restriction code */
  public static final int PERMIT_RESTRICTION_CODE = 94;

  /** Permit endorsement code */
  public static final int PERMIT_ENDORSED = 95;

  /** Issue timestamp */
  public static final int ISSUE_TIMESTAMP = 96;

  /** Number of duplicates */
  public static final int NUMBER_OF_DUPLICATES = 97;

  /** Medical indicator codes */
  public static final int MEDICAL_INDICATOR_CODES = 98;

  /** Non-resident indicator */
  public static final int NON_RESIDENT_INDICATOR = 99;

  /** Visa type */
  public static final int VISA_TYPE = 100;

  /** Visa valid from */
  public static final int VISA_VALID_FROM = 101;

  /** Visa valid until */
  public static final int VISA_VALID_UNTIL = 102;

  /** Duration of stay */
  public static final int DURATION_OF_STAY = 103;

  /** Number of entries */
  public static final int NUMBER_OF_ENTRIES = 104;

  /** Day */
  public static final int DAY = 105;

  /** Month */
  public static final int MONTH = 106;

  /** Year */
  public static final int YEAR = 107;

  /** Unique customer identifier */
  public static final int UNIQUE_CUSTOMER_IDENTIFIER = 108;

  /** Commercial vehicle code */
  public static final int COMMERCIAL_VEHICLE_CODES = 109;

  /** AKA: date of birth */
  public static final int AKA_DATE_OF_BIRTH = 110;

  /** AKA: social insurance number */
  public static final int AKA_SOCIAL_SECURITY_NUMBER = 111;

  /** AKA: surname */
  public static final int AKA_SURNAME = 112;

  /** AKA: given name(s) */
  public static final int AKA_GIVEN_NAMES = 113;

  /** AKA: name suffix */
  public static final int AKA_NAME_SUFFIX = 114;

  /** AKA: name prefix */
  public static final int AKA_NAME_PREFIX = 115;

  /** Mailing address: street */
  public static final int MAILING_ADDRESS_STREET = 116;

  /** Mailing address: city */
  public static final int MAILING_ADDRESS_CITY = 117;

  /** Mailing address: jurisdiction code */
  public static final int MAILING_ADDRESS_JURISDICTION_CODE = 118;

  /** Mailing address: postal code */
  public static final int MAILING_ADDRESS_POSTAL_CODE = 119;

  /** Number for validation */
  public static final int AUDIT_INFORMATION = 120;

  /** Inventory number */
  public static final int INVENTORY_NUMBER = 121;

  /** Race ethnicity */
  public static final int RACE_ETHNICITY = 122;

  /** Jurisdiction vehicle class */
  public static final int JURISDICTION_VEHICLE_CLASS = 123;

  /** Jurisdiction endorsement code */
  public static final int JURISDICTION_ENDORSEMENT_CODE = 124;

  /** Jurisdiction restriction code */
  public static final int JURISDICTION_RESTRICTION_CODE = 125;

  /** Family name */
  public static final int FAMILY_NAME = 126;

  /** Given name(s) (national) */
  public static final int GIVEN_NAMES_RUS = 127;

  /** Visa ID (national) */
  public static final int VISA_ID_RUS = 128;

  /** Father&#39;s name */
  public static final int FATHERS_NAME = 129;

  /** Father&#39;s name (national) */
  public static final int FATHERS_NAME_RUS = 130;

  /** Surname and given names (national) */
  public static final int SURNAME_AND_GIVEN_NAMES_RUS = 131;

  /** Place of birth (national) */
  public static final int PLACE_OF_BIRTH_RUS = 132;

  /** Issuing authority (national) */
  public static final int AUTHORITY_RUS = 133;

  /** Issuing state code (numeric) */
  public static final int ISSUING_STATE_CODE_NUMERIC = 134;

  /** Nationality code (numeric) */
  public static final int NATIONALITY_CODE_NUMERIC = 135;

  /** Engine power */
  public static final int ENGINE_POWER = 136;

  /** Engine volume */
  public static final int ENGINE_VOLUME = 137;

  /** Chassis number */
  public static final int CHASSIS_NUMBER = 138;

  /** Engine number */
  public static final int ENGINE_NUMBER = 139;

  /** Engine model */
  public static final int ENGINE_MODEL = 140;

  /** Vehicle category */
  public static final int VEHICLE_CATEGORY = 141;

  /** Identity card number */
  public static final int IDENTITY_CARD_NUMBER = 142;

  /** Control number */
  public static final int CONTROL_NUMBER = 143;

  /** Parents&#39; given names */
  public static final int PARENTS_GIVEN_NAMES = 144;

  /** Second surname */
  public static final int SECOND_SURNAME = 145;

  /** Middle name */
  public static final int MIDDLE_NAME = 146;

  /** Vehicle identification number */
  public static final int REG_CERT_VIN = 147;

  /** VIN check digit */
  public static final int REG_CERT_VIN_CHECK_DIGIT = 148;

  /** VIN checksum */
  public static final int REG_CERT_VIN_CHECKSUM = 149;

  /** Line 1 check digit */
  public static final int LINE_1_CHECK_DIGIT = 150;

  /** Line 2 check digit */
  public static final int LINE_2_CHECK_DIGIT = 151;

  /** Line 3 check digit */
  public static final int LINE_3_CHECK_DIGIT = 152;

  /** Line 1 checksum */
  public static final int LINE_1_CHECKSUM = 153;

  /** Line 2 checksum */
  public static final int LINE_2_CHECKSUM = 154;

  /** Line 3 checksum */
  public static final int LINE_3_CHECKSUM = 155;

  /** Registration number check digit */
  public static final int REG_CERT_REG_NUMBER_CHECK_DIGIT = 156;

  /** Registration number checksum */
  public static final int REG_CERT_REG_NUMBER_CHECKSUM = 157;

  /** Vehicle ITS code */
  public static final int REG_CERT_VEHICLE_ITS_CODE = 158;

  /** Card access number */
  public static final int CARD_ACCESS_NUMBER = 159;

  /** Marital status */
  public static final int MARITAL_STATUS = 160;

  /** Company name */
  public static final int COMPANY_NAME = 161;

  /** Special notes */
  public static final int SPECIAL_NOTES = 162;

  /** Spouse&#39;s surname */
  public static final int SURNAME_OF_SPOUSE = 163;

  /** Tracking number */
  public static final int TRACKING_NUMBER = 164;

  /** Booklet number */
  public static final int BOOKLET_NUMBER = 165;

  /** Children */
  public static final int CHILDREN = 166;

  /** Copy */
  public static final int COPY = 167;

  /** Serial number */
  public static final int SERIAL_NUMBER = 168;

  /** Dossier number */
  public static final int DOSSIER_NUMBER = 169;

  /** AKA: surname and given names */
  public static final int AKA_SURNAME_AND_GIVEN_NAMES = 170;

  /** Territorial validity */
  public static final int TERRITORIAL_VALIDITY = 171;

  /** MRZ strings with correct checksums */
  public static final int MRZ_STRINGS_WITH_CORRECT_CHECK_SUMS = 172;

  /** CDL restriction code */
  public static final int DL_CDL_RESTRICTION_CODE = 173;

  /** Date of 18th birthday */
  public static final int DL_UNDER_18_DATE = 174;

  /** DL record created */
  public static final int DL_RECORD_CREATED = 175;

  /** DL date of duplicate issue */
  public static final int DL_DUPLICATE_DATE = 176;

  /** Card type */
  public static final int DL_ISSUE_TYPE = 177;

  /** Military ID number */
  public static final int MILITARY_BOOK_NUMBER = 178;

  /** Destination */
  public static final int DESTINATION = 179;

  /** Blood group */
  public static final int BLOOD_GROUP = 180;

  /** Sequence number */
  public static final int SEQUENCE_NUMBER = 181;

  /** Body type */
  public static final int REG_CERT_BODY_TYPE = 182;

  /** Vehicle make */
  public static final int REG_CERT_CAR_MARK = 183;

  /** Transaction number */
  public static final int TRANSACTION_NUMBER = 184;

  /** Age */
  public static final int AGE = 185;

  /** Folio number */
  public static final int FOLIO_NUMBER = 186;

  /** Voter key */
  public static final int VOTER_KEY = 187;

  /** Address: municipality */
  public static final int ADDRESS_MUNICIPALITY = 188;

  /** Address: location */
  public static final int ADDRESS_LOCATION = 189;

  /** Section */
  public static final int SECTION = 190;

  /** OCR number */
  public static final int OCR_NUMBER = 191;

  /** Federal elections */
  public static final int FEDERAL_ELECTIONS = 192;

  /** Reference number */
  public static final int REFERENCE_NUMBER = 193;

  /** Optional data checksum */
  public static final int OPTIONAL_DATA_CHECKSUM = 194;

  /** Optional data check digit */
  public static final int OPTIONAL_DATA_CHECK_DIGIT = 195;

  /** Visa number */
  public static final int VISA_NUMBER = 196;

  /** Visa number checksum */
  public static final int VISA_NUMBER_CHECKSUM = 197;

  /** Visa number check digit */
  public static final int VISA_NUMBER_CHECK_DIGIT = 198;

  /** Voter */
  public static final int VOTER = 199;

  /** Type of the previous document */
  public static final int PREVIOUS_TYPE = 200;

  /** Field from MRZ */
  public static final int FIELD_FROM_MRZ = 220;

  /** Current date */
  public static final int CURRENT_DATE = 221;

  /** Status date of expiry */
  public static final int STATUS_DATE_OF_EXPIRY = 251;

  /** Banknote number */
  public static final int BANKNOTE_NUMBER = 252;

  /** CSC code */
  public static final int CSC_CODE = 253;

  /** Pseudonym */
  public static final int ARTISTIC_NAME = 254;

  /** Academic title */
  public static final int ACADEMIC_TITLE = 255;

  /** Address country */
  public static final int ADDRESS_COUNTRY = 256;

  /** Address ZIP code */
  public static final int ADDRESS_ZIP_CODE = 257;

  /** eID residence permit 1 */
  public static final int E_ID_RESIDENCE_PERMIT_1 = 258;

  /** eID residence permit 2 */
  public static final int E_ID_RESIDENCE_PERMIT_2 = 259;

  /** eID place of birth: street */
  public static final int E_ID_PLACE_OF_BIRTH_STREET = 260;

  /** eID place of birth: city */
  public static final int E_ID_PLACE_OF_BIRTH_CITY = 261;

  /** eID place of birth: state */
  public static final int E_ID_PLACE_OF_BIRTH_STATE = 262;

  /** eID place of birth: country */
  public static final int E_ID_PLACE_OF_BIRTH_COUNTRY = 263;

  /** eID place of birth: postal code */
  public static final int E_ID_PLACE_OF_BIRTH_ZIP_CODE = 264;

  /** CDL class */
  public static final int CDL_CLASS = 265;

  /** Date of 19th birthday */
  public static final int DL_UNDER_19_DATE = 266;

  /** Weight (pound) */
  public static final int WEIGHT_POUNDS = 267;

  /** Indicator of document limited duration */
  public static final int LIMITED_DURATION_DOCUMENT_INDICATOR = 268;

  /** Endorsement expiration date */
  public static final int ENDORSEMENT_EXPIRATION_DATE = 269;

  /** Revision date */
  public static final int REVISION_DATE = 270;

  /** Compliance type */
  public static final int COMPLIANCE_TYPE = 271;

  /** Family name truncation */
  public static final int FAMILY_NAME_TRUNCATION = 272;

  /** First name truncation */
  public static final int FIRST_NAME_TRUNCATION = 273;

  /** Middle name truncation */
  public static final int MIDDLE_NAME_TRUNCATION = 274;

  /** Exam date */
  public static final int EXAM_DATE = 275;

  /** Organization */
  public static final int ORGANIZATION = 276;

  /** Department */
  public static final int DEPARTMENT = 277;

  /** Pay grade */
  public static final int PAY_GRADE = 278;

  /** Rank */
  public static final int RANK = 279;

  /** Benefits number */
  public static final int BENEFITS_NUMBER = 280;

  /** Sponsor service */
  public static final int SPONSOR_SERVICE = 281;

  /** Sponsor status */
  public static final int SPONSOR_STATUS = 282;

  /** Sponsor */
  public static final int SPONSOR = 283;

  /** Relationship */
  public static final int RELATIONSHIP = 284;

  /** USCIS */
  public static final int USCIS = 285;

  /** Category */
  public static final int CATEGORY = 286;

  /** Conditions */
  public static final int CONDITIONS = 287;

  /** Identifier */
  public static final int IDENTIFIER = 288;

  /** Configuration */
  public static final int CONFIGURATION = 289;

  /** Discretionary data */
  public static final int DISCRETIONARY_DATA = 290;

  /** Line 1 optional data */
  public static final int LINE_1_OPTIONAL_DATA = 291;

  /** Line 2 optional data */
  public static final int LINE_2_OPTIONAL_DATA = 292;

  /** Line 3 optional data */
  public static final int LINE_3_OPTIONAL_DATA = 293;

  /** EQV code */
  public static final int EQV_CODE = 294;

  /** ALT code */
  public static final int ALT_CODE = 295;

  /** Binary code */
  public static final int BINARY_CODE = 296;

  /** Pseudo code */
  public static final int PSEUDO_CODE = 297;

  /** Fee */
  public static final int FEE = 298;

  /** Stamp number */
  public static final int STAMP_NUMBER = 299;

  /** SBH security options */
  public static final int SBH_SECURITY_OPTIONS = 300;

  /** SBH integrity options */
  public static final int SBH_INTEGRITY_OPTIONS = 301;

  /** Date of creation */
  public static final int DATE_OF_CREATION = 302;

  /** Validity period */
  public static final int VALIDITY_PERIOD = 303;

  /** Patron header version */
  public static final int PATRON_HEADER_VERSION = 304;

  /** BDB type */
  public static final int BDB_TYPE = 305;

  /** Biometric type */
  public static final int BIOMETRIC_TYPE = 306;

  /** Biometric subtype */
  public static final int BIOMETRIC_SUBTYPE = 307;

  /** Biometric product ID */
  public static final int BIOMETRIC_PRODUCT_ID = 308;

  /** Biometric format owner */
  public static final int BIOMETRIC_FORMAT_OWNER = 309;

  /** Biometric format type */
  public static final int BIOMETRIC_FORMAT_TYPE = 310;

  /** Phone */
  public static final int PHONE = 311;

  /** Profession */
  public static final int PROFESSION = 312;

  /** Position */
  public static final int TITLE = 313;

  /** Personal data summary */
  public static final int PERSONAL_SUMMARY = 314;

  /** Other valid ID */
  public static final int OTHER_VALID_ID = 315;

  /** Custody info */
  public static final int CUSTODY_INFO = 316;

  /** Other name */
  public static final int OTHER_NAME = 317;

  /** Observations */
  public static final int OBSERVATIONS = 318;

  /** Tax */
  public static final int TAX = 319;

  /** Personalization date */
  public static final int DATE_OF_PERSONALIZATION = 320;

  /** Personalization SN */
  public static final int PERSONALIZATION_SN = 321;

  /** Other person name */
  public static final int OTHER_PERSON_NAME = 322;

  /** Notify person: date of record */
  public static final int PERSON_TO_NOTIFY_DATE_OF_RECORD = 323;

  /** Notify person: name */
  public static final int PERSON_TO_NOTIFY_NAME = 324;

  /** Notify person: phone */
  public static final int PERSON_TO_NOTIFY_PHONE = 325;

  /** Notify person: address */
  public static final int PERSON_TO_NOTIFY_ADDRESS = 326;

  /** DS certificate issuer */
  public static final int DS_CERTIFICATE_ISSUER = 327;

  /** DS certificate subject */
  public static final int DS_CERTIFICATE_SUBJECT = 328;

  /** DS certificate valid from */
  public static final int DS_CERTIFICATE_VALID_FROM = 329;

  /** DS certificate valid to */
  public static final int DS_CERTIFICATE_VALID_TO = 330;

  /** Vehicle data from the DG1 data group */
  public static final int VRC_DATA_OBJECT_ENTRY = 331;

  /** Type of approval number */
  public static final int TYPE_APPROVAL_NUMBER = 332;

  /** Administrative number */
  public static final int ADMINISTRATIVE_NUMBER = 333;

  /** Document discriminator */
  public static final int DOCUMENT_DISCRIMINATOR = 334;

  /** Data discriminator */
  public static final int DATA_DISCRIMINATOR = 335;

  /** ID number of ISO issuer */
  public static final int ISO_ISSUER_ID_NUMBER = 336;

  /** GNIB number */
  public static final int GNIB_NUMBER = 340;

  /** Department number */
  public static final int DEPT_NUMBER = 341;

  /** Telegraph code */
  public static final int TELEX_CODE = 342;

  /** Allergies */
  public static final int ALLERGIES = 343;

  /** Special code */
  public static final int SP_CODE = 344;

  /** Court code */
  public static final int COURT_CODE = 345;

  /** County */
  public static final int CTY = 346;

  /** Sponsor SSN */
  public static final int SPONSOR_SSN = 347;

  /** DoD number */
  public static final int DOD_NUMBER = 348;

  /** Expiry date of Motorcycle Novice status */
  public static final int MC_NOVICE_DATE = 349;

  /** DUF number */
  public static final int DUF_NUMBER = 350;

  /** AGY */
  public static final int AGY = 351;

  /** PNR code */
  public static final int PNR_CODE = 352;

  /** Code of the airport of departure */
  public static final int FROM_AIRPORT_CODE = 353;

  /** Code of the airport of arrival */
  public static final int TO_AIRPORT_CODE = 354;

  /** Flight number */
  public static final int FLIGHT_NUMBER = 355;

  /** Date of flight */
  public static final int DATE_OF_FLIGHT = 356;

  /** Seat number */
  public static final int SEAT_NUMBER = 357;

  /** Date of boarding pass issue */
  public static final int DATE_OF_ISSUE_BOARDING_PASS = 358;

  /** CCW until */
  public static final int CCW_UNTIL = 359;

  /** Reference number checksum */
  public static final int REFERENCE_NUMBER_CHECKSUM = 360;

  /** Reference number check digit */
  public static final int REFERENCE_NUMBER_CHECK_DIGIT = 361;

  /** Room number */
  public static final int ROOM_NUMBER = 362;

  /** Religion */
  public static final int RELIGION = 363;

  /** Months to expire */
  public static final int REMAINDER_TERM = 364;

  /** Electronic ticket indicator */
  public static final int ELECTRONIC_TICKET_INDICATOR = 365;

  /** Compartment code */
  public static final int COMPARTMENT_CODE = 366;

  /** Check-in sequence number */
  public static final int CHECK_IN_SEQUENCE_NUMBER = 367;

  /** Airline designator of boarding pass issuer */
  public static final int AIRLINE_DESIGNATOR_OF_BOARDING_PASS_ISSUER = 368;

  /** Airline numeric code */
  public static final int AIRLINE_NUMERIC_CODE = 369;

  /** Ticket number */
  public static final int TICKET_NUMBER = 370;

  /** Frequent flyer airline designator */
  public static final int FREQUENT_FLYER_AIRLINE_DESIGNATOR = 371;

  /** Frequent flyer number */
  public static final int FREQUENT_FLYER_NUMBER = 372;

  /** Free baggage allowance */
  public static final int FREE_BAGGAGE_ALLOWANCE = 373;

  /** PDF417 codec */
  public static final int PDF417_CODEC = 374;

  /** Identity card number checksum */
  public static final int IDENTITY_CARD_NUMBER_CHECKSUM = 375;

  /** Identity card number check digit */
  public static final int IDENTITY_CARD_NUMBER_CHECK_DIGIT = 376;

  /** Veteran */
  public static final int VETERAN = 377;

  /** DL category A1 valid from */
  public static final int DL_CLASS_CODE_A1_FROM = 378;

  /** DL category A1 valid to */
  public static final int DL_CLASS_CODE_A1_TO = 379;

  /** DL category A1 codes */
  public static final int DL_CLASS_CODE_A1_NOTES = 380;

  /** DL category A valid from */
  public static final int DL_CLASS_CODE_A_FROM = 381;

  /** DL category A valid to */
  public static final int DL_CLASS_CODE_A_TO = 382;

  /** DL category A codes */
  public static final int DL_CLASS_CODE_A_NOTES = 383;

  /** DL category B valid from */
  public static final int DL_CLASS_CODE_B_FROM = 384;

  /** DL category B valid to */
  public static final int DL_CLASS_CODE_B_TO = 385;

  /** DL category B codes */
  public static final int DL_CLASS_CODE_B_NOTES = 386;

  /** DL category C1 valid from */
  public static final int DL_CLASS_CODE_C1_FROM = 387;

  /** DL category C1 valid to */
  public static final int DL_CLASS_CODE_C1_TO = 388;

  /** DL category C1 codes */
  public static final int DL_CLASS_CODE_C1_NOTES = 389;

  /** DL category C valid from */
  public static final int DL_CLASS_CODE_C_FROM = 390;

  /** DL category C valid to */
  public static final int DL_CLASS_CODE_C_TO = 391;

  /** DL category C codes */
  public static final int DL_CLASS_CODE_C_NOTES = 392;

  /** DL category D1 valid from */
  public static final int DL_CLASS_CODE_D1_FROM = 393;

  /** DL category D1 valid to */
  public static final int DL_CLASS_CODE_D1_TO = 394;

  /** DL category D1 codes */
  public static final int DL_CLASS_CODE_D1_NOTES = 395;

  /** DL category D valid from */
  public static final int DL_CLASS_CODE_D_FROM = 396;

  /** DL category D valid to */
  public static final int DL_CLASS_CODE_D_TO = 397;

  /** DL category D codes */
  public static final int DL_CLASS_CODE_D_NOTES = 398;

  /** DL category BE valid from */
  public static final int DL_CLASS_CODE_BE_FROM = 399;

  /** DL category BE valid to */
  public static final int DL_CLASS_CODE_BE_TO = 400;

  /** DL category BE codes */
  public static final int DL_CLASS_CODE_BE_NOTES = 401;

  /** DL category C1E valid from */
  public static final int DL_CLASS_CODE_C1E_FROM = 402;

  /** DL category C1E valid to */
  public static final int DL_CLASS_CODE_C1E_TO = 403;

  /** DL category C1E codes */
  public static final int DL_CLASS_CODE_C1E_NOTES = 404;

  /** DL category CE valid from */
  public static final int DL_CLASS_CODE_CE_FROM = 405;

  /** DL category CE valid to */
  public static final int DL_CLASS_CODE_CE_TO = 406;

  /** DL category CE codes */
  public static final int DL_CLASS_CODE_CE_NOTES = 407;

  /** DL category D1E valid from */
  public static final int DL_CLASS_CODE_D1E_FROM = 408;

  /** DL category D1E valid to */
  public static final int DL_CLASS_CODE_D1E_TO = 409;

  /** DL category D1E codes */
  public static final int DL_CLASS_CODE_D1E_NOTES = 410;

  /** DL category DE valid from */
  public static final int DL_CLASS_CODE_DE_FROM = 411;

  /** DL category DE valid to */
  public static final int DL_CLASS_CODE_DE_TO = 412;

  /** DL category DE codes */
  public static final int DL_CLASS_CODE_DE_NOTES = 413;

  /** DL category M valid from */
  public static final int DL_CLASS_CODE_M_FROM = 414;

  /** DL category M valid to */
  public static final int DL_CLASS_CODE_M_TO = 415;

  /** DL category M codes */
  public static final int DL_CLASS_CODE_M_NOTES = 416;

  /** DL category L valid from */
  public static final int DL_CLASS_CODE_L_FROM = 417;

  /** DL category L valid to */
  public static final int DL_CLASS_CODE_L_TO = 418;

  /** DL category L codes */
  public static final int DL_CLASS_CODE_L_NOTES = 419;

  /** DL category T valid from */
  public static final int DL_CLASS_CODE_T_FROM = 420;

  /** DL category T valid to */
  public static final int DL_CLASS_CODE_T_TO = 421;

  /** DL category T codes */
  public static final int DL_CLASS_CODE_T_NOTES = 422;

  /** DL category AM valid from */
  public static final int DL_CLASS_CODE_AM_FROM = 423;

  /** DL category AM valid to */
  public static final int DL_CLASS_CODE_AM_TO = 424;

  /** DL category AM codes */
  public static final int DL_CLASS_CODE_AM_NOTES = 425;

  /** DL category A2 valid from */
  public static final int DL_CLASS_CODE_A2_FROM = 426;

  /** DL category A2 valid to */
  public static final int DL_CLASS_CODE_A2_TO = 427;

  /** DL category A2 codes */
  public static final int DL_CLASS_CODE_A2_NOTES = 428;

  /** DL category B1 valid from */
  public static final int DL_CLASS_CODE_B1_FROM = 429;

  /** DL category B1 valid to */
  public static final int DL_CLASS_CODE_B1_TO = 430;

  /** DL category B1 codes */
  public static final int DL_CLASS_CODE_B1_NOTES = 431;

  /** Surname at birth */
  public static final int SURNAME_AT_BIRTH = 432;

  /** Civil status */
  public static final int CIVIL_STATUS = 433;

  /** Number of seats */
  public static final int NUMBER_OF_SEATS = 434;

  /** Number of standing places */
  public static final int NUMBER_OF_STANDING_PLACES = 435;

  /** Max speed */
  public static final int MAX_SPEED = 436;

  /** Fuel type */
  public static final int FUEL_TYPE = 437;

  /** Vehicle environmental type */
  public static final int EC_ENVIRONMENTAL_TYPE = 438;

  /** Power-to-weight ratio */
  public static final int POWER_WEIGHT_RATIO = 439;

  /** Max mass of trailer (braked) */
  public static final int MAX_MASS_OF_TRAILER_BRAKED = 440;

  /** Max mass of trailer (unbraked) */
  public static final int MAX_MASS_OF_TRAILER_UNBRAKED = 441;

  /** Transmission type */
  public static final int TRANSMISSION_TYPE = 442;

  /** Trailer hitch */
  public static final int TRAILER_HITCH = 443;

  /** Accompanied by */
  public static final int ACCOMPANIED_BY = 444;

  /** Police district */
  public static final int POLICE_DISTRICT = 445;

  /** First issue date */
  public static final int FIRST_ISSUE_DATE = 446;

  /** Payload capacity */
  public static final int PAYLOAD_CAPACITY = 447;

  /** Number of axles */
  public static final int NUMBER_OF_AXLES = 448;

  /** Permissible axle load */
  public static final int PERMISSIBLE_AXLE_LOAD = 449;

  /** Precinct */
  public static final int PRECINCT = 450;

  /** Invited by */
  public static final int INVITED_BY = 451;

  /** Purpose of entry */
  public static final int PURPOSE_OF_ENTRY = 452;

  /** Skin color */
  public static final int SKIN_COLOR = 453;

  /** Complexion */
  public static final int COMPLEXION = 454;

  /** Airport of departure */
  public static final int AIRPORT_FROM = 455;

  /** Airport of arrival */
  public static final int AIRPORT_TO = 456;

  /** Airline name */
  public static final int AIRLINE_NAME = 457;

  /** Airline loyalty program for frequent flyers */
  public static final int AIRLINE_NAME_FREQUENT_FLYER = 458;

  /** License number */
  public static final int LICENSE_NUMBER = 459;

  /** In tanks */
  public static final int IN_TANKS = 460;

  /** Other than tanks */
  public static final int EXCEPT_IN_TANKS = 461;

  /** Fast Track service */
  public static final int FAST_TRACK = 462;

  /** Owner */
  public static final int OWNER = 463;

  /** MRZ strings from ICAO RFID */
  public static final int MRZ_STRINGS_ICAO_RFID = 464;

  /** Number of card issuances */
  public static final int NUMBER_OF_CARD_ISSUANCE = 465;

  /** Number of card issuances checksum */
  public static final int NUMBER_OF_CARD_ISSUANCE_CHECKSUM = 466;

  /** Number of card issuances check digit */
  public static final int NUMBER_OF_CARD_ISSUANCE_CHECK_DIGIT = 467;

  /** Century of birth */
  public static final int CENTURY_DATE_OF_BIRTH = 468;

  /** DL category A3 valid from */
  public static final int DL_CLASS_CODE_A3_FROM = 469;

  /** DL category A3 valid to */
  public static final int DL_CLASS_CODE_A3_TO = 470;

  /** DL category A3 codes */
  public static final int DL_CLASS_CODE_A3_NOTES = 471;

  /** DL category C2 valid from */
  public static final int DL_CLASS_CODE_C2_FROM = 472;

  /** DL category C2 valid to */
  public static final int DL_CLASS_CODE_C2_TO = 473;

  /** DL category C2 codes */
  public static final int DL_CLASS_CODE_C2_NOTES = 474;

  /** DL category B2 valid from */
  public static final int DL_CLASS_CODE_B2_FROM = 475;

  /** DL category B2 valid to */
  public static final int DL_CLASS_CODE_B2_TO = 476;

  /** DL category B2 codes */
  public static final int DL_CLASS_CODE_B2_NOTES = 477;

  /** DL category D2 valid from */
  public static final int DL_CLASS_CODE_D2_FROM = 478;

  /** DL category D2 valid to */
  public static final int DL_CLASS_CODE_D2_TO = 479;

  /** DL category D2 codes */
  public static final int DL_CLASS_CODE_D2_NOTES = 480;

  /** DL category B2E valid from */
  public static final int DL_CLASS_CODE_B2E_FROM = 481;

  /** DL category B2E valid to */
  public static final int DL_CLASS_CODE_B2E_TO = 482;

  /** DL category B2E codes */
  public static final int DL_CLASS_CODE_B2E_NOTES = 483;

  /** DL category G valid from */
  public static final int DL_CLASS_CODE_G_FROM = 484;

  /** DL category G valid to */
  public static final int DL_CLASS_CODE_G_TO = 485;

  /** DL category G codes */
  public static final int DL_CLASS_CODE_G_NOTES = 486;

  /** DL category J valid from */
  public static final int DL_CLASS_CODE_J_FROM = 487;

  /** DL category J valid to */
  public static final int DL_CLASS_CODE_J_TO = 488;

  /** DL category J codes */
  public static final int DL_CLASS_CODE_J_NOTES = 489;

  /** DL category LC valid from */
  public static final int DL_CLASS_CODE_LC_FROM = 490;

  /** DL category LC valid to */
  public static final int DL_CLASS_CODE_LC_TO = 491;

  /** DL category LC codes */
  public static final int DL_CLASS_CODE_LC_NOTES = 492;

  /** Bank card number */
  public static final int BANK_CARD_NUMBER = 493;

  /** Bank card validity */
  public static final int BANK_CARD_VALID_THRU = 494;

  /** Tax number */
  public static final int TAX_NUMBER = 495;

  /** Health insurance number */
  public static final int HEALTH_NUMBER = 496;

  /** Grandfather&#39;s name */
  public static final int GRANDFATHER_NAME = 497;

  /** Selectee indicator */
  public static final int SELECTEE_INDICATOR = 498;

  /** Mother&#39;s surname */
  public static final int MOTHER_SURNAME = 499;

  /** Mother&#39;s name */
  public static final int MOTHER_GIVEN_NAME = 500;

  /** Father&#39;s surname */
  public static final int FATHER_SURNAME = 501;

  /** Father&#39;s name */
  public static final int FATHER_GIVEN_NAME = 502;

  /** Mother&#39;s date of birth */
  public static final int MOTHER_DATE_OF_BIRTH = 503;

  /** Father&#39;s date of birth */
  public static final int FATHER_DATE_OF_BIRTH = 504;

  /** Mother&#39;s personal number */
  public static final int MOTHER_PERSONAL_NUMBER = 505;

  /** Father&#39;s personal number */
  public static final int FATHER_PERSONAL_NUMBER = 506;

  /** Mother&#39;s place of birth */
  public static final int MOTHER_PLACE_OF_BIRTH = 507;

  /** Father&#39;s place of birth */
  public static final int FATHER_PLACE_OF_BIRTH = 508;

  /** Mother&#39;s country of birth */
  public static final int MOTHER_COUNTRY_OF_BIRTH = 509;

  /** Father&#39;s country of birth */
  public static final int FATHER_COUNTRY_OF_BIRTH = 510;

  /** Date of first renewal */
  public static final int DATE_FIRST_RENEWAL = 511;

  /** Date of second renewal */
  public static final int DATE_SECOND_RENEWAL = 512;

  /** Place of examination */
  public static final int PLACE_OF_EXAMINATION = 513;

  /** Application number */
  public static final int APPLICATION_NUMBER = 514;

  /** Voucher number */
  public static final int VOUCHER_NUMBER = 515;

  /** Authorization number */
  public static final int AUTHORIZATION_NUMBER = 516;

  /** Faculty */
  public static final int FACULTY = 517;

  /** Form of education */
  public static final int FORM_OF_EDUCATION = 518;

  /** DNI number */
  public static final int DNI_NUMBER = 519;

  /** Retirement number */
  public static final int RETIREMENT_NUMBER = 520;

  /** Professional id number */
  public static final int PROFESSIONAL_ID_NUMBER = 521;

  /** Age at issue */
  public static final int AGE_AT_ISSUE = 522;

  /** Years since issue */
  public static final int YEARS_SINCE_ISSUE = 523;

  /** DL category BTP valid from */
  public static final int DL_CLASS_CODE_BTP_FROM = 524;

  /** DL category BTP codes */
  public static final int DL_CLASS_CODE_BTP_NOTES = 525;

  /** DL category BTP valid to */
  public static final int DL_CLASS_CODE_BTP_TO = 526;

  /** DL category C3 valid from */
  public static final int DL_CLASS_CODE_C3_FROM = 527;

  /** DL category C3 codes */
  public static final int DL_CLASS_CODE_C3_NOTES = 528;

  /** DL category C3 valid to */
  public static final int DL_CLASS_CODE_C3_TO = 529;

  /** DL category E valid from */
  public static final int DL_CLASS_CODE_E_FROM = 530;

  /** DL category E codes */
  public static final int DL_CLASS_CODE_E_NOTES = 531;

  /** DL category E valid to */
  public static final int DL_CLASS_CODE_E_TO = 532;

  /** DL category F valid from */
  public static final int DL_CLASS_CODE_F_FROM = 533;

  /** DL category F codes */
  public static final int DL_CLASS_CODE_F_NOTES = 534;

  /** DL category F valid to */
  public static final int DL_CLASS_CODE_F_TO = 535;

  /** DL category FA valid from */
  public static final int DL_CLASS_CODE_FA_FROM = 536;

  /** DL category FA codes */
  public static final int DL_CLASS_CODE_FA_NOTES = 537;

  /** DL category FA valid to */
  public static final int DL_CLASS_CODE_FA_TO = 538;

  /** DL category FA1 valid from */
  public static final int DL_CLASS_CODE_FA1_FROM = 539;

  /** DL category FA1 codes */
  public static final int DL_CLASS_CODE_FA1_NOTES = 540;

  /** DL category FA1 valid to */
  public static final int DL_CLASS_CODE_FA1_TO = 541;

  /** DL category FB valid from */
  public static final int DL_CLASS_CODE_FB_FROM = 542;

  /** DL category FB codes */
  public static final int DL_CLASS_CODE_FB_NOTES = 543;

  /** DL category FB valid to */
  public static final int DL_CLASS_CODE_FB_TO = 544;

  /** DL category G1 valid from */
  public static final int DL_CLASS_CODE_G1_FROM = 545;

  /** DL category G1 codes */
  public static final int DL_CLASS_CODE_G1_NOTES = 546;

  /** DL category G1 valid to */
  public static final int DL_CLASS_CODE_G1_TO = 547;

  /** DL category H valid from */
  public static final int DL_CLASS_CODE_H_FROM = 548;

  /** DL category H codes */
  public static final int DL_CLASS_CODE_H_NOTES = 549;

  /** DL category H valid to */
  public static final int DL_CLASS_CODE_H_TO = 550;

  /** DL category I valid from */
  public static final int DL_CLASS_CODE_I_FROM = 551;

  /** DL category I codes */
  public static final int DL_CLASS_CODE_I_NOTES = 552;

  /** DL category I valid to */
  public static final int DL_CLASS_CODE_I_TO = 553;

  /** DL category K valid from */
  public static final int DL_CLASS_CODE_K_FROM = 554;

  /** DL category K codes */
  public static final int DL_CLASS_CODE_K_NOTES = 555;

  /** DL category K valid to */
  public static final int DL_CLASS_CODE_K_TO = 556;

  /** DL category LK valid from */
  public static final int DL_CLASS_CODE_LK_FROM = 557;

  /** DL category LK codes */
  public static final int DL_CLASS_CODE_LK_NOTES = 558;

  /** DL category LK valid to */
  public static final int DL_CLASS_CODE_LK_TO = 559;

  /** DL category N valid from */
  public static final int DL_CLASS_CODE_N_FROM = 560;

  /** DL category N codes */
  public static final int DL_CLASS_CODE_N_NOTES = 561;

  /** DL category N valid to */
  public static final int DL_CLASS_CODE_N_TO = 562;

  /** DL category S valid from */
  public static final int DL_CLASS_CODE_S_FROM = 563;

  /** DL category S codes */
  public static final int DL_CLASS_CODE_S_NOTES = 564;

  /** DL category S valid to */
  public static final int DL_CLASS_CODE_S_TO = 565;

  /** DL category TB valid from */
  public static final int DL_CLASS_CODE_TB_FROM = 566;

  /** DL category TB codes */
  public static final int DL_CLASS_CODE_TB_NOTES = 567;

  /** DL category TB valid to */
  public static final int DL_CLASS_CODE_TB_TO = 568;

  /** DL category TM valid from */
  public static final int DL_CLASS_CODE_TM_FROM = 569;

  /** DL category TM codes */
  public static final int DL_CLASS_CODE_TM_NOTES = 570;

  /** DL category TM valid to */
  public static final int DL_CLASS_CODE_TM_TO = 571;

  /** DL category TR valid from */
  public static final int DL_CLASS_CODE_TR_FROM = 572;

  /** DL category TR codes */
  public static final int DL_CLASS_CODE_TR_NOTES = 573;

  /** DL category TR valid to */
  public static final int DL_CLASS_CODE_TR_TO = 574;

  /** DL category TV valid from */
  public static final int DL_CLASS_CODE_TV_FROM = 575;

  /** DL category TV codes */
  public static final int DL_CLASS_CODE_TV_NOTES = 576;

  /** DL category TV valid to */
  public static final int DL_CLASS_CODE_TV_TO = 577;

  /** DL category V valid from */
  public static final int DL_CLASS_CODE_V_FROM = 578;

  /** DL category V codes */
  public static final int DL_CLASS_CODE_V_NOTES = 579;

  /** DL category V valid to */
  public static final int DL_CLASS_CODE_V_TO = 580;

  /** DL category W valid from */
  public static final int DL_CLASS_CODE_W_FROM = 581;

  /** DL category W codes */
  public static final int DL_CLASS_CODE_W_NOTES = 582;

  /** DL category W valid to */
  public static final int DL_CLASS_CODE_W_TO = 583;

  /** URL */
  public static final int URL = 584;

  /** Caliber */
  public static final int CALIBER = 585;

  /** Model */
  public static final int MODEL = 586;

  /** Make */
  public static final int MAKE = 587;

  /** Number of cylinders */
  public static final int NUMBER_OF_CYLINDERS = 588;

  /** Surname of husband after registration */
  public static final int SURNAME_OF_HUSBAND_AFTER_REGISTRATION = 589;

  /** Surname of wife after registration */
  public static final int SURNAME_OF_WIFE_AFTER_REGISTRATION = 590;

  /** Date of birth of wife */
  public static final int DATE_OF_BIRTH_OF_WIFE = 591;

  /** Date of birth of husband */
  public static final int DATE_OF_BIRTH_OF_HUSBAND = 592;

  /** Citizenship of first person */
  public static final int CITIZENSHIP_OF_FIRST_PERSON = 593;

  /** Citizenship of second person */
  public static final int CITIZENSHIP_OF_SECOND_PERSON = 594;

  /** CVV code */
  public static final int CVV = 595;

  /** Date of insurance expiry */
  public static final int DATE_OF_INSURANCE_EXPIRY = 596;

  /** Mortgage by */
  public static final int MORTGAGE_BY = 597;

  /** Old document number */
  public static final int OLD_DOCUMENT_NUMBER = 598;

  /** Old date of issue */
  public static final int OLD_DATE_OF_ISSUE = 599;

  /** Old place of issue */
  public static final int OLD_PLACE_OF_ISSUE = 600;

  /** DL category LR valid from */
  public static final int DL_CLASS_CODE_LR_FROM = 601;

  /** DL category LR valid to */
  public static final int DL_CLASS_CODE_LR_TO = 602;

  /** DL category LR codes */
  public static final int DL_CLASS_CODE_LR_NOTES = 603;

  /** DL category MR valid from */
  public static final int DL_CLASS_CODE_MR_FROM = 604;

  /** DL category MR valid to */
  public static final int DL_CLASS_CODE_MR_TO = 605;

  /** DL category MR codes */
  public static final int DL_CLASS_CODE_MR_NOTES = 606;

  /** DL category HR valid from */
  public static final int DL_CLASS_CODE_HR_FROM = 607;

  /** DL category HR valid to */
  public static final int DL_CLASS_CODE_HR_TO = 608;

  /** DL category HR codes */
  public static final int DL_CLASS_CODE_HR_NOTES = 609;

  /** DL category HC valid from */
  public static final int DL_CLASS_CODE_HC_FROM = 610;

  /** DL category HC valid to */
  public static final int DL_CLASS_CODE_HC_TO = 611;

  /** DL category HC codes */
  public static final int DL_CLASS_CODE_HC_NOTES = 612;

  /** DL category MC valid from */
  public static final int DL_CLASS_CODE_MC_FROM = 613;

  /** DL category MC valid to */
  public static final int DL_CLASS_CODE_MC_TO = 614;

  /** DL category MC codes */
  public static final int DL_CLASS_CODE_MC_NOTES = 615;

  /** DL category RE valid from */
  public static final int DL_CLASS_CODE_RE_FROM = 616;

  /** DL category RE valid to */
  public static final int DL_CLASS_CODE_RE_TO = 617;

  /** DL category RE codes */
  public static final int DL_CLASS_CODE_RE_NOTES = 618;

  /** DL category R valid from */
  public static final int DL_CLASS_CODE_R_FROM = 619;

  /** DL category R valid to */
  public static final int DL_CLASS_CODE_R_TO = 620;

  /** DL category R codes */
  public static final int DL_CLASS_CODE_R_NOTES = 621;

  /** DL category CA valid from */
  public static final int DL_CLASS_CODE_CA_FROM = 622;

  /** DL category CA valid to */
  public static final int DL_CLASS_CODE_CA_TO = 623;

  /** DL category CA codes */
  public static final int DL_CLASS_CODE_CA_NOTES = 624;

  /** Citizenship status */
  public static final int CITIZENSHIP_STATUS = 625;

  /** Military service from */
  public static final int MILITARY_SERVICE_FROM = 626;

  /** Military service to */
  public static final int MILITARY_SERVICE_TO = 627;

  /** DL category NT valid from */
  public static final int DL_CLASS_CODE_NT_FROM = 628;

  /** DL category NT valid to */
  public static final int DL_CLASS_CODE_NT_TO = 629;

  /** DL category NT codes */
  public static final int DL_CLASS_CODE_NT_NOTES = 630;

  /** DL category TN valid from */
  public static final int DL_CLASS_CODE_TN_FROM = 631;

  /** DL category TN valid to */
  public static final int DL_CLASS_CODE_TN_TO = 632;

  /** DL category TN codes */
  public static final int DL_CLASS_CODE_TN_NOTES = 633;

  /** DL category D3 valid from */
  public static final int DL_CLASS_CODE_D3_FROM = 634;

  /** DL category D3 valid to */
  public static final int DL_CLASS_CODE_D3_TO = 635;

  /** DL category D3 codes */
  public static final int DL_CLASS_CODE_D3_NOTES = 636;

  /** Alternative date of expiry */
  public static final int ALT_DATE_OF_EXPIRY = 637;

  /** DL category CD valid from */
  public static final int DL_CLASS_CODE_CD_FROM = 638;

  /** DL category CD valid to */
  public static final int DL_CLASS_CODE_CD_TO = 639;

  /** DL category CD codes */
  public static final int DL_CLASS_CODE_CD_NOTES = 640;

  /** Issuer identification number */
  public static final int ISSUER_IDENTIFICATION_NUMBER = 641;

  /** Payment period from */
  public static final int PAYMENT_PERIOD_FROM = 642;

  /** Payment period to */
  public static final int PAYMENT_PERIOD_TO = 643;

  /** Vaccination certificate identifier */
  public static final int VACCINATION_CERTIFICATE_IDENTIFIER = 644;

  /** First name */
  public static final int FIRST_NAME = 645;

  /** Date of arrival */
  public static final int DATE_OF_ARRIVAL = 646;

  /** Second name */
  public static final int SECOND_NAME = 647;

  /** Third name */
  public static final int THIRD_NAME = 648;

  /** Fourth name */
  public static final int FOURTH_NAME = 649;

  /** Last name */
  public static final int LAST_NAME = 650;

  /** DL category RM valid from */
  public static final int DL_CLASS_CODE_RM_FROM = 651;

  /** DL category RM codes */
  public static final int DL_CLASS_CODE_RM_NOTES = 652;

  /** DL category RM valid to */
  public static final int DL_CLASS_CODE_RM_TO = 653;

  /** DL category PW valid from */
  public static final int DL_CLASS_CODE_PW_FROM = 654;

  /** DL category PW codes */
  public static final int DL_CLASS_CODE_PW_NOTES = 655;

  /** DL category PW valid to */
  public static final int DL_CLASS_CODE_PW_TO = 656;

  /** DL category EB valid from */
  public static final int DL_CLASS_CODE_EB_FROM = 657;

  /** DL category EB codes */
  public static final int DL_CLASS_CODE_EB_NOTES = 658;

  /** DL category EB valid to */
  public static final int DL_CLASS_CODE_EB_TO = 659;

  /** DL category EC valid from */
  public static final int DL_CLASS_CODE_EC_FROM = 660;

  /** DL category EC codes */
  public static final int DL_CLASS_CODE_EC_NOTES = 661;

  /** DL category EC valid to */
  public static final int DL_CLASS_CODE_EC_TO = 662;

  /** DL category EC1 valid from */
  public static final int DL_CLASS_CODE_EC1_FROM = 663;

  /** DL category EC1 codes */
  public static final int DL_CLASS_CODE_EC1_NOTES = 664;

  /** DL category EC1 valid to */
  public static final int DL_CLASS_CODE_EC1_TO = 665;

  /** Place of birth city */
  public static final int PLACE_OF_BIRTH_CITY = 666;

  /** Year of birth */
  public static final int YEAR_OF_BIRTH = 667;

  /** Year of expiry */
  public static final int YEAR_OF_EXPIRY = 668;

  /** Grandfather&#39;s name (maternal) */
  public static final int GRANDFATHER_NAME_MATERNAL = 669;

  /** First surname */
  public static final int FIRST_SURNAME = 670;

  /** Month of birth */
  public static final int MONTH_OF_BIRTH = 671;

  /** Floor number */
  public static final int ADDRESS_FLOOR_NUMBER = 672;

  /** Entrance number */
  public static final int ADDRESS_ENTRANCE = 673;

  /** Block number */
  public static final int ADDRESS_BLOCK_NUMBER = 674;

  /** Street number */
  public static final int ADDRESS_STREET_NUMBER = 675;

  /** Street type */
  public static final int ADDRESS_STREET_TYPE = 676;

  /** City sector */
  public static final int ADDRESS_CITY_SECTOR = 677;

  /** County type */
  public static final int ADDRESS_COUNTY_TYPE = 678;

  /** City type */
  public static final int ADDRESS_CITY_TYPE = 679;

  /** Building type */
  public static final int ADDRESS_BUILDING_TYPE = 680;

  /** Date of Retirement */
  public static final int DATE_OF_RETIREMENT = 681;

  /** Document Status */
  public static final int DOCUMENT_STATUS = 682;

  /** Signature */
  public static final int SIGNATURE = 683;

  /** Unique Certificate Identifier */
  public static final int FT_UNIQUE_CERTIFICATE_IDENTIFIER = 684;

  /** Email */
  public static final int FT_EMAIL = 685;

  /** Date of Specimen Collection */
  public static final int FT_DATE_OF_SPECIMEN_COLLECTION = 686;

  /** Type Of Testing */
  public static final int FT_TYPE_OF_TESTING = 687;

  /** Result Of Testing */
  public static final int FT_RESULT_OF_TESTING = 688;

  /** Method Of Testing */
  public static final int FT_METHOD_OF_TESTING = 689;

  /** Digital Travel Authorization Number */
  public static final int FT_DIGITAL_TRAVEL_AUTHORIZATION_NUMBER = 690;

  /** Date of First Positive Test Result */
  public static final int FT_DATE_OF_FIRST_POSITIVE_TEST_RESULT = 691;
}
