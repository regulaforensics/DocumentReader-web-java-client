/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 5.5.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

public class TextFieldType {

  /** Document class code */
  public static final int DOCUMENT_CLASS_CODE = 0;

  /**
   * Issuing country document code in accordance with the standard ISO 3166-1 (ICAO, document 9303)
   */
  public static final int ISSUING_STATE_CODE = 1;

  /** Document number */
  public static final int DOCUMENT_NUMBER = 2;

  /** Document expiration date */
  public static final int DATE_OF_EXPIRY = 3;

  /** Date of issue */
  public static final int DATE_OF_ISSUE = 4;

  /** Date of birth */
  public static final int DATE_OF_BIRTH = 5;

  /** Place of birth */
  public static final int PLACE_OF_BIRTH = 6;

  /** Personal number */
  public static final int PERSONAL_NUMBER = 7;

  /** Surname */
  public static final int SURNAME = 8;

  /** Given name (names) */
  public static final int GIVEN_NAME = 9;

  /** Mother&#x60;s name */
  public static final int MOTHERS_NAME = 10;

  /** Nationality */
  public static final int NATIONALITY = 11;

  /** Sex */
  public static final int SEX = 12;

  /** Height */
  public static final int HEIGHT = 13;

  /** Weight */
  public static final int WEIGHT = 14;

  /** Eyes color */
  public static final int EYES_COLOR = 15;

  /** Hair color */
  public static final int HAIR_COLOR = 16;

  /** Address */
  public static final int ADDRESS = 17;

  /** Donation stamp */
  public static final int DONOR = 18;

  /** Social security number */
  public static final int SOCIAL_SECURITY_NUMBER = 19;

  /** Driving license class */
  public static final int DL_CLASS = 20;

  /** Driving license permission code */
  public static final int DL_ENDORSED = 21;

  /** Driving license restriction code */
  public static final int DL_RESTRICTION_CODE = 22;

  /** Date when the owner of the document turns 21 years old */
  public static final int DL_UNDER_21_DATE = 23;

  /** Document issuing authority */
  public static final int AUTHORITY = 24;

  /** Full name */
  public static final int SURNAME_AND_GIVEN_NAMES = 25;

  /** Nationality letter code according to standard ISO 3166-1 (ICAO doc 9303) */
  public static final int NATIONALITY_CODE = 26;

  /** Passport number (used in visas) */
  public static final int PASSPORT_NUMBER = 27;

  /** Invitation number (used in visas) */
  public static final int INVITATION_NUMBER = 28;

  /** Visa ID */
  public static final int VISA_ID = 29;

  /** Visa class */
  public static final int VISA_CLASS = 30;

  /** Visa subclass */
  public static final int VISA_SUBCLASS = 31;

  /** MRZ type */
  public static final int MRZ_TYPE = 35;

  /** Full name of the document class */
  public static final int DOCUMENT_CLASS_NAME = 37;

  /** Full name of issuing state */
  public static final int ISSUING_STATE_NAME = 38;

  /** Place of document issue */
  public static final int PLACE_OF_ISSUE = 39;

  /** Document number checksum */
  public static final int DOCUMENT_NUMBER_CHECKSUM = 40;

  /** Date of birth checksum */
  public static final int DATE_OF_BIRTH_CHECKSUM = 41;

  /** Date of document expiration checksum */
  public static final int DATE_OF_EXPIRY_CHECKSUM = 42;

  /** Personal number checksum */
  public static final int PERSONAL_NUMBER_CHECKSUM = 43;

  /** Final checksum */
  public static final int FINAL_CHECKSUM = 44;

  /** Passport number checksum (used in visas) */
  public static final int PASSPORT_NUMBER_CHECKSUM = 45;

  /** Invitation number checksum (used in visas) */
  public static final int INVITATION_NUMBER_CHECKSUM = 46;

  /** Visa identification number checksum */
  public static final int VISA_ID_CHECKSUM = 47;

  /** Full name checksum */
  public static final int SURNAME_AND_GIVEN_NAME_CHECKSUM = 48;

  /** Visa expiration date checksum */
  public static final int VISA_VALID_UNTIL_CHECKSUM = 49;

  /** Other information */
  public static final int OTHER = 50;

  /** MRZ strings */
  public static final int MRZ_STRINGS = 51;

  /** Name suffix */
  public static final int NAME_SUFFIX = 52;

  /** Name prefix */
  public static final int NAME_PREFIX = 53;

  /** Checksum for the date of issue of the document */
  public static final int DATE_OF_ISSUE_CHECKSUM = 54;

  /** Check digit for or the date of issue of the document */
  public static final int DATE_OF_ISSUE_CHECK_DIGIT = 55;

  /** Document series */
  public static final int DOCUMENT_SERIES = 56;

  /** Vehicle registration certificate number */
  public static final int REG_CERT_REG_NUMBER = 57;

  /** Vehicle model */
  public static final int REG_CERT_CAR_MODEL = 58;

  /** Vehicle color */
  public static final int REG_CERT_CAR_COLOR = 59;

  /** Vehicle body number */
  public static final int REG_CERT_BODY_NUMBER = 60;

  /** Vehicle type */
  public static final int REG_CERT_CAR_TYPE = 61;

  /** Vehicle GVWR */
  public static final int REG_CERT_MAX_WEIGHT = 62;

  /** Vehicle unladen weight */
  public static final int REG_CERT_WEIGHT = 63;

  /** Address (region) */
  public static final int ADDRESS_AREA = 64;

  /** Address (state) */
  public static final int ADDRESS_STATE = 65;

  /** Address (building number) */
  public static final int ADDRESS_BUILDING = 66;

  /** Address (house number) */
  public static final int ADDRESS_HOUSE = 67;

  /** Address (flat number) */
  public static final int ADDRESS_FLAT = 68;

  /** Place of registration */
  public static final int PLACE_OF_REGISTRATION = 69;

  /** Date of registration */
  public static final int DATE_OF_REGISTRATION = 70;

  /** Start date of residence */
  public static final int RESIDENT_FROM = 71;

  /** End date of residence */
  public static final int RESIDENT_UNTIL = 72;

  /** Issuing authority code */
  public static final int AUTHORITY_CODE = 73;

  /** Place of birth address (region) */
  public static final int PLACE_OF_BIRTH_AREA = 74;

  /** Place of birth address (state code) */
  public static final int PLACE_OF_BIRTH_STATE_CODE = 75;

  /** Address (street) */
  public static final int ADDRESS_STREET = 76;

  /** Address (city) */
  public static final int ADDRESS_CITY = 77;

  /** Address (tax code) */
  public static final int ADDRESS_JURISDICTION_CODE = 78;

  /** Address (postal code) */
  public static final int ADDRESS_POSTAL_CODE = 79;

  /** Check digit for document number */
  public static final int DOCUMENT_NUMBER_CHECK_DIGIT = 80;

  /** Check digit for date of birth */
  public static final int DATE_OF_BIRTH_CHECK_DIGIT = 81;

  /** Check digit for date of expiry */
  public static final int DATE_OF_EXPIRY_CHECK_DIGIT = 82;

  /** Check digit for personal number */
  public static final int PERSONAL_NUMBER_CHECK_DIGIT = 83;

  /** Final check digit for all MRZ */
  public static final int FINAL_CHECK_DIGIT = 84;

  /** Check digit for passport number (used in visas) */
  public static final int PASSPORT_NUMBER_CHECK_DIGIT = 85;

  /** Check digit for invitation number (used in visas) */
  public static final int INVITATION_NUMBER_CHECK_DIGIT = 86;

  /** Check digit for visa identification number */
  public static final int VISA_ID_CHECK_DIGIT = 87;

  /** Check digit for full name */
  public static final int SURNAME_AND_GIVEN_NAMES_CHECK_DIGIT = 88;

  /** Check digit for visa expiration date */
  public static final int VISA_VALID_UNTIL_CHECK_DIGIT = 89;

  /** Permit type */
  public static final int PERMIT_DL_CLASS = 90;

  /** Permit expiration date */
  public static final int PERMIT_DATE_OF_EXPIRY = 91;

  /** Permit identifier */
  public static final int PERMIT_IDENTIFIER = 92;

  /** Permit issue date */
  public static final int PERMIT_DATE_OF_ISSUE = 93;

  /** Driving restriction code */
  public static final int PERMIT_RESTRICTION_CODE = 94;

  /** Driving permit code */
  public static final int PERMIT_ENDORSED = 95;

  /** A string that is used to validate a document against a database */
  public static final int ISSUE_TIMESTAMP = 96;

  /** Number of duplicates */
  public static final int NUMBER_OF_DUPLICATES = 97;

  /** Medical indicator codes */
  public static final int MEDICAL_INDICATOR_CODES = 98;

  /** Non resident stamp */
  public static final int NON_RESIDENT_INDICATOR = 99;

  /** Visa type */
  public static final int VISA_TYPE = 100;

  /** Visa valid-from date */
  public static final int VISA_VALID_FROM = 101;

  /** Visa valid-until date */
  public static final int VISA_VALID_UNTIL = 102;

  /** Duration of stay on visa */
  public static final int DURATION_OF_STAY = 103;

  /** Number of entries */
  public static final int NUMBER_OF_ENTRIES = 104;

  /** Day in date */
  public static final int DAY = 105;

  /** Month in date */
  public static final int MONTH = 106;

  /** Year in date */
  public static final int YEAR = 107;

  /** Unique customer identifier */
  public static final int UNIQUE_CUSTOMER_IDENTIFIER = 108;

  /** Commercial vehicle code */
  public static final int COMMERCIAL_VEHICLE_CODES = 109;

  /** Also known as (date of birth) */
  public static final int AKA_DATE_OF_BIRTH = 110;

  /** Also known as (social security number) */
  public static final int AKA_SOCIAL_SECURITY_NUMBER = 111;

  /** Also known as (last name) */
  public static final int AKA_SURNAME = 112;

  /** Also known as (first name) */
  public static final int AKA_GIVEN_NAMES = 113;

  /** Also known as (name suffix) */
  public static final int AKA_NAME_SUFFIX = 114;

  /** Also known as (name prefix) */
  public static final int AKA_NAME_PREFIX = 115;

  /** Postal address (street) */
  public static final int MAILING_ADDRESS_STREET = 116;

  /** Postal address (city) */
  public static final int MAILING_ADDRESS_CITY = 117;

  /** Postal address (tax code) */
  public static final int MAILING_ADDRESS_JURISDICTION_CODE = 118;

  /** Postal address (zip) */
  public static final int MAILING_ADDRESS_POSTAL_CODE = 119;

  /** Driver license validation number */
  public static final int AUDIT_INFORMATION = 120;

  /** Inventory number */
  public static final int INVENTORY_NUMBER = 121;

  /** Race ethnicity */
  public static final int RACE_ETHNICITY = 122;

  /** Vehicle legal class */
  public static final int JURISDICTION_VEHICLE_CLASS = 123;

  /** Legal permission code */
  public static final int JURISDICTION_ENDORSEMENT_CODE = 124;

  /** Legal restriction code */
  public static final int JURISDICTION_RESTRICTION_CODE = 125;

  /** Surname and (or) name at birth */
  public static final int FAMILY_NAME = 126;

  /** Name (russian transcription) */
  public static final int GIVEN_NAMES_RUS = 127;

  /** Visa identification number (russian transcription) */
  public static final int VISA_ID_RUS = 128;

  /** Father&#x60;s name */
  public static final int FATHERS_NAME = 129;

  /** Father&#x60;s name (russian transcription) */
  public static final int FATHERS_NAME_RUS = 130;

  /** Full name (russian transcription) */
  public static final int SURNAME_AND_GIVEN_NAME_RUS = 131;

  /** Place of birth (russian transcription) */
  public static final int PLACE_OF_BIRTH_RUS = 132;

  /** Issuing authority (russian transcription) */
  public static final int AUTHORITY_RUS = 133;

  /**
   * Digital code of the state of issue of the document in accordance with ISO 3166-1 (ICAO Doc
   * 9303)
   */
  public static final int ISSUING_STATE_CODE_NUMERIC = 134;

  /** Digital code of nationality in accordance with ISO 3166-1 (ICAO Doc 9303) */
  public static final int NATIONALITY_CODE_NUMERIC = 135;

  /** Vehicle engine power */
  public static final int ENGINE_POWER = 136;

  /** Vehicle engine volume */
  public static final int ENGINE_VOLUME = 137;

  /** Vehicle chassis number */
  public static final int CHASSIS_NUMBER = 138;

  /** Vehicle engine number */
  public static final int ENGINE_NUMBER = 139;

  /** Vehicle engine model */
  public static final int ENGINE_MODEL = 140;

  /** Vehicle category */
  public static final int VEHICLE_CATEGORY = 141;

  /** Identity card number */
  public static final int IDENTITY_CARD_NUMBER = 142;

  /** Control number */
  public static final int CONTROL_NUMBER = 143;

  /** Parent names */
  public static final int PARENTS_GIVEN_NAMES = 144;

  /** Second last name */
  public static final int SECOND_SURNAME = 145;

  /** Middle name */
  public static final int MIDDLE_NAME = 146;

  /** Vehicle identification number */
  public static final int REG_CERT_VIN = 147;

  /** Check digit for vehicle identification number */
  public static final int REG_CERT_VIN_CHECK_DIGIT = 148;

  /** Checksum for vehicle identification number */
  public static final int REG_CERT_VIN_CHECKSUM = 149;

  /** Check digit of the first line of the MRZ */
  public static final int LINE_1_CHECK_DIGIT = 150;

  /** Check digit of the second line of the MRZ */
  public static final int LINE_2_CHECK_DIGIT = 151;

  /** Check digit of the third line of the MRZ */
  public static final int LINE_3_CHECK_DIGIT = 152;

  /** Checksum of the first line of the MRZ */
  public static final int LINE_1_CHECKSUM = 153;

  /** Checksum of the second line of the MRZ */
  public static final int LINE_2_CHECKSUM = 154;

  /** Checksum of the third line of the MRZ */
  public static final int LINE_3_CHECKSUM = 155;

  /** Check digit of the vehicle registration number */
  public static final int REG_CERT_REG_NUMBER_CHECK_DIGIT = 156;

  /** Checksum of the vehicle registration number */
  public static final int REG_CERT_REG_NUMBER_CHECKSUM = 157;

  /** Vehicle code in accordance with ITS (Intelligent Transport System) */
  public static final int REG_CERT_VEHICLE_ITS_CODE = 158;

  /** Card number for access to the RFID chip */
  public static final int CARD_ACCESS_NUMBER = 159;

  /** Marital status */
  public static final int MARITAL_STATUS = 160;

  /** Company name */
  public static final int COMPANY_NAME = 161;

  /** Special notes */
  public static final int SPECIAL_NOTES = 162;

  /** Spouse&#x60;s last name */
  public static final int SURNAME_OF_SPOUSE = 163;

  /** Document status tracking number */
  public static final int TRACKING_NUMBER = 164;

  /** Booklet number */
  public static final int BOOKLET_NUMBER = 165;

  /** Children */
  public static final int CHILDREN = 166;

  /** Copy number */
  public static final int COPY_NUMBER = 167;

  /** Serial number */
  public static final int SERIAL_NUMBER = 168;

  /** Dossier number */
  public static final int DOSSIER_NUMBER = 169;

  /** Also known as (full name) */
  public static final int AKA_SURNAME_AND_GIVEN_NAMES = 170;

  /** Territorial validity */
  public static final int TERRITORIAL_VALIDITY = 171;

  /** MRZ strings with correct checksums (calculated) */
  public static final int MRZ_STRINGS_WITH_CORRECT_CHECK_SUMS = 172;

  /** Restriction code for commercial driving license */
  public static final int DL_CDL_RESTRICTION_CODE = 173;

  /** Date the document holder turns 18 years old */
  public static final int DL_UNDER_18_DATE = 174;

  /** Record creation date */
  public static final int DL_RECORD_CREATED = 175;

  /** Duplicate creation date */
  public static final int DL_DUPLICATE_DATE = 176;

  /** Driving license type */
  public static final int DL_ISSUE_TYPE = 177;

  /** Military card number */
  public static final int MILITARY_BOOK_NUMBER = 178;

  /** Destination */
  public static final int DESTINATION = 179;

  /** Blood type */
  public static final int BLOOD_GROUP = 180;

  /** Sequence number */
  public static final int SEQUENCE_NUMBER = 181;

  /** Vehicle body type */
  public static final int REG_CERT_BODY_TYPE = 182;

  /** Make of vehicle */
  public static final int REG_CERT_CAR_MARK = 183;

  /** Transaction number */
  public static final int TRANSACTION_NUMBER = 184;

  /** Age */
  public static final int AGE = 185;

  /** Registration number (document on the record-keeping system) */
  public static final int FOLIO_NUMBER = 186;

  /** Voter personal number */
  public static final int VOTER_KEY = 187;

  /** Address (municipality) */
  public static final int ADDRESS_MUNICIPALITY = 188;

  /** Address (locality) */
  public static final int ADDRESS_LOCATION = 189;

  /** Domain/sector */
  public static final int SECTION = 190;

  /** OCR number */
  public static final int OCR_NUMBER = 191;

  /** Federal elections */
  public static final int FEDERAL_ELECTIONS = 192;

  /** Reference number */
  public static final int REFERENCE_NUMBER = 193;

  /** Optional data checksum */
  public static final int OPTIONAL_DATA_CHECKSUM = 194;

  /** Optional data check digit */
  public static final int OPTIONAL_DATA_CHECK_DIGIT = 195;

  /** Visa number */
  public static final int VISA_NUMBER = 196;

  /** Visa number checksum */
  public static final int VISA_NUMBER_CHECKSUM = 197;

  /** Visa number check digit */
  public static final int VISA_NUMBER_CHECK_DIGIT = 198;

  /** Voter */
  public static final int VOTER = 199;

  /** Type/number of previous document */
  public static final int PREVIOUS_TYPE = 200;

  /** Field from MRZ */
  public static final int FIELD_FROM_MRZ = 220;

  /** Current date */
  public static final int CURRENT_DATE = 221;

  /** Status expiration date */
  public static final int STATUS_DATE_OF_EXPIRY = 251;

  /** bank note number */
  public static final int BANK_NOTE_NUMBER = 252;

  /** Code of customer service center */
  public static final int CSC_CODE = 253;

  /** Pseudonym */
  public static final int ARTISTIC_NAME = 254;

  /** Academic rank */
  public static final int ACADEMIC_TITLE = 255;

  /** Address (country) */
  public static final int ADDRESS_COUNTRY = 256;

  /** Address (zip) */
  public static final int ADDRESS_ZIP_CODE = 257;

  /** Information on a permit for permanent residence 1 (field for eID) */
  public static final int E_ID_RESIDENCE_PERMIT_1 = 258;

  /** Information on a permit for permanent residence 2 (field for eID) */
  public static final int E_ID_RESIDENCE_PERMIT_2 = 259;

  /** Place of birth address: street (field for eID) */
  public static final int E_ID_PLACE_OF_BIRTH_STREET = 260;

  /** Place of birth address: city (field for eID) */
  public static final int E_ID_PLACE_OF_BIRTH_CITY = 261;

  /** Place of birth address: state (field for eID) */
  public static final int E_ID_PLACE_OF_BIRTH_STATE = 262;

  /** Place of birth address: country (field for eID) */
  public static final int E_ID_PLACE_OF_BIRTH_COUNTRY = 263;

  /** Place of birth address: zip (field for eID) */
  public static final int E_ID_PLACE_OF_BIRTH_ZIP_CODE = 264;

  /** Commercial driving license class */
  public static final int CDL_CLASS = 265;

  /** Date when the holder of the document is 19 years old */
  public static final int DL_UNDER_19_DATE = 266;

  /** Weight (pounds) */
  public static final int WEIGHT_POUNDS = 267;

  /** Document expiration indicator */
  public static final int LIMITED_DURATION_DOCUMENT_INDICATOR = 268;

  /** Driving license permit */
  public static final int ENDORSEMENT_EXPIRATION_DATE = 269;

  /** Revision date */
  public static final int REVISION_DATE = 270;

  /** Compliance type */
  public static final int COMPLIANCE_TYPE = 271;

  /** Abbreviated last name */
  public static final int FAMILY_NAME_TRUNCATION = 272;

  /** Abbreviated first name */
  public static final int FIRST_NAME_TRUNCATION = 273;

  /** Abbreviated middle name */
  public static final int MIDDLE_NAME_TRUNCATION = 274;

  /** Exam date */
  public static final int EXAM_DATE = 275;

  /** Organization */
  public static final int ORGANIZATION = 276;

  /** Department */
  public static final int DEPARTMENT = 277;

  /** Salary level */
  public static final int PAY_GRADE = 278;

  /** Rank/status/title */
  public static final int RANK = 279;

  /** Number confirming the right to receive benefits */
  public static final int BENEFITS_NUMBER = 280;

  /** Type of armed forces in which sponsor serves */
  public static final int SPONSOR_SERVICE = 281;

  /** Sponsor status */
  public static final int SPONSOR_STATUS = 282;

  /** Sponsor */
  public static final int SPONSOR = 283;

  /** Degree of kindred */
  public static final int RELATIONSHIP = 284;

  /** US Citizenship and Immigration Services Alien Registration Number */
  public static final int USCIS = 285;

  /** Category */
  public static final int CATEGORY = 286;

  /** Remainder term */
  public static final int CONDITIONS = 287;

  /** Conditions */
  public static final int IDENTIFIER = 288;

  /** Identifier */
  public static final int CONFIGURATION = 289;

  /** Configuration */
  public static final int DISCRETIONARY_DATA = 290;

  /** Optional data */
  public static final int LINE_1_OPTIONAL_DATA = 291;

  /** Optional data from MRZ first line */
  public static final int LINE_2_OPTIONAL_DATA = 292;

  /** Optional data from MRZ second line */
  public static final int LINE_3_OPTIONAL_DATA = 293;

  /** Optional data from MRZ third line */
  public static final int EQV_CODE = 294;

  /** EQV-code */
  public static final int ALT_CODE = 295;

  /** ALT-code */
  public static final int BINARY_CODE = 296;

  /** Binary code */
  public static final int PSEUDO_CODE = 297;

  /** Pseudo code */
  public static final int FEE = 298;

  /** Fee */
  public static final int STAMP_NUMBER = 299;

  /** Stamp number */
  public static final int SBH_SECURITY_OPTIONS = 300;

  /** Biometric data protection settings */
  public static final int SBH_INTEGRITY_OPTIONS = 301;

  /** Biometric data integrity parameters */
  public static final int DATE_OF_CREATION = 302;

  /** Biometric data creation date */
  public static final int VALIDITY_PERIOD = 303;

  /** Biometric data validity period */
  public static final int PATRON_HEADER_VERSION = 304;

  /** Biometric data header format version */
  public static final int BDB_TYPE = 305;

  /** Biometric data record type */
  public static final int BIOMETRIC_TYPE = 306;

  /** Biometric data type */
  public static final int BIOMETRIC_SUBTYPE = 307;

  /** Biometric data subtype */
  public static final int BIOMETRIC_PRODUCT_ID = 308;

  /** Biometric data id */
  public static final int BIOMETRIC_FORMAT_OWNER = 309;

  /** Biometric data format */
  public static final int BIOMETRIC_FORMAT_TYPE = 310;

  /** Phone number */
  public static final int PHONE = 311;

  /** Profession */
  public static final int PROFESSION = 312;

  /** Job position */
  public static final int TITLE = 313;

  /** Common personal data */
  public static final int PERSONAL_SUMMARY = 314;

  /** Other valid identifier */
  public static final int OTHER_VALID_ID = 315;

  /** Custody info */
  public static final int CUSTODY_INFO = 316;

  /** Other name */
  public static final int OTHER_NAME = 317;

  /** Additional data */
  public static final int OBSERVATIONS = 318;

  /** Tax information */
  public static final int TAX = 319;

  /** Document personalization date */
  public static final int DATE_OF_PERSONALIZATION = 320;

  /** Personalization serial number */
  public static final int PERSONALIZATION_SN = 321;

  /** Record creation date */
  public static final int DATE_OF_RECORD = 322;

  /** Date of creation of a record of persons for notification in case of unforeseen situations */
  public static final int PERSON_TO_NOTIFY_DATE_OF_RECORD = 323;

  /** Person name for contingency notification */
  public static final int PERSON_TO_NOTIFY_NAME = 324;

  /** Person phone for contingency notification */
  public static final int PERSON_TO_NOTIFY_PHONE = 325;

  /** Person address for contingency notification */
  public static final int PERSON_TO_NOTIFY_ADDRESS = 326;

  /** Text details of the organization issuing the DS certificate */
  public static final int DS_CERTIFICATE_ISSUER = 327;

  /** Text details of the organization issuing the document */
  public static final int DS_CERTIFICATE_SUBJECT = 328;

  /** DS-certificate start date */
  public static final int DS_CERTIFICATE_VALID_FROM = 329;

  /** DS-certificate expiration date */
  public static final int DS_CERTIFICATE_VALID_TO = 330;

  /** Vehicle category/restriction/conditions from data group DG1 of the eDL application */
  public static final int VRC_DATA_OBJECT_ENTRY = 331;

  /** Type confirmation number */
  public static final int TYPE_APPROVAL_NUMBER = 332;

  /** Administrative number */
  public static final int ADMINISTRATIVE_NUMBER = 333;

  /** Document discriminator */
  public static final int DOCUMENT_DISCRIMINATOR = 334;

  /** Data discriminator */
  public static final int DATA_DISCRIMINATOR = 335;

  /** ISO issuer identifier */
  public static final int ISO_ISSUER_ID_NUMBER = 336;

  /** The Garda National Immigration Bureau registration number */
  public static final int GNIB_NUMBER = 340;

  /** Department number */
  public static final int DEPT_NUMBER = 341;

  /** Telegraph code */
  public static final int TELEX_CODE = 342;

  /** Allergies */
  public static final int ALLERGIES = 343;

  /** Sp-code */
  public static final int SP_CODE = 344;

  /** Court restriction code */
  public static final int COURT_CODE = 345;

  /** County code */
  public static final int CTY = 346;

  /** Sponsor social security number */
  public static final int SPONSOR_SSN = 347;

  /** Military identification number */
  public static final int DOD_NUMBER = 348;

  /** Novice driver until ... (date) */
  public static final int MC_NOVICE_DATE = 349;

  /**
   * Registration number in the computer system of the Norwegian Directorate of Immigration (the
   * UDI)
   */
  public static final int DUF_NUMBER = 350;

  /** Philippines Traffic Police Unit Code */
  public static final int AGY = 351;

  /** PNR-code (book number) */
  public static final int PNR_CODE = 352;

  /** Departure airport code */
  public static final int FROM_AIRPORT_CODE = 353;

  /** Arrival airport code */
  public static final int TO_AIRPORT_CODE = 354;

  /** Flight number */
  public static final int FLIGHT_NUMBER = 355;

  /** Departure date */
  public static final int DATE_OF_FLIGHT = 356;

  /** Seat number */
  public static final int SEAT_NUMBER = 357;

  /** Boarding pass issue date */
  public static final int DATE_OF_ISSUE_BOARDING_PASS = 358;

  /** Hidden weapons license, valid until... (date) */
  public static final int CCW_UNTIL = 359;

  /** Reference number checksum */
  public static final int REFERENCE_NUMBER_CHECKSUM = 360;

  /** Reference number check digit */
  public static final int REFERENCE_NUMBER_CHECK_DIGIT = 361;

  /** Room number */
  public static final int ROOM_NUMBER = 362;

  /** Religion */
  public static final int RELIGION = 363;

  /** Number of months before the due date expiration of a document */
  public static final int REMAINDER_TERM = 364;

  /** Electronic ticket indicator */
  public static final int ELECTRONIC_TICKET_INDICATOR = 365;

  /** Free baggage allowance */
  public static final int COMPARTMENT_CODE = 366;

  /** Frequent flyer number */
  public static final int CHECK_IN_SEQUENCE_NUMBER = 367;

  /** Airline frequent flyer indicator */
  public static final int AIRLINE_DESIGNATOR_OF_BOARDING_PASS_ISSUER = 368;

  /** Ticket number */
  public static final int AIRLINE_NUMERIC_CODE = 369;

  /** Airline numeric code */
  public static final int TICKET_NUMBER = 370;

  /** Boarding pass issuer code */
  public static final int FREQUENT_FLYER_AIRLINE_DESIGNATOR = 371;

  /** Check-in sequence number */
  public static final int FREQUENT_FLYER_NUMBER = 372;

  /** Compartment code */
  public static final int FREE_BAGGAGE_ALLOWANCE = 373;

  /** PDF417 codec */
  public static final int PDF_417_CODEC = 374;

  /** identity card checksum */
  public static final int IDENTITY_CARD_NUMBER_CHECKSUM = 375;

  /** identity card check digit */
  public static final int IDENTITY_CARD_NUMBER_CHECK_DIGIT = 376;

  /** Veteran */
  public static final int VETERAN = 377;

  /** Validity date of A1 driver’s license */
  public static final int DL_CLASS_CODE_A1_FROM = 378;

  /** Expiration date of A1 driver’s license */
  public static final int DL_CLASS_CODE_A1_TO = 379;

  /** Restrictions for A1 driver’s license */
  public static final int DL_CLASS_CODE_A1_NOTES = 380;

  /** Validity date of A driver’s license */
  public static final int DL_CLASS_CODE_A_FROM = 381;

  /** Expiration date of A driver’s license */
  public static final int DL_CLASS_CODE_A_TO = 382;

  /** Restrictions for A driver’s license */
  public static final int DL_CLASS_CODE_A_NOTES = 383;

  /** Validity date of B driver’s license */
  public static final int DL_CLASS_CODE_B_FROM = 384;

  /** Expiration date of B driver’s license */
  public static final int DL_CLASS_CODE_B_TO = 385;

  /** Restrictions for B driver’s license */
  public static final int DL_CLASS_CODE_B_NOTES = 386;

  /** Validity date of C1 driver’s license */
  public static final int DL_CLASS_CODE_C1_FROM = 387;

  /** Expiration date of C1 driver’s license */
  public static final int DL_CLASS_CODE_C1_TO = 388;

  /** Restrictions for C1 driver’s license */
  public static final int DL_CLASS_CODE_C1_NOTES = 389;

  /** Validity date of C driver’s license */
  public static final int DL_CLASS_CODE_C_FROM = 390;

  /** Expiration date of C driver’s license */
  public static final int DL_CLASS_CODE_C_TO = 391;

  /** Restrictions for C driver’s license */
  public static final int DL_CLASS_CODE_C_NOTES = 392;

  /** Validity date of D1 driver’s license */
  public static final int DL_CLASS_CODE_D1_FROM = 393;

  /** Expiration date of D1 driver’s license */
  public static final int DL_CLASS_CODE_D1_TO = 394;

  /** Restrictions for D1 driver’s license */
  public static final int DL_CLASS_CODE_D1_NOTES = 395;

  /** Validity date of D driver’s license */
  public static final int DL_CLASS_CODE_D_FROM = 396;

  /** Expiration date of D driver’s license */
  public static final int DL_CLASS_CODE_D_TO = 397;

  /** Restrictions for D driver’s license */
  public static final int DL_CLASS_CODE_D_NOTES = 398;

  /** Validity date of BE driver’s license */
  public static final int DL_CLASS_CODE_BE_FROM = 399;

  /** Expiration date of BE driver’s license */
  public static final int DL_CLASS_CODE_BE_TO = 400;

  /** Restrictions for BE driver’s license */
  public static final int DL_CLASS_CODE_BE_NOTES = 401;

  /** Validity date of C1E driver’s license */
  public static final int DL_CLASS_CODE_C1E_FROM = 402;

  /** Expiration date of C1E driver’s license */
  public static final int DL_CLASS_CODE_C1E_TO = 403;

  /** Restrictions for C1E driver’s license */
  public static final int DL_CLASS_CODE_C1E_NOTES = 404;

  /** Validity date of CE driver’s license */
  public static final int DL_CLASS_CODE_CE_FROM = 405;

  /** Expiration date of CE driver’s license */
  public static final int DL_CLASS_CODE_CE_TO = 406;

  /** Restrictions for CE driver’s license */
  public static final int DL_CLASS_CODE_CE_NOTES = 407;

  /** Validity date of D1E driver’s license */
  public static final int DL_CLASS_CODE_D1E_FROM = 408;

  /** Expiration date of D1E driver’s license */
  public static final int DL_CLASS_CODE_D1E_TO = 409;

  /** Restrictions for D1E driver’s license */
  public static final int DL_CLASS_CODE_D1E_NOTES = 410;

  /** Validity date of DE driver’s license */
  public static final int DL_CLASS_CODE_DE_FROM = 411;

  /** Expiration date of DE driver’s license */
  public static final int DL_CLASS_CODE_DE_TO = 412;

  /** Restrictions for DE driver’s license */
  public static final int DL_CLASS_CODE_DE_NOTES = 413;

  /** Validity date of M driver’s license */
  public static final int DL_CLASS_CODE_M_FROM = 414;

  /** Expiration date of M driver’s license */
  public static final int DL_CLASS_CODE_M_TO = 415;

  /** Restrictions for M driver’s license */
  public static final int DL_CLASS_CODE_M_NOTES = 416;

  /** Validity date of L driver’s license */
  public static final int DL_CLASS_CODE_L_FROM = 417;

  /** Expiration date of L driver’s license */
  public static final int DL_CLASS_CODE_L_TO = 418;

  /** Restrictions for L driver’s license */
  public static final int DL_CLASS_CODE_L_NOTES = 419;

  /** Validity date of T driver’s license */
  public static final int DL_CLASS_CODE_T_FROM = 420;

  /** Expiration date of T driver’s license */
  public static final int DL_CLASS_CODE_T_TO = 421;

  /** Restrictions for T driver’s license */
  public static final int DL_CLASS_CODE_T_NOTES = 422;

  /** Validity date of AM driver’s license */
  public static final int DL_CLASS_CODE_AM_FROM = 423;

  /** Expiration date of AM driver’s license */
  public static final int DL_CLASS_CODE_AM_TO = 424;

  /** Restrictions for AM driver’s license */
  public static final int DL_CLASS_CODE_AM_NOTES = 425;

  /** Validity date of A2 driver’s license */
  public static final int DL_CLASS_CODE_A2_FROM = 426;

  /** Expiration date of A2 driver’s license */
  public static final int DL_CLASS_CODE_A2_TO = 427;

  /** Restrictions for A2 driver’s license */
  public static final int DL_CLASS_CODE_A2_NOTES = 428;

  /** Validity date of B1 driver’s license */
  public static final int DL_CLASS_CODE_B1_FROM = 429;

  /** Expiration date of B1 driver’s license */
  public static final int DL_CLASS_CODE_B1_TO = 430;

  /** Restrictions for B1 driver’s license */
  public static final int DL_CLASS_CODE_B1_NOTES = 431;

  /** Last name at birth */
  public static final int SURNAME_AT_BIRTH = 432;

  /** Civil status */
  public static final int CIVIL_STATUS = 433;

  /** Number of seats */
  public static final int NUMBER_OF_SEATS = 434;

  /** Number of standing places */
  public static final int NUMBER_OF_STANDING_PLACES = 435;

  /** Max speed */
  public static final int MAX_SPEED = 436;

  /** Fuel type */
  public static final int FUEL_TYPE = 437;

  /** Vehicle emission class */
  public static final int EC_ENVIRONMENTAL_TYPE = 438;

  /** Engine power-to-weight ratio */
  public static final int POWER_WEIGHT_RATIO = 439;

  /** Trailer with brakes maximum weight */
  public static final int MAX_MASS_OF_TRAILER_BRAKED = 440;

  /** Trailer without brakes maximum weight */
  public static final int MAX_MASS_OF_TRAILER_UNBRAKED = 441;

  /** Transmission type */
  public static final int TRANSMISSION_TYPE = 442;

  /** Trailer equipment */
  public static final int TRAILER_HITCH = 443;

  /** Accompanying person */
  public static final int ACCOMPANIED_BY = 444;

  /** Police district */
  public static final int POLICE_DISTRICT = 445;

  /** Date of document first issue */
  public static final int FIRST_ISSUE_DATE = 446;

  /** Maximum payload */
  public static final int PAYLOAD_CAPACITY = 447;

  /** Number of axles */
  public static final int NUMBER_OF_AXLES = 448;

  /** Axle weight limit */
  public static final int PERMISSIBLE_AXLE_LOAD = 449;

  /** Precinct */
  public static final int PRECINCT = 450;

  /** Inviter */
  public static final int INVITED_BY = 451;

  /** Purpose of arrival */
  public static final int PURPOSE_OF_ENTRY = 452;

  /** Skin color */
  public static final int SKIN_COLOR = 453;

  /** Complexion */
  public static final int COMPLEXION = 454;

  /** Departure airport */
  public static final int AIRPORT_FROM = 455;

  /** Arrival airport */
  public static final int AIRPORT_TO = 456;

  /** Airline name */
  public static final int AIRLINE_NAME = 457;

  /** Airline bonus program for frequent flyers */
  public static final int AIRLINE_NAME_FREQUENT_FLYER = 458;

  /** License number */
  public static final int LICENSE_NUMBER = 459;

  /** In tanks */
  public static final int IN_TANKS = 460;

  /** Other than tanks */
  public static final int EXCEPT_IN_TANKS = 461;

  /** Passenger with fast track priority (express formal procedures at the airport) */
  public static final int FAST_TRACK = 462;

  /** Owner */
  public static final int OWNER = 463;

  /** MRZ strings from ICAO RFID */
  public static final int MRZ_STRINGS_ICAO_RFID = 464;

  /** Number of card issues with this number */
  public static final int NUMBER_OF_CARD_ISSUANCE = 465;

  /** Card issues count checksum */
  public static final int NUMBER_OF_CARD_ISSUANCE_CHECKSUM = 466;

  /** Card issues count check digit */
  public static final int NUMBER_OF_CARD_ISSUANCE_CHECK_DIGIT = 467;

  /** Birth century */
  public static final int CENTURY_DATE_OF_BIRTH = 468;

  /** Validity date of A3 driver’s license */
  public static final int DL_CLASS_CODE_A3_FROM = 469;

  /** Expiration date of A3 driver’s license */
  public static final int DL_CLASS_CODE_A3_TO = 470;

  /** Restrictions for A3 driver’s license */
  public static final int DL_CLASS_CODE_A3_NOTES = 471;

  /** Validity date of C2 driver’s license */
  public static final int DL_CLASS_CODE_C2_FROM = 472;

  /** Expiration date of C2 driver’s license */
  public static final int DL_CLASS_CODE_C2_TO = 473;

  /** Restrictions for C2 driver’s license */
  public static final int DL_CLASS_CODE_C2_NOTES = 474;

  /** Validity date of B2 driver’s license */
  public static final int DL_CLASS_CODE_B2_FROM = 475;

  /** Expiration date of B2 driver’s license */
  public static final int DL_CLASS_CODE_B2_TO = 476;

  /** Restrictions for B2 driver’s license */
  public static final int DL_CLASS_CODE_B2_NOTES = 477;

  /** Validity date of D2 driver’s license */
  public static final int DL_CLASS_CODE_D2_FROM = 478;

  /** Expiration date of D2 driver’s license */
  public static final int DL_CLASS_CODE_D2_TO = 479;

  /** Restrictions for D2 driver’s license */
  public static final int DL_CLASS_CODE_D2_NOTES = 480;

  /** Validity date of B2E driver’s license */
  public static final int DL_CLASS_CODE_B2E_FROM = 481;

  /** Expiration date of B2E driver’s license */
  public static final int DL_CLASS_CODE_B2E_TO = 482;

  /** Restrictions for B2E driver’s license */
  public static final int DL_CLASS_CODE_B2E_NOTES = 483;

  /** Validity date of G driver’s license */
  public static final int DL_CLASS_CODE_G_FROM = 484;

  /** Expiration date of G driver’s license */
  public static final int DL_CLASS_CODE_G_TO = 485;

  /** Restrictions for G driver’s license */
  public static final int DL_CLASS_CODE_G_NOTES = 486;

  /** Validity date of J driver’s license */
  public static final int DL_CLASS_CODE_J_FROM = 487;

  /** Expiration date of J driver’s license */
  public static final int DL_CLASS_CODE_J_TO = 488;

  /** Restrictions for J driver’s license */
  public static final int DL_CLASS_CODE_J_NOTES = 489;

  /** Validity date of LC driver’s license */
  public static final int DL_CLASS_CODE_LC_FROM = 490;

  /** Expiration date of LC driver’s license */
  public static final int DL_CLASS_CODE_LC_TO = 491;

  /** Restrictions for LC driver’s license */
  public static final int DL_CLASS_CODE_LC_NOTES = 492;

  /** Bank card number */
  public static final int BANK_CARD_NUMBER = 493;

  /** Bank card validity */
  public static final int BANK_CARD_VALID_THRU = 494;

  /** Tax number */
  public static final int TAX_NUMBER = 495;

  /** Health insurance number */
  public static final int HEALTH_NUMBER = 496;

  /** Grandfather&#x60;s name */
  public static final int GRANDFATHER_NAME = 497;

  /** Recruit indicator */
  public static final int SELECTEE_INDICATOR = 498;

  /** Mother&#x60;s last name */
  public static final int MOTHER_SURNAME = 499;

  /** Mother&#x60;s first name */
  public static final int MOTHER_GIVEN_NAME = 500;

  /** Father&#x60;s last name */
  public static final int FATHER_SURNAME = 501;

  /** Father&#x60;s first name */
  public static final int FATHER_GIVEN_NAME = 502;

  /** Mother&#x60;s date of birth */
  public static final int MOTHER_DATE_OF_BIRTH = 503;

  /** Father&#x60;s date of birth */
  public static final int FATHER_DATE_OF_BIRTH = 504;

  /** Mother&#x60;s personal number */
  public static final int MOTHER_PERSONAL_NUMBER = 505;

  /** Father&#x60;s personal number */
  public static final int FATHER_PERSONAL_NUMBER = 506;

  /** Mother&#x60;s place of birth */
  public static final int MOTHER_PLACE_OF_BIRTH = 507;

  /** Father&#x60;s place of birth */
  public static final int FATHER_PLACE_OF_BIRTH = 508;

  /** Mother&#x60;s country of birth */
  public static final int MOTHER_COUNTRY_OF_BIRTH = 509;

  /** Father&#x60;s country of birth */
  public static final int FATHER_COUNTRY_OF_BIRTH = 510;

  /** Date of document first renewal */
  public static final int DATE_FIRST_RENEWAL = 511;

  /** Date of document second renewal */
  public static final int DATE_SECOND_RENEWAL = 512;

  /** Place of examination */
  public static final int PLACE_OF_EXAMINATION = 513;

  /** Application number */
  public static final int APPLICATION_NUMBER = 514;

  /** Voucher number */
  public static final int VOUCHER_NUMBER = 515;

  /** Authorization number */
  public static final int AUTHORIZATION_NUMBER = 516;

  /** Faculty */
  public static final int FACULTY = 517;

  /** Form of education */
  public static final int FORM_OF_EDUCATION = 518;

  /** DNI number */
  public static final int DNI_NUMBER = 519;

  /** Retirement number */
  public static final int RETIREMENT_NUMBER = 520;

  /** Professional id number */
  public static final int PROFESSIONAL_ID_NUMBER = 521;

  /** Age at issue */
  public static final int AGE_AT_ISSUE = 522;

  /** Years since issue */
  public static final int YEARS_SINCE_ISSUE = 523;

  /** Validity date of BTP driver’s license */
  public static final int DL_CLASS_CODE_BTP_FROM = 524;

  /** Restrictions for BTP driver’s license */
  public static final int DL_CLASS_CODE_BTP_NOTES = 525;

  /** Expiration date of BTP driver’s license */
  public static final int DL_CLASS_CODE_BTP_TO = 526;

  /** Validity date of C3 driver’s license */
  public static final int DL_CLASS_CODE_C3_FROM = 527;

  /** Restrictions for C3 driver’s license */
  public static final int DL_CLASS_CODE_C3_NOTES = 528;

  /** Expiration date of C3 driver’s license */
  public static final int DL_CLASS_CODE_C3_TO = 529;

  /** Validity date of E driver’s license */
  public static final int DL_CLASS_CODE_E_FROM = 530;

  /** Restrictions for E driver’s license */
  public static final int DL_CLASS_CODE_E_NOTES = 531;

  /** Expiration date of E driver’s license */
  public static final int DL_CLASS_CODE_E_TO = 532;

  /** Validity date of F driver’s license */
  public static final int DL_CLASS_CODE_F_FROM = 533;

  /** Restrictions for F driver’s license */
  public static final int DL_CLASS_CODE_F_NOTES = 534;

  /** Expiration date of F driver’s license */
  public static final int DL_CLASS_CODE_F_TO = 535;

  /** Validity date of FA driver’s license */
  public static final int DL_CLASS_CODE_FA_FROM = 536;

  /** Restrictions for FA driver’s license */
  public static final int DL_CLASS_CODE_FA_NOTES = 537;

  /** Expiration date of FA driver’s license */
  public static final int DL_CLASS_CODE_FA_TO = 538;

  /** Validity date of FA1 driver’s license */
  public static final int DL_CLASS_CODE_FA1_FROM = 539;

  /** Restrictions for FA1 driver’s license */
  public static final int DL_CLASS_CODE_FA1_NOTES = 540;

  /** Expiration date of FA1 driver’s license */
  public static final int DL_CLASS_CODE_FA1_TO = 541;

  /** Validity date of FB driver’s license */
  public static final int DL_CLASS_CODE_FB_FROM = 542;

  /** Restrictions for FB driver’s license */
  public static final int DL_CLASS_CODE_FB_NOTES = 543;

  /** Expiration date of FB driver’s license */
  public static final int DL_CLASS_CODE_FB_TO = 544;

  /** Validity date of G1 driver’s license */
  public static final int DL_CLASS_CODE_G1_FROM = 545;

  /** Restrictions for G1 driver’s license */
  public static final int DL_CLASS_CODE_G1_NOTES = 546;

  /** Expiration date of G1 driver’s license */
  public static final int DL_CLASS_CODE_G1_TO = 547;

  /** Validity date of H driver’s license */
  public static final int DL_CLASS_CODE_H_FROM = 548;

  /** Restrictions for H driver’s license */
  public static final int DL_CLASS_CODE_H_NOTES = 549;

  /** Expiration date of H driver’s license */
  public static final int DL_CLASS_CODE_H_TO = 550;

  /** Validity date of I driver’s license */
  public static final int DL_CLASS_CODE_I_FROM = 551;

  /** Restrictions for I driver’s license */
  public static final int DL_CLASS_CODE_I_NOTES = 552;

  /** Expiration date of I driver’s license */
  public static final int DL_CLASS_CODE_I_TO = 553;

  /** Validity date of K driver’s license */
  public static final int DL_CLASS_CODE_K_FROM = 554;

  /** Restrictions for K driver’s license */
  public static final int DL_CLASS_CODE_K_NOTES = 555;

  /** Expiration date of K driver’s license */
  public static final int DL_CLASS_CODE_K_TO = 556;

  /** Validity date of LK driver’s license */
  public static final int DL_CLASS_CODE_LK_FROM = 557;

  /** Restrictions for LK driver’s license */
  public static final int DL_CLASS_CODE_LK_NOTES = 558;

  /** Expiration date of LK driver’s license */
  public static final int DL_CLASS_CODE_LK_TO = 559;

  /** Validity date of N driver’s license */
  public static final int DL_CLASS_CODE_N_FROM = 560;

  /** Restrictions for N driver’s license */
  public static final int DL_CLASS_CODE_N_NOTES = 561;

  /** Expiration date of N driver’s license */
  public static final int DL_CLASS_CODE_N_TO = 562;

  /** Validity date of S driver’s license */
  public static final int DL_CLASS_CODE_S_FROM = 563;

  /** Restrictions for S driver’s license */
  public static final int DL_CLASS_CODE_S_NOTES = 564;

  /** Expiration date of S driver’s license */
  public static final int DL_CLASS_CODE_S_TO = 565;

  /** Validity date of TB driver’s license */
  public static final int DL_CLASS_CODE_TB_FROM = 566;

  /** Restrictions for TB driver’s license */
  public static final int DL_CLASS_CODE_TB_NOTES = 567;

  /** Expiration date of TB driver’s license */
  public static final int DL_CLASS_CODE_TB_TO = 568;

  /** Validity date of TM driver’s license */
  public static final int DL_CLASS_CODE_TM_FROM = 569;

  /** Restrictions for TM driver’s license */
  public static final int DL_CLASS_CODE_TM_NOTES = 570;

  /** Expiration date of TM driver’s license */
  public static final int DL_CLASS_CODE_TM_TO = 571;

  /** Validity date of TR driver’s license */
  public static final int DL_CLASS_CODE_TR_FROM = 572;

  /** Restrictions for TR driver’s license */
  public static final int DL_CLASS_CODE_TR_NOTES = 573;

  /** Expiration date of TR driver’s license */
  public static final int DL_CLASS_CODE_TR_TO = 574;

  /** Validity date of TV driver’s license */
  public static final int DL_CLASS_CODE_TV_FROM = 575;

  /** Restrictions for TV driver’s license */
  public static final int DL_CLASS_CODE_TV_NOTES = 576;

  /** Expiration date of TV driver’s license */
  public static final int DL_CLASS_CODE_TV_TO = 577;

  /** Validity date of V driver’s license */
  public static final int DL_CLASS_CODE_V_FROM = 578;

  /** Restrictions for V driver’s license */
  public static final int DL_CLASS_CODE_V_NOTES = 579;

  /** Expiration date of V driver’s license */
  public static final int DL_CLASS_CODE_V_TO = 580;

  /** Validity date of W driver’s license */
  public static final int DL_CLASS_CODE_W_FROM = 581;

  /** Restrictions for W driver’s license */
  public static final int DL_CLASS_CODE_W_NOTES = 582;

  /** Expiration date of W driver’s license */
  public static final int DL_CLASS_CODE_W_TO = 583;

  /** URL */
  public static final int URL = 584;

  /** Caliber */
  public static final int CALIBER = 585;

  /** Model */
  public static final int MODEL = 586;

  /** Make */
  public static final int MAKE = 587;

  /** Number of cylinders */
  public static final int NUMBER_OF_CYLINDERS = 588;

  /** Surname of husband after registration */
  public static final int SURNAME_OF_HUSBAND_AFTER_REGISTRATION = 589;

  /** Surname of wife after registration */
  public static final int SURNAME_OF_WIFE_AFTER_REGISTRATION = 590;

  /** Date of birth of wife */
  public static final int DATE_OF_BIRTH_OF_WIFE = 591;

  /** Date of birth of husband */
  public static final int DATE_OF_BIRTH_OF_HUSBAND = 592;

  /** Citizenship of first person */
  public static final int CITIZENSHIP_OF_FIRST_PERSON = 593;

  /** Citizenship of second person */
  public static final int CITIZENSHIP_OF_SECOND_PERSON = 594;

  /** CVV code */
  public static final int CVV = 595;

  /** Date of insurance expiry */
  public static final int DATE_OF_INSURANCE_EXPIRY = 596;

  /** Mortgage */
  public static final int MORTGAGE_BY = 597;

  /** Old document number */
  public static final int OLD_DOCUMENT_NUMBER = 598;

  /** Old date of issue */
  public static final int OLD_DATE_OF_ISSUE = 599;

  /** Old place of issue */
  public static final int OLD_PLACE_OF_ISSUE = 600;

  /** Validity date of LR driver’s license */
  public static final int DL_CLASS_CODE_LR_FROM = 601;

  /** Expiration date of LR driver’s license */
  public static final int DL_CLASS_CODE_LR_TO = 602;

  /** Restrictions for LR driver’s license */
  public static final int DL_CLASS_CODE_LR_NOTES = 603;

  /** Validity date of MR driver’s license */
  public static final int DL_CLASS_CODE_MR_FROM = 604;

  /** Expiration date of MR driver’s license */
  public static final int DL_CLASS_CODE_MR_TO = 605;

  /** Restrictions for MR driver’s license */
  public static final int DL_CLASS_CODE_MR_NOTES = 606;

  /** Validity date of HR driver’s license */
  public static final int DL_CLASS_CODE_HR_FROM = 607;

  /** Expiration date of HR driver’s license */
  public static final int DL_CLASS_CODE_HR_TO = 608;

  /** Restrictions for HR driver’s license */
  public static final int DL_CLASS_CODE_HR_NOTES = 609;

  /** Validity date of HC driver’s license */
  public static final int DL_CLASS_CODE_HC_FROM = 610;

  /** Expiration date of HC driver’s license */
  public static final int DL_CLASS_CODE_HC_TO = 611;

  /** Restrictions for HC driver’s license */
  public static final int DL_CLASS_CODE_HC_NOTES = 612;

  /** Validity date of MC driver’s license */
  public static final int DL_CLASS_CODE_MC_FROM = 613;

  /** Expiration date of MC driver’s license */
  public static final int DL_CLASS_CODE_MC_TO = 614;

  /** Restrictions for MC driver’s license */
  public static final int DL_CLASS_CODE_MC_NOTES = 615;

  /** Validity date of RE driver’s license */
  public static final int DL_CLASS_CODE_RE_FROM = 616;

  /** Expiration date of RE driver’s license */
  public static final int DL_CLASS_CODE_RE_TO = 617;

  /** Restrictions for RE driver’s license */
  public static final int DL_CLASS_CODE_RE_NOTES = 618;

  /** Validity date of R driver’s license */
  public static final int DL_CLASS_CODE_R_FROM = 619;

  /** Expiration date of R driver’s license */
  public static final int DL_CLASS_CODE_R_TO = 620;

  /** Restrictions for R driver’s license */
  public static final int DL_CLASS_CODE_R_NOTES = 621;

  /** Validity date of CA driver’s license */
  public static final int DL_CLASS_CODE_CA_FROM = 622;

  /** Expiration date of CA driver’s license */
  public static final int DL_CLASS_CODE_CA_TO = 623;

  /** Restrictions for CA driver’s license */
  public static final int DL_CLASS_CODE_CA_NOTES = 624;

  /** Citizenship Status */
  public static final int CITIZENSHIP_STATUS = 625;

  /** Military Service From */
  public static final int MILITARY_SERVICE_FROM = 626;

  /** Military Service To */
  public static final int MILITARY_SERVICE_TO = 627;
}
