/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 5.3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.annotations.SerializedName;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** ImagesField */
public class ImagesField {
  public static final String SERIALIZED_NAME_FIELD_NAME = "fieldName";

  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_FIELD_TYPE = "fieldType";

  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  private Integer fieldType;

  public static final String SERIALIZED_NAME_VALUE_LIST = "valueList";

  @SerializedName(SERIALIZED_NAME_VALUE_LIST)
  private List<ImagesFieldValue> valueList = new ArrayList<ImagesFieldValue>();

  public ImagesField withFieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

  /**
   * Human readable field name. Do not bind to this name - use GraphicFieldType instead.
   *
   * @return fieldName
   */
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }

  public ImagesField withFieldType(Integer fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Get fieldType
   *
   * @return fieldType
   */
  public Integer getFieldType() {
    return fieldType;
  }

  public void setFieldType(Integer fieldType) {
    this.fieldType = fieldType;
  }

  public ImagesField withValueList(List<ImagesFieldValue> valueList) {
    this.valueList = valueList;
    return this;
  }

  public ImagesField addValueListItem(ImagesFieldValue valueListItem) {
    this.valueList.add(valueListItem);
    return this;
  }

  /**
   * Get valueList
   *
   * @return valueList
   */
  public List<ImagesFieldValue> getValueList() {
    return valueList;
  }

  public void setValueList(List<ImagesFieldValue> valueList) {
    this.valueList = valueList;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImagesField imagesField = (ImagesField) o;
    return Objects.equals(this.fieldName, imagesField.fieldName)
        && Objects.equals(this.fieldType, imagesField.fieldType)
        && Objects.equals(this.valueList, imagesField.valueList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldName, fieldType, valueList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImagesField {\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    valueList: ").append(toIndentedString(valueList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
