/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class ContainerListListInner extends AbstractOpenApiSchema {
  private static final Logger log = Logger.getLogger(ContainerListListInner.class.getName());

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ContainerListListInner.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ContainerListListInner' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<StatusResult> adapterStatusResult =
          gson.getDelegateAdapter(this, TypeToken.get(StatusResult.class));
      final TypeAdapter<TextResult> adapterTextResult =
          gson.getDelegateAdapter(this, TypeToken.get(TextResult.class));
      final TypeAdapter<DocumentImageResult> adapterDocumentImageResult =
          gson.getDelegateAdapter(this, TypeToken.get(DocumentImageResult.class));
      final TypeAdapter<ImagesResult> adapterImagesResult =
          gson.getDelegateAdapter(this, TypeToken.get(ImagesResult.class));
      final TypeAdapter<ChosenDocumentTypeResult> adapterChosenDocumentTypeResult =
          gson.getDelegateAdapter(this, TypeToken.get(ChosenDocumentTypeResult.class));
      final TypeAdapter<DocumentTypesCandidatesResult> adapterDocumentTypesCandidatesResult =
          gson.getDelegateAdapter(this, TypeToken.get(DocumentTypesCandidatesResult.class));
      final TypeAdapter<TextDataResult> adapterTextDataResult =
          gson.getDelegateAdapter(this, TypeToken.get(TextDataResult.class));
      final TypeAdapter<GraphicsResult> adapterGraphicsResult =
          gson.getDelegateAdapter(this, TypeToken.get(GraphicsResult.class));
      final TypeAdapter<LexicalAnalysisResult> adapterLexicalAnalysisResult =
          gson.getDelegateAdapter(this, TypeToken.get(LexicalAnalysisResult.class));
      final TypeAdapter<AuthenticityResult> adapterAuthenticityResult =
          gson.getDelegateAdapter(this, TypeToken.get(AuthenticityResult.class));
      final TypeAdapter<ImageQualityResult> adapterImageQualityResult =
          gson.getDelegateAdapter(this, TypeToken.get(ImageQualityResult.class));
      final TypeAdapter<DocumentPositionResult> adapterDocumentPositionResult =
          gson.getDelegateAdapter(this, TypeToken.get(DocumentPositionResult.class));
      final TypeAdapter<DocBarCodeInfo> adapterDocBarCodeInfo =
          gson.getDelegateAdapter(this, TypeToken.get(DocBarCodeInfo.class));
      final TypeAdapter<LicenseResult> adapterLicenseResult =
          gson.getDelegateAdapter(this, TypeToken.get(LicenseResult.class));
      final TypeAdapter<EncryptedRCLResult> adapterEncryptedRCLResult =
          gson.getDelegateAdapter(this, TypeToken.get(EncryptedRCLResult.class));
      final TypeAdapter<DocumentBinaryInfoResult> adapterDocumentBinaryInfoResult =
          gson.getDelegateAdapter(this, TypeToken.get(DocumentBinaryInfoResult.class));
      final TypeAdapter<ByteArrayResult> adapterByteArrayResult =
          gson.getDelegateAdapter(this, TypeToken.get(ByteArrayResult.class));
      final TypeAdapter<FaceDetectionResult> adapterFaceDetectionResult =
          gson.getDelegateAdapter(this, TypeToken.get(FaceDetectionResult.class));
      final TypeAdapter<MRZDetectorResult> adapterMRZDetectorResult =
          gson.getDelegateAdapter(this, TypeToken.get(MRZDetectorResult.class));
      final TypeAdapter<MRZPositionResult> adapterMRZPositionResult =
          gson.getDelegateAdapter(this, TypeToken.get(MRZPositionResult.class));
      final TypeAdapter<MRZTestQualityResult> adapterMRZTestQualityResult =
          gson.getDelegateAdapter(this, TypeToken.get(MRZTestQualityResult.class));

      return (TypeAdapter<T>)
          new TypeAdapter<ContainerListListInner>() {
            @Override
            public void write(JsonWriter out, ContainerListListInner value) throws IOException {
              if (value == null || value.getActualInstance() == null) {
                elementAdapter.write(out, null);
                return;
              }

              // check if the actual instance is of the type `StatusResult`
              if (value.getActualInstance() instanceof StatusResult) {
                JsonElement element =
                    adapterStatusResult.toJsonTree((StatusResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `TextResult`
              if (value.getActualInstance() instanceof TextResult) {
                JsonElement element =
                    adapterTextResult.toJsonTree((TextResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `DocumentImageResult`
              if (value.getActualInstance() instanceof DocumentImageResult) {
                JsonElement element =
                    adapterDocumentImageResult.toJsonTree(
                        (DocumentImageResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `ImagesResult`
              if (value.getActualInstance() instanceof ImagesResult) {
                JsonElement element =
                    adapterImagesResult.toJsonTree((ImagesResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `ChosenDocumentTypeResult`
              if (value.getActualInstance() instanceof ChosenDocumentTypeResult) {
                JsonElement element =
                    adapterChosenDocumentTypeResult.toJsonTree(
                        (ChosenDocumentTypeResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `DocumentTypesCandidatesResult`
              if (value.getActualInstance() instanceof DocumentTypesCandidatesResult) {
                JsonElement element =
                    adapterDocumentTypesCandidatesResult.toJsonTree(
                        (DocumentTypesCandidatesResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `TextDataResult`
              if (value.getActualInstance() instanceof TextDataResult) {
                JsonElement element =
                    adapterTextDataResult.toJsonTree((TextDataResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `GraphicsResult`
              if (value.getActualInstance() instanceof GraphicsResult) {
                JsonElement element =
                    adapterGraphicsResult.toJsonTree((GraphicsResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `LexicalAnalysisResult`
              if (value.getActualInstance() instanceof LexicalAnalysisResult) {
                JsonElement element =
                    adapterLexicalAnalysisResult.toJsonTree(
                        (LexicalAnalysisResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `AuthenticityResult`
              if (value.getActualInstance() instanceof AuthenticityResult) {
                JsonElement element =
                    adapterAuthenticityResult.toJsonTree(
                        (AuthenticityResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `ImageQualityResult`
              if (value.getActualInstance() instanceof ImageQualityResult) {
                JsonElement element =
                    adapterImageQualityResult.toJsonTree(
                        (ImageQualityResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `DocumentPositionResult`
              if (value.getActualInstance() instanceof DocumentPositionResult) {
                JsonElement element =
                    adapterDocumentPositionResult.toJsonTree(
                        (DocumentPositionResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `DocBarCodeInfo`
              if (value.getActualInstance() instanceof DocBarCodeInfo) {
                JsonElement element =
                    adapterDocBarCodeInfo.toJsonTree((DocBarCodeInfo) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `LicenseResult`
              if (value.getActualInstance() instanceof LicenseResult) {
                JsonElement element =
                    adapterLicenseResult.toJsonTree((LicenseResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `EncryptedRCLResult`
              if (value.getActualInstance() instanceof EncryptedRCLResult) {
                JsonElement element =
                    adapterEncryptedRCLResult.toJsonTree(
                        (EncryptedRCLResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `DocumentBinaryInfoResult`
              if (value.getActualInstance() instanceof DocumentBinaryInfoResult) {
                JsonElement element =
                    adapterDocumentBinaryInfoResult.toJsonTree(
                        (DocumentBinaryInfoResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `ByteArrayResult`
              if (value.getActualInstance() instanceof ByteArrayResult) {
                JsonElement element =
                    adapterByteArrayResult.toJsonTree((ByteArrayResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `FaceDetectionResult`
              if (value.getActualInstance() instanceof FaceDetectionResult) {
                JsonElement element =
                    adapterFaceDetectionResult.toJsonTree(
                        (FaceDetectionResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `MRZDetectorResult`
              if (value.getActualInstance() instanceof MRZDetectorResult) {
                JsonElement element =
                    adapterMRZDetectorResult.toJsonTree(
                        (MRZDetectorResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `MRZPositionResult`
              if (value.getActualInstance() instanceof MRZPositionResult) {
                JsonElement element =
                    adapterMRZPositionResult.toJsonTree(
                        (MRZPositionResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              // check if the actual instance is of the type `MRZTestQualityResult`
              if (value.getActualInstance() instanceof MRZTestQualityResult) {
                JsonElement element =
                    adapterMRZTestQualityResult.toJsonTree(
                        (MRZTestQualityResult) value.getActualInstance());
                elementAdapter.write(out, element);
                return;
              }
              throw new IOException(
                  "Failed to serialize as the type doesn't match oneOf schemas: AuthenticityResult, ByteArrayResult, ChosenDocumentTypeResult, DocBarCodeInfo, DocumentBinaryInfoResult, DocumentImageResult, DocumentPositionResult, DocumentTypesCandidatesResult, EncryptedRCLResult, FaceDetectionResult, GraphicsResult, ImageQualityResult, ImagesResult, LexicalAnalysisResult, LicenseResult, MRZDetectorResult, MRZPositionResult, MRZTestQualityResult, StatusResult, TextDataResult, TextResult");
            }

            @Override
            public ContainerListListInner read(JsonReader in) throws IOException {
              Object deserialized = null;
              JsonElement jsonElement = elementAdapter.read(in);

              int match = 0;
              ArrayList<String> errorMessages = new ArrayList<>();
              TypeAdapter actualAdapter = elementAdapter;

              // deserialize StatusResult
              try {
                // validate the JSON object to see if any exception is thrown
                StatusResult.validateJsonElement(jsonElement);
                actualAdapter = adapterStatusResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'StatusResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for StatusResult failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'StatusResult'", e);
              }
              // deserialize TextResult
              try {
                // validate the JSON object to see if any exception is thrown
                TextResult.validateJsonElement(jsonElement);
                actualAdapter = adapterTextResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'TextResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for TextResult failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'TextResult'", e);
              }
              // deserialize DocumentImageResult
              try {
                // validate the JSON object to see if any exception is thrown
                DocumentImageResult.validateJsonElement(jsonElement);
                actualAdapter = adapterDocumentImageResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'DocumentImageResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for DocumentImageResult failed with `%s`.",
                        e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'DocumentImageResult'", e);
              }
              // deserialize ImagesResult
              try {
                // validate the JSON object to see if any exception is thrown
                ImagesResult.validateJsonElement(jsonElement);
                actualAdapter = adapterImagesResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'ImagesResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for ImagesResult failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'ImagesResult'", e);
              }
              // deserialize ChosenDocumentTypeResult
              try {
                // validate the JSON object to see if any exception is thrown
                ChosenDocumentTypeResult.validateJsonElement(jsonElement);
                actualAdapter = adapterChosenDocumentTypeResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'ChosenDocumentTypeResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for ChosenDocumentTypeResult failed with `%s`.",
                        e.getMessage()));
                log.log(
                    Level.FINER, "Input data does not match schema 'ChosenDocumentTypeResult'", e);
              }
              // deserialize DocumentTypesCandidatesResult
              try {
                // validate the JSON object to see if any exception is thrown
                DocumentTypesCandidatesResult.validateJsonElement(jsonElement);
                actualAdapter = adapterDocumentTypesCandidatesResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'DocumentTypesCandidatesResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for DocumentTypesCandidatesResult failed with `%s`.",
                        e.getMessage()));
                log.log(
                    Level.FINER,
                    "Input data does not match schema 'DocumentTypesCandidatesResult'",
                    e);
              }
              // deserialize TextDataResult
              try {
                // validate the JSON object to see if any exception is thrown
                TextDataResult.validateJsonElement(jsonElement);
                actualAdapter = adapterTextDataResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'TextDataResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for TextDataResult failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'TextDataResult'", e);
              }
              // deserialize GraphicsResult
              try {
                // validate the JSON object to see if any exception is thrown
                GraphicsResult.validateJsonElement(jsonElement);
                actualAdapter = adapterGraphicsResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'GraphicsResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for GraphicsResult failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'GraphicsResult'", e);
              }
              // deserialize LexicalAnalysisResult
              try {
                // validate the JSON object to see if any exception is thrown
                LexicalAnalysisResult.validateJsonElement(jsonElement);
                actualAdapter = adapterLexicalAnalysisResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'LexicalAnalysisResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for LexicalAnalysisResult failed with `%s`.",
                        e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'LexicalAnalysisResult'", e);
              }
              // deserialize AuthenticityResult
              try {
                // validate the JSON object to see if any exception is thrown
                AuthenticityResult.validateJsonElement(jsonElement);
                actualAdapter = adapterAuthenticityResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'AuthenticityResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for AuthenticityResult failed with `%s`.",
                        e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'AuthenticityResult'", e);
              }
              // deserialize ImageQualityResult
              try {
                // validate the JSON object to see if any exception is thrown
                ImageQualityResult.validateJsonElement(jsonElement);
                actualAdapter = adapterImageQualityResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'ImageQualityResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for ImageQualityResult failed with `%s`.",
                        e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'ImageQualityResult'", e);
              }
              // deserialize DocumentPositionResult
              try {
                // validate the JSON object to see if any exception is thrown
                DocumentPositionResult.validateJsonElement(jsonElement);
                actualAdapter = adapterDocumentPositionResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'DocumentPositionResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for DocumentPositionResult failed with `%s`.",
                        e.getMessage()));
                log.log(
                    Level.FINER, "Input data does not match schema 'DocumentPositionResult'", e);
              }
              // deserialize DocBarCodeInfo
              try {
                // validate the JSON object to see if any exception is thrown
                DocBarCodeInfo.validateJsonElement(jsonElement);
                actualAdapter = adapterDocBarCodeInfo;
                match++;
                log.log(Level.FINER, "Input data matches schema 'DocBarCodeInfo'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for DocBarCodeInfo failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'DocBarCodeInfo'", e);
              }
              // deserialize LicenseResult
              try {
                // validate the JSON object to see if any exception is thrown
                LicenseResult.validateJsonElement(jsonElement);
                actualAdapter = adapterLicenseResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'LicenseResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for LicenseResult failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'LicenseResult'", e);
              }
              // deserialize EncryptedRCLResult
              try {
                // validate the JSON object to see if any exception is thrown
                EncryptedRCLResult.validateJsonElement(jsonElement);
                actualAdapter = adapterEncryptedRCLResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'EncryptedRCLResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for EncryptedRCLResult failed with `%s`.",
                        e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'EncryptedRCLResult'", e);
              }
              // deserialize DocumentBinaryInfoResult
              try {
                // validate the JSON object to see if any exception is thrown
                DocumentBinaryInfoResult.validateJsonElement(jsonElement);
                actualAdapter = adapterDocumentBinaryInfoResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'DocumentBinaryInfoResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for DocumentBinaryInfoResult failed with `%s`.",
                        e.getMessage()));
                log.log(
                    Level.FINER, "Input data does not match schema 'DocumentBinaryInfoResult'", e);
              }
              // deserialize ByteArrayResult
              try {
                // validate the JSON object to see if any exception is thrown
                ByteArrayResult.validateJsonElement(jsonElement);
                actualAdapter = adapterByteArrayResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'ByteArrayResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for ByteArrayResult failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'ByteArrayResult'", e);
              }
              // deserialize FaceDetectionResult
              try {
                // validate the JSON object to see if any exception is thrown
                FaceDetectionResult.validateJsonElement(jsonElement);
                actualAdapter = adapterFaceDetectionResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'FaceDetectionResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for FaceDetectionResult failed with `%s`.",
                        e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'FaceDetectionResult'", e);
              }
              // deserialize MRZDetectorResult
              try {
                // validate the JSON object to see if any exception is thrown
                MRZDetectorResult.validateJsonElement(jsonElement);
                actualAdapter = adapterMRZDetectorResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'MRZDetectorResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for MRZDetectorResult failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'MRZDetectorResult'", e);
              }
              // deserialize MRZPositionResult
              try {
                // validate the JSON object to see if any exception is thrown
                MRZPositionResult.validateJsonElement(jsonElement);
                actualAdapter = adapterMRZPositionResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'MRZPositionResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for MRZPositionResult failed with `%s`.", e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'MRZPositionResult'", e);
              }
              // deserialize MRZTestQualityResult
              try {
                // validate the JSON object to see if any exception is thrown
                MRZTestQualityResult.validateJsonElement(jsonElement);
                actualAdapter = adapterMRZTestQualityResult;
                match++;
                log.log(Level.FINER, "Input data matches schema 'MRZTestQualityResult'");
              } catch (Exception e) {
                // deserialization failed, continue
                errorMessages.add(
                    String.format(
                        "Deserialization for MRZTestQualityResult failed with `%s`.",
                        e.getMessage()));
                log.log(Level.FINER, "Input data does not match schema 'MRZTestQualityResult'", e);
              }

              if (match == 1) {
                ContainerListListInner ret = new ContainerListListInner();
                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                return ret;
              }

              throw new IOException(
                  String.format(
                      "Failed deserialization for ContainerListListInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s",
                      match, errorMessages, jsonElement.toString()));
            }
          }.nullSafe();
    }
  }

  // store a list of schema names defined in oneOf
  public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

  public ContainerListListInner() {
    super("oneOf", Boolean.FALSE);
  }

  public ContainerListListInner(Object o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  static {
    schemas.put("StatusResult", StatusResult.class);
    schemas.put("TextResult", TextResult.class);
    schemas.put("DocumentImageResult", DocumentImageResult.class);
    schemas.put("ImagesResult", ImagesResult.class);
    schemas.put("ChosenDocumentTypeResult", ChosenDocumentTypeResult.class);
    schemas.put("DocumentTypesCandidatesResult", DocumentTypesCandidatesResult.class);
    schemas.put("TextDataResult", TextDataResult.class);
    schemas.put("GraphicsResult", GraphicsResult.class);
    schemas.put("LexicalAnalysisResult", LexicalAnalysisResult.class);
    schemas.put("AuthenticityResult", AuthenticityResult.class);
    schemas.put("ImageQualityResult", ImageQualityResult.class);
    schemas.put("DocumentPositionResult", DocumentPositionResult.class);
    schemas.put("DocBarCodeInfo", DocBarCodeInfo.class);
    schemas.put("LicenseResult", LicenseResult.class);
    schemas.put("EncryptedRCLResult", EncryptedRCLResult.class);
    schemas.put("DocumentBinaryInfoResult", DocumentBinaryInfoResult.class);
    schemas.put("ByteArrayResult", ByteArrayResult.class);
    schemas.put("FaceDetectionResult", FaceDetectionResult.class);
    schemas.put("MRZDetectorResult", MRZDetectorResult.class);
    schemas.put("MRZPositionResult", MRZPositionResult.class);
    schemas.put("MRZTestQualityResult", MRZTestQualityResult.class);
  }

  @Override
  public Map<String, Class<?>> getSchemas() {
    return ContainerListListInner.schemas;
  }

  /**
   * Set the instance that matches the oneOf child schema, check the instance parameter is valid
   * against the oneOf child schemas: AuthenticityResult, ByteArrayResult, ChosenDocumentTypeResult,
   * DocBarCodeInfo, DocumentBinaryInfoResult, DocumentImageResult, DocumentPositionResult,
   * DocumentTypesCandidatesResult, EncryptedRCLResult, FaceDetectionResult, GraphicsResult,
   * ImageQualityResult, ImagesResult, LexicalAnalysisResult, LicenseResult, MRZDetectorResult,
   * MRZPositionResult, MRZTestQualityResult, StatusResult, TextDataResult, TextResult
   *
   * <p>It could be an instance of the 'oneOf' schemas.
   */
  @Override
  public void setActualInstance(Object instance) {
    if (instance instanceof StatusResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof TextResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof DocumentImageResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof ImagesResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof ChosenDocumentTypeResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof DocumentTypesCandidatesResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof TextDataResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof GraphicsResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof LexicalAnalysisResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof AuthenticityResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof ImageQualityResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof DocumentPositionResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof DocBarCodeInfo) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof LicenseResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof EncryptedRCLResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof DocumentBinaryInfoResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof ByteArrayResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof FaceDetectionResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof MRZDetectorResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof MRZPositionResult) {
      super.setActualInstance(instance);
      return;
    }

    if (instance instanceof MRZTestQualityResult) {
      super.setActualInstance(instance);
      return;
    }

    throw new RuntimeException(
        "Invalid instance type. Must be AuthenticityResult, ByteArrayResult, ChosenDocumentTypeResult, DocBarCodeInfo, DocumentBinaryInfoResult, DocumentImageResult, DocumentPositionResult, DocumentTypesCandidatesResult, EncryptedRCLResult, FaceDetectionResult, GraphicsResult, ImageQualityResult, ImagesResult, LexicalAnalysisResult, LicenseResult, MRZDetectorResult, MRZPositionResult, MRZTestQualityResult, StatusResult, TextDataResult, TextResult");
  }

  /**
   * Get the actual instance, which can be the following: AuthenticityResult, ByteArrayResult,
   * ChosenDocumentTypeResult, DocBarCodeInfo, DocumentBinaryInfoResult, DocumentImageResult,
   * DocumentPositionResult, DocumentTypesCandidatesResult, EncryptedRCLResult, FaceDetectionResult,
   * GraphicsResult, ImageQualityResult, ImagesResult, LexicalAnalysisResult, LicenseResult,
   * MRZDetectorResult, MRZPositionResult, MRZTestQualityResult, StatusResult, TextDataResult,
   * TextResult
   *
   * @return The actual instance (AuthenticityResult, ByteArrayResult, ChosenDocumentTypeResult,
   *     DocBarCodeInfo, DocumentBinaryInfoResult, DocumentImageResult, DocumentPositionResult,
   *     DocumentTypesCandidatesResult, EncryptedRCLResult, FaceDetectionResult, GraphicsResult,
   *     ImageQualityResult, ImagesResult, LexicalAnalysisResult, LicenseResult, MRZDetectorResult,
   *     MRZPositionResult, MRZTestQualityResult, StatusResult, TextDataResult, TextResult)
   */
  @SuppressWarnings("unchecked")
  @Override
  public Object getActualInstance() {
    return super.getActualInstance();
  }

  /**
   * Get the actual instance of `StatusResult`. If the actual instance is not `StatusResult`, the
   * ClassCastException will be thrown.
   *
   * @return The actual instance of `StatusResult`
   * @throws ClassCastException if the instance is not `StatusResult`
   */
  public StatusResult getStatusResult() throws ClassCastException {
    return (StatusResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `TextResult`. If the actual instance is not `TextResult`, the
   * ClassCastException will be thrown.
   *
   * @return The actual instance of `TextResult`
   * @throws ClassCastException if the instance is not `TextResult`
   */
  public TextResult getTextResult() throws ClassCastException {
    return (TextResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `DocumentImageResult`. If the actual instance is not
   * `DocumentImageResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `DocumentImageResult`
   * @throws ClassCastException if the instance is not `DocumentImageResult`
   */
  public DocumentImageResult getDocumentImageResult() throws ClassCastException {
    return (DocumentImageResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `ImagesResult`. If the actual instance is not `ImagesResult`, the
   * ClassCastException will be thrown.
   *
   * @return The actual instance of `ImagesResult`
   * @throws ClassCastException if the instance is not `ImagesResult`
   */
  public ImagesResult getImagesResult() throws ClassCastException {
    return (ImagesResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `ChosenDocumentTypeResult`. If the actual instance is not
   * `ChosenDocumentTypeResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `ChosenDocumentTypeResult`
   * @throws ClassCastException if the instance is not `ChosenDocumentTypeResult`
   */
  public ChosenDocumentTypeResult getChosenDocumentTypeResult() throws ClassCastException {
    return (ChosenDocumentTypeResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `DocumentTypesCandidatesResult`. If the actual instance is not
   * `DocumentTypesCandidatesResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `DocumentTypesCandidatesResult`
   * @throws ClassCastException if the instance is not `DocumentTypesCandidatesResult`
   */
  public DocumentTypesCandidatesResult getDocumentTypesCandidatesResult()
      throws ClassCastException {
    return (DocumentTypesCandidatesResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `TextDataResult`. If the actual instance is not `TextDataResult`,
   * the ClassCastException will be thrown.
   *
   * @return The actual instance of `TextDataResult`
   * @throws ClassCastException if the instance is not `TextDataResult`
   */
  public TextDataResult getTextDataResult() throws ClassCastException {
    return (TextDataResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `GraphicsResult`. If the actual instance is not `GraphicsResult`,
   * the ClassCastException will be thrown.
   *
   * @return The actual instance of `GraphicsResult`
   * @throws ClassCastException if the instance is not `GraphicsResult`
   */
  public GraphicsResult getGraphicsResult() throws ClassCastException {
    return (GraphicsResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `LexicalAnalysisResult`. If the actual instance is not
   * `LexicalAnalysisResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `LexicalAnalysisResult`
   * @throws ClassCastException if the instance is not `LexicalAnalysisResult`
   */
  public LexicalAnalysisResult getLexicalAnalysisResult() throws ClassCastException {
    return (LexicalAnalysisResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `AuthenticityResult`. If the actual instance is not
   * `AuthenticityResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `AuthenticityResult`
   * @throws ClassCastException if the instance is not `AuthenticityResult`
   */
  public AuthenticityResult getAuthenticityResult() throws ClassCastException {
    return (AuthenticityResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `ImageQualityResult`. If the actual instance is not
   * `ImageQualityResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `ImageQualityResult`
   * @throws ClassCastException if the instance is not `ImageQualityResult`
   */
  public ImageQualityResult getImageQualityResult() throws ClassCastException {
    return (ImageQualityResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `DocumentPositionResult`. If the actual instance is not
   * `DocumentPositionResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `DocumentPositionResult`
   * @throws ClassCastException if the instance is not `DocumentPositionResult`
   */
  public DocumentPositionResult getDocumentPositionResult() throws ClassCastException {
    return (DocumentPositionResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `DocBarCodeInfo`. If the actual instance is not `DocBarCodeInfo`,
   * the ClassCastException will be thrown.
   *
   * @return The actual instance of `DocBarCodeInfo`
   * @throws ClassCastException if the instance is not `DocBarCodeInfo`
   */
  public DocBarCodeInfo getDocBarCodeInfo() throws ClassCastException {
    return (DocBarCodeInfo) super.getActualInstance();
  }

  /**
   * Get the actual instance of `LicenseResult`. If the actual instance is not `LicenseResult`, the
   * ClassCastException will be thrown.
   *
   * @return The actual instance of `LicenseResult`
   * @throws ClassCastException if the instance is not `LicenseResult`
   */
  public LicenseResult getLicenseResult() throws ClassCastException {
    return (LicenseResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `EncryptedRCLResult`. If the actual instance is not
   * `EncryptedRCLResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `EncryptedRCLResult`
   * @throws ClassCastException if the instance is not `EncryptedRCLResult`
   */
  public EncryptedRCLResult getEncryptedRCLResult() throws ClassCastException {
    return (EncryptedRCLResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `DocumentBinaryInfoResult`. If the actual instance is not
   * `DocumentBinaryInfoResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `DocumentBinaryInfoResult`
   * @throws ClassCastException if the instance is not `DocumentBinaryInfoResult`
   */
  public DocumentBinaryInfoResult getDocumentBinaryInfoResult() throws ClassCastException {
    return (DocumentBinaryInfoResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `ByteArrayResult`. If the actual instance is not `ByteArrayResult`,
   * the ClassCastException will be thrown.
   *
   * @return The actual instance of `ByteArrayResult`
   * @throws ClassCastException if the instance is not `ByteArrayResult`
   */
  public ByteArrayResult getByteArrayResult() throws ClassCastException {
    return (ByteArrayResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `FaceDetectionResult`. If the actual instance is not
   * `FaceDetectionResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `FaceDetectionResult`
   * @throws ClassCastException if the instance is not `FaceDetectionResult`
   */
  public FaceDetectionResult getFaceDetectionResult() throws ClassCastException {
    return (FaceDetectionResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `MRZDetectorResult`. If the actual instance is not
   * `MRZDetectorResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `MRZDetectorResult`
   * @throws ClassCastException if the instance is not `MRZDetectorResult`
   */
  public MRZDetectorResult getMRZDetectorResult() throws ClassCastException {
    return (MRZDetectorResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `MRZPositionResult`. If the actual instance is not
   * `MRZPositionResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `MRZPositionResult`
   * @throws ClassCastException if the instance is not `MRZPositionResult`
   */
  public MRZPositionResult getMRZPositionResult() throws ClassCastException {
    return (MRZPositionResult) super.getActualInstance();
  }

  /**
   * Get the actual instance of `MRZTestQualityResult`. If the actual instance is not
   * `MRZTestQualityResult`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `MRZTestQualityResult`
   * @throws ClassCastException if the instance is not `MRZTestQualityResult`
   */
  public MRZTestQualityResult getMRZTestQualityResult() throws ClassCastException {
    return (MRZTestQualityResult) super.getActualInstance();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerListListInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with StatusResult
    try {
      StatusResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for StatusResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TextResult
    try {
      TextResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for TextResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DocumentImageResult
    try {
      DocumentImageResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format(
              "Deserialization for DocumentImageResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ImagesResult
    try {
      ImagesResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for ImagesResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ChosenDocumentTypeResult
    try {
      ChosenDocumentTypeResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format(
              "Deserialization for ChosenDocumentTypeResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DocumentTypesCandidatesResult
    try {
      DocumentTypesCandidatesResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format(
              "Deserialization for DocumentTypesCandidatesResult failed with `%s`.",
              e.getMessage()));
      // continue to the next one
    }
    // validate the json string with TextDataResult
    try {
      TextDataResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for TextDataResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with GraphicsResult
    try {
      GraphicsResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for GraphicsResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with LexicalAnalysisResult
    try {
      LexicalAnalysisResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format(
              "Deserialization for LexicalAnalysisResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AuthenticityResult
    try {
      AuthenticityResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format(
              "Deserialization for AuthenticityResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ImageQualityResult
    try {
      ImageQualityResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format(
              "Deserialization for ImageQualityResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DocumentPositionResult
    try {
      DocumentPositionResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format(
              "Deserialization for DocumentPositionResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DocBarCodeInfo
    try {
      DocBarCodeInfo.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for DocBarCodeInfo failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with LicenseResult
    try {
      LicenseResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for LicenseResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EncryptedRCLResult
    try {
      EncryptedRCLResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format(
              "Deserialization for EncryptedRCLResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with DocumentBinaryInfoResult
    try {
      DocumentBinaryInfoResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format(
              "Deserialization for DocumentBinaryInfoResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with ByteArrayResult
    try {
      ByteArrayResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for ByteArrayResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with FaceDetectionResult
    try {
      FaceDetectionResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format(
              "Deserialization for FaceDetectionResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MRZDetectorResult
    try {
      MRZDetectorResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for MRZDetectorResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MRZPositionResult
    try {
      MRZPositionResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format("Deserialization for MRZPositionResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with MRZTestQualityResult
    try {
      MRZTestQualityResult.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(
          String.format(
              "Deserialization for MRZTestQualityResult failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(
          String.format(
              "The JSON string is invalid for ContainerListListInner with oneOf schemas: AuthenticityResult, ByteArrayResult, ChosenDocumentTypeResult, DocBarCodeInfo, DocumentBinaryInfoResult, DocumentImageResult, DocumentPositionResult, DocumentTypesCandidatesResult, EncryptedRCLResult, FaceDetectionResult, GraphicsResult, ImageQualityResult, ImagesResult, LexicalAnalysisResult, LicenseResult, MRZDetectorResult, MRZPositionResult, MRZTestQualityResult, StatusResult, TextDataResult, TextResult. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s",
              validCount, errorMessages, jsonElement.toString()));
    }
  }

  /**
   * Create an instance of ContainerListListInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerListListInner
   * @throws IOException if the JSON string is invalid with respect to ContainerListListInner
   */
  public static ContainerListListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerListListInner.class);
  }

  /**
   * Convert an instance of ContainerListListInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
