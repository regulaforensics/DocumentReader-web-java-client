/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Objects;

/** FaceDetectionResult */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.15.0")
public class FaceDetectionResult extends ResultItem {
  public static final String SERIALIZED_NAME_FACE_DETECTION = "FaceDetection";

  @SerializedName(SERIALIZED_NAME_FACE_DETECTION)
  @javax.annotation.Nullable
  private FaceDetection faceDetection;

  public FaceDetectionResult() {}

  public FaceDetectionResult faceDetection(@javax.annotation.Nullable FaceDetection faceDetection) {
    this.faceDetection = faceDetection;
    return this;
  }

  /**
   * Get faceDetection
   *
   * @return faceDetection
   */
  @javax.annotation.Nullable
  public FaceDetection getFaceDetection() {
    return faceDetection;
  }

  public void setFaceDetection(@javax.annotation.Nullable FaceDetection faceDetection) {
    this.faceDetection = faceDetection;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaceDetectionResult faceDetectionResult = (FaceDetectionResult) o;
    return Objects.equals(this.faceDetection, faceDetectionResult.faceDetection) && super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(faceDetection, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaceDetectionResult {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    faceDetection: ").append(toIndentedString(faceDetection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields =
        new HashSet<String>(
            Arrays.asList(
                "buf_length", "light", "list_idx", "page_idx", "result_type", "FaceDetection"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(Arrays.asList("result_type"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FaceDetectionResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!FaceDetectionResult.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        System.err.println(
            String.format(
                "The required field(s) %s in FaceDetectionResult is not found in the empty JSON string",
                FaceDetectionResult.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : FaceDetectionResult.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        System.err.println(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!FaceDetectionResult.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'FaceDetectionResult' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<FaceDetectionResult> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(FaceDetectionResult.class));

      return (TypeAdapter<T>)
          new TypeAdapter<FaceDetectionResult>() {
            @Override
            public void write(JsonWriter out, FaceDetectionResult value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public FaceDetectionResult read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of FaceDetectionResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FaceDetectionResult
   * @throws IOException if the JSON string is invalid with respect to FaceDetectionResult
   */
  public static FaceDetectionResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FaceDetectionResult.class);
  }

  /**
   * Convert an instance of FaceDetectionResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
