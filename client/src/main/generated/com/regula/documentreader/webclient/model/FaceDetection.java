/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.6.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/** FaceDetection */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class FaceDetection {
  public static final String SERIALIZED_NAME_COUNT = "Count";

  @SerializedName(SERIALIZED_NAME_COUNT)
  @javax.annotation.Nonnull
  private Integer count;

  public static final String SERIALIZED_NAME_COUNT_FALSE_DETECTION = "CountFalseDetection";

  @SerializedName(SERIALIZED_NAME_COUNT_FALSE_DETECTION)
  @javax.annotation.Nonnull
  private Integer countFalseDetection;

  public static final String SERIALIZED_NAME_RES = "Res";

  @SerializedName(SERIALIZED_NAME_RES)
  @javax.annotation.Nonnull
  private List<FaceItem> res;

  public static final String SERIALIZED_NAME_RESERVED1 = "Reserved1";

  @SerializedName(SERIALIZED_NAME_RESERVED1)
  @javax.annotation.Nullable
  private Integer reserved1;

  public static final String SERIALIZED_NAME_RESERVED2 = "Reserved2";

  @SerializedName(SERIALIZED_NAME_RESERVED2)
  @javax.annotation.Nullable
  private Integer reserved2;

  public FaceDetection() {}

  public FaceDetection count(@javax.annotation.Nonnull Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   *
   * @return count
   */
  @javax.annotation.Nonnull
  public Integer getCount() {
    return count;
  }

  public void setCount(@javax.annotation.Nonnull Integer count) {
    this.count = count;
  }

  public FaceDetection countFalseDetection(@javax.annotation.Nonnull Integer countFalseDetection) {
    this.countFalseDetection = countFalseDetection;
    return this;
  }

  /**
   * Get countFalseDetection
   *
   * @return countFalseDetection
   */
  @javax.annotation.Nonnull
  public Integer getCountFalseDetection() {
    return countFalseDetection;
  }

  public void setCountFalseDetection(@javax.annotation.Nonnull Integer countFalseDetection) {
    this.countFalseDetection = countFalseDetection;
  }

  public FaceDetection res(@javax.annotation.Nonnull List<FaceItem> res) {
    this.res = res;
    return this;
  }

  public FaceDetection addResItem(FaceItem resItem) {
    if (this.res == null) {
      this.res = new ArrayList<>();
    }
    this.res.add(resItem);
    return this;
  }

  /**
   * Get res
   *
   * @return res
   */
  @javax.annotation.Nonnull
  public List<FaceItem> getRes() {
    return res;
  }

  public void setRes(@javax.annotation.Nonnull List<FaceItem> res) {
    this.res = res;
  }

  public FaceDetection reserved1(@javax.annotation.Nullable Integer reserved1) {
    this.reserved1 = reserved1;
    return this;
  }

  /**
   * Get reserved1
   *
   * @return reserved1
   */
  @javax.annotation.Nullable
  public Integer getReserved1() {
    return reserved1;
  }

  public void setReserved1(@javax.annotation.Nullable Integer reserved1) {
    this.reserved1 = reserved1;
  }

  public FaceDetection reserved2(@javax.annotation.Nullable Integer reserved2) {
    this.reserved2 = reserved2;
    return this;
  }

  /**
   * Get reserved2
   *
   * @return reserved2
   */
  @javax.annotation.Nullable
  public Integer getReserved2() {
    return reserved2;
  }

  public void setReserved2(@javax.annotation.Nullable Integer reserved2) {
    this.reserved2 = reserved2;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FaceDetection faceDetection = (FaceDetection) o;
    return Objects.equals(this.count, faceDetection.count)
        && Objects.equals(this.countFalseDetection, faceDetection.countFalseDetection)
        && Objects.equals(this.res, faceDetection.res)
        && Objects.equals(this.reserved1, faceDetection.reserved1)
        && Objects.equals(this.reserved2, faceDetection.reserved2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, countFalseDetection, res, reserved1, reserved2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FaceDetection {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    countFalseDetection: ")
        .append(toIndentedString(countFalseDetection))
        .append("\n");
    sb.append("    res: ").append(toIndentedString(res)).append("\n");
    sb.append("    reserved1: ").append(toIndentedString(reserved1)).append("\n");
    sb.append("    reserved2: ").append(toIndentedString(reserved2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Count");
    openapiFields.add("CountFalseDetection");
    openapiFields.add("Res");
    openapiFields.add("Reserved1");
    openapiFields.add("Reserved2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Count");
    openapiRequiredFields.add("CountFalseDetection");
    openapiRequiredFields.add("Res");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FaceDetection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!FaceDetection.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in FaceDetection is not found in the empty JSON string",
                FaceDetection.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : FaceDetection.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // ensure the json data is an array
    if (!jsonObj.get("Res").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Res` to be an array in the JSON string but got `%s`",
              jsonObj.get("Res").toString()));
    }

    JsonArray jsonArrayres = jsonObj.getAsJsonArray("Res");
    // validate the required field `Res` (array)
    for (int i = 0; i < jsonArrayres.size(); i++) {
      FaceItem.validateJsonElement(jsonArrayres.get(i));
    }
    ;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!FaceDetection.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'FaceDetection' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<FaceDetection> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(FaceDetection.class));

      return (TypeAdapter<T>)
          new TypeAdapter<FaceDetection>() {
            @Override
            public void write(JsonWriter out, FaceDetection value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public FaceDetection read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of FaceDetection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FaceDetection
   * @throws IOException if the JSON string is invalid with respect to FaceDetection
   */
  public static FaceDetection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FaceDetection.class);
  }

  /**
   * Convert an instance of FaceDetection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
