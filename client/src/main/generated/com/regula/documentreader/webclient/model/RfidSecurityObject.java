/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/**
 * Structure is used to describe the contents of a single document security object (SO) and the
 * results of its check within the context of the communication session with electronic document
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.13.0")
public class RfidSecurityObject {
  public static final String SERIALIZED_NAME_VERSION = "Version";

  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private BigDecimal version;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "ObjectType";

  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  @javax.annotation.Nonnull
  private String objectType;

  public static final String SERIALIZED_NAME_FILE_REFERENCE = "FileReference";

  @SerializedName(SERIALIZED_NAME_FILE_REFERENCE)
  @javax.annotation.Nonnull
  private BigDecimal fileReference;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "Notifications";

  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  @javax.annotation.Nonnull
  private List<Integer> notifications;

  public static final String SERIALIZED_NAME_SIGNER_INFOS = "SignerInfos";

  @SerializedName(SERIALIZED_NAME_SIGNER_INFOS)
  @javax.annotation.Nonnull
  private List<RfidSignerInfoEx> signerInfos;

  public RfidSecurityObject() {}

  public RfidSecurityObject version(@javax.annotation.Nonnull BigDecimal version) {
    this.version = version;
    return this;
  }

  /**
   * Security object version
   *
   * @return version
   */
  @javax.annotation.Nonnull
  public BigDecimal getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull BigDecimal version) {
    this.version = version;
  }

  public RfidSecurityObject objectType(@javax.annotation.Nonnull String objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * Identifier of the security object
   *
   * @return objectType
   */
  @javax.annotation.Nonnull
  public String getObjectType() {
    return objectType;
  }

  public void setObjectType(@javax.annotation.Nonnull String objectType) {
    this.objectType = objectType;
  }

  public RfidSecurityObject fileReference(@javax.annotation.Nonnull BigDecimal fileReference) {
    this.fileReference = fileReference;
    return this;
  }

  /**
   * Reference to the source file of the security object data
   *
   * @return fileReference
   */
  @javax.annotation.Nonnull
  public BigDecimal getFileReference() {
    return fileReference;
  }

  public void setFileReference(@javax.annotation.Nonnull BigDecimal fileReference) {
    this.fileReference = fileReference;
  }

  public RfidSecurityObject notifications(@javax.annotation.Nonnull List<Integer> notifications) {
    this.notifications = notifications;
    return this;
  }

  public RfidSecurityObject addNotificationsItem(Integer notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

  /**
   * List of remarks arisen during the analysis of SO data structure. Can be ParsingErrorCodes or
   * ParsingNotificationCodes enum.
   *
   * @return notifications
   */
  @javax.annotation.Nonnull
  public List<Integer> getNotifications() {
    return notifications;
  }

  public void setNotifications(@javax.annotation.Nonnull List<Integer> notifications) {
    this.notifications = notifications;
  }

  public RfidSecurityObject signerInfos(
      @javax.annotation.Nonnull List<RfidSignerInfoEx> signerInfos) {
    this.signerInfos = signerInfos;
    return this;
  }

  public RfidSecurityObject addSignerInfosItem(RfidSignerInfoEx signerInfosItem) {
    if (this.signerInfos == null) {
      this.signerInfos = new ArrayList<>();
    }
    this.signerInfos.add(signerInfosItem);
    return this;
  }

  /**
   * List of containers to store information about digital signature objects contained in the SO
   *
   * @return signerInfos
   */
  @javax.annotation.Nonnull
  public List<RfidSignerInfoEx> getSignerInfos() {
    return signerInfos;
  }

  public void setSignerInfos(@javax.annotation.Nonnull List<RfidSignerInfoEx> signerInfos) {
    this.signerInfos = signerInfos;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RfidSecurityObject rfidSecurityObject = (RfidSecurityObject) o;
    return Objects.equals(this.version, rfidSecurityObject.version)
        && Objects.equals(this.objectType, rfidSecurityObject.objectType)
        && Objects.equals(this.fileReference, rfidSecurityObject.fileReference)
        && Objects.equals(this.notifications, rfidSecurityObject.notifications)
        && Objects.equals(this.signerInfos, rfidSecurityObject.signerInfos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, objectType, fileReference, notifications, signerInfos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RfidSecurityObject {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    fileReference: ").append(toIndentedString(fileReference)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    signerInfos: ").append(toIndentedString(signerInfos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Version");
    openapiFields.add("ObjectType");
    openapiFields.add("FileReference");
    openapiFields.add("Notifications");
    openapiFields.add("SignerInfos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Version");
    openapiRequiredFields.add("ObjectType");
    openapiRequiredFields.add("FileReference");
    openapiRequiredFields.add("Notifications");
    openapiRequiredFields.add("SignerInfos");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RfidSecurityObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!RfidSecurityObject.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in RfidSecurityObject is not found in the empty JSON string",
                RfidSecurityObject.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : RfidSecurityObject.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if (!jsonObj.get("ObjectType").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `ObjectType` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("ObjectType").toString()));
    }
    // ensure the required json array is present
    if (jsonObj.get("Notifications") == null) {
      throw new IllegalArgumentException(
          "Expected the field `linkedContent` to be an array in the JSON string but got `null`");
    } else if (!jsonObj.get("Notifications").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Notifications` to be an array in the JSON string but got `%s`",
              jsonObj.get("Notifications").toString()));
    }
    // ensure the json data is an array
    if (!jsonObj.get("SignerInfos").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `SignerInfos` to be an array in the JSON string but got `%s`",
              jsonObj.get("SignerInfos").toString()));
    }

    JsonArray jsonArraysignerInfos = jsonObj.getAsJsonArray("SignerInfos");
    // validate the required field `SignerInfos` (array)
    for (int i = 0; i < jsonArraysignerInfos.size(); i++) {
      RfidSignerInfoEx.validateJsonElement(jsonArraysignerInfos.get(i));
    }
    ;
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!RfidSecurityObject.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'RfidSecurityObject' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<RfidSecurityObject> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(RfidSecurityObject.class));

      return (TypeAdapter<T>)
          new TypeAdapter<RfidSecurityObject>() {
            @Override
            public void write(JsonWriter out, RfidSecurityObject value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public RfidSecurityObject read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of RfidSecurityObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RfidSecurityObject
   * @throws IOException if the JSON string is invalid with respect to RfidSecurityObject
   */
  public static RfidSecurityObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RfidSecurityObject.class);
  }

  /**
   * Convert an instance of RfidSecurityObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
