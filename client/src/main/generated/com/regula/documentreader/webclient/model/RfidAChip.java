/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

/**
 * Enumeration contains a set of constants specifying the type of the RFIDchip from MIFARE® family
 * (for chips of type A)
 */
@JsonAdapter(RfidAChip.Adapter.class)
public enum RfidAChip {

  /** Unknown */
  UNKNOWN(0),

  /** MIFARE® 1K */
  MIFARE_1K(1),

  /** MIFARE® 4K */
  MIFARE_4K(2),

  /** MIFARE® Ultralight */
  MIFARE_ULTRALIGHT(3),

  /** MIFARE® DESFire */
  MIFARE_DES_FIRE(4),

  /** MIFARE® ProX or SmartMX xD(T) */
  MIFARE_PROX(5);

  private Integer value;

  RfidAChip(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static RfidAChip fromValue(Integer value) {
    for (RfidAChip b : RfidAChip.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<RfidAChip> {
    @Override
    public void write(final JsonWriter jsonWriter, final RfidAChip enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public RfidAChip read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return RfidAChip.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    Integer value = jsonElement.getAsInt();
    RfidAChip.fromValue(value);
  }
}
