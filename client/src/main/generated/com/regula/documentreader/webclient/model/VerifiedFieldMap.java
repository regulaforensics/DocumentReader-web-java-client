/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/** VerifiedFieldMap */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.13.0")
public class VerifiedFieldMap {
  public static final String SERIALIZED_NAME_W_FIELD_TYPE = "wFieldType";

  @SerializedName(SERIALIZED_NAME_W_FIELD_TYPE)
  @javax.annotation.Nonnull
  private TextFieldType wFieldType;

  public static final String SERIALIZED_NAME_W_L_C_I_D = "wLCID";

  @SerializedName(SERIALIZED_NAME_W_L_C_I_D)
  @javax.annotation.Nonnull
  private LCID wLCID;

  public static final String SERIALIZED_NAME_FIELD_M_R_Z = "Field_MRZ";

  @SerializedName(SERIALIZED_NAME_FIELD_M_R_Z)
  @javax.annotation.Nullable
  private String fieldMRZ;

  public static final String SERIALIZED_NAME_FIELD_VISUAL = "Field_Visual";

  @SerializedName(SERIALIZED_NAME_FIELD_VISUAL)
  @javax.annotation.Nullable
  private String fieldVisual;

  public static final String SERIALIZED_NAME_FIELD_BARCODE = "Field_Barcode";

  @SerializedName(SERIALIZED_NAME_FIELD_BARCODE)
  @javax.annotation.Nullable
  private String fieldBarcode;

  public static final String SERIALIZED_NAME_FIELD_R_F_I_D = "Field_RFID";

  @SerializedName(SERIALIZED_NAME_FIELD_R_F_I_D)
  @javax.annotation.Nullable
  private String fieldRFID;

  public static final String SERIALIZED_NAME_MATRIX = "Matrix";

  @SerializedName(SERIALIZED_NAME_MATRIX)
  @javax.annotation.Nonnull
  private List<VerificationResult> matrix;

  public static final String SERIALIZED_NAME_FIELD_TYPE = "FieldType";

  @SerializedName(SERIALIZED_NAME_FIELD_TYPE)
  @javax.annotation.Nullable
  private Integer fieldType;

  public VerifiedFieldMap() {}

  public VerifiedFieldMap wFieldType(@javax.annotation.Nonnull TextFieldType wFieldType) {
    this.wFieldType = wFieldType;
    return this;
  }

  /**
   * Get wFieldType
   *
   * @return wFieldType
   */
  @javax.annotation.Nonnull
  public TextFieldType getwFieldType() {
    return wFieldType;
  }

  public void setwFieldType(@javax.annotation.Nonnull TextFieldType wFieldType) {
    this.wFieldType = wFieldType;
  }

  public VerifiedFieldMap wLCID(@javax.annotation.Nonnull LCID wLCID) {
    this.wLCID = wLCID;
    return this;
  }

  /**
   * Get wLCID
   *
   * @return wLCID
   */
  @javax.annotation.Nonnull
  public LCID getwLCID() {
    return wLCID;
  }

  public void setwLCID(@javax.annotation.Nonnull LCID wLCID) {
    this.wLCID = wLCID;
  }

  public VerifiedFieldMap fieldMRZ(@javax.annotation.Nullable String fieldMRZ) {
    this.fieldMRZ = fieldMRZ;
    return this;
  }

  /**
   * Field data extracted from mrz(machine readable zone)
   *
   * @return fieldMRZ
   */
  @javax.annotation.Nullable
  public String getFieldMRZ() {
    return fieldMRZ;
  }

  public void setFieldMRZ(@javax.annotation.Nullable String fieldMRZ) {
    this.fieldMRZ = fieldMRZ;
  }

  public VerifiedFieldMap fieldVisual(@javax.annotation.Nullable String fieldVisual) {
    this.fieldVisual = fieldVisual;
    return this;
  }

  /**
   * Field data extracted from visual zone
   *
   * @return fieldVisual
   */
  @javax.annotation.Nullable
  public String getFieldVisual() {
    return fieldVisual;
  }

  public void setFieldVisual(@javax.annotation.Nullable String fieldVisual) {
    this.fieldVisual = fieldVisual;
  }

  public VerifiedFieldMap fieldBarcode(@javax.annotation.Nullable String fieldBarcode) {
    this.fieldBarcode = fieldBarcode;
    return this;
  }

  /**
   * Field data extracted from barcode
   *
   * @return fieldBarcode
   */
  @javax.annotation.Nullable
  public String getFieldBarcode() {
    return fieldBarcode;
  }

  public void setFieldBarcode(@javax.annotation.Nullable String fieldBarcode) {
    this.fieldBarcode = fieldBarcode;
  }

  public VerifiedFieldMap fieldRFID(@javax.annotation.Nullable String fieldRFID) {
    this.fieldRFID = fieldRFID;
    return this;
  }

  /**
   * Field data extracted from rfid chip
   *
   * @return fieldRFID
   */
  @javax.annotation.Nullable
  public String getFieldRFID() {
    return fieldRFID;
  }

  public void setFieldRFID(@javax.annotation.Nullable String fieldRFID) {
    this.fieldRFID = fieldRFID;
  }

  public VerifiedFieldMap matrix(@javax.annotation.Nonnull List<VerificationResult> matrix) {
    this.matrix = matrix;
    return this;
  }

  public VerifiedFieldMap addMatrixItem(VerificationResult matrixItem) {
    if (this.matrix == null) {
      this.matrix = new ArrayList<>();
    }
    this.matrix.add(matrixItem);
    return this;
  }

  /**
   * results comparison matrix. Elements of the matrix with indices 0, 1, 2, 3 take one of the
   * values Disabled(0), Verified(1) or Not_Verified(2), elements with indices 4, 5, 6, 7, 8 are one
   * of the values Disabled(0), Compare_Match(3) or Compare_Not_Match(4). Elements of the Matrix
   * matrix have the following semantic meaning: - element with index 0 –– the result of
   * verification of data from the MRZ; - 1 –– the result of verification of data from the RFID
   * microcircuit; - 2 –– the result of verification of data from text areas of the document; - 3 ––
   * the result of verification data from barcodes; - 4 - the result of comparing MRZ data and RFID
   * microcircuits; - 5 - the result of comparing MRZ data and text areas of document filling; - 6 -
   * the result of comparing MRZ data and bar codes; - 7 - the result of comparing the data of text
   * areas of the document and the RFID chip; - 8 - the result of comparing the data of the text
   * areas of the document and barcodes; - 9 - the result of comparing the data of the RFID chip and
   * barcodes.
   *
   * @return matrix
   */
  @javax.annotation.Nonnull
  public List<VerificationResult> getMatrix() {
    return matrix;
  }

  public void setMatrix(@javax.annotation.Nonnull List<VerificationResult> matrix) {
    this.matrix = matrix;
  }

  public VerifiedFieldMap fieldType(@javax.annotation.Nullable Integer fieldType) {
    this.fieldType = fieldType;
    return this;
  }

  /**
   * Get fieldType
   *
   * @return fieldType
   */
  @javax.annotation.Nullable
  public Integer getFieldType() {
    return fieldType;
  }

  public void setFieldType(@javax.annotation.Nullable Integer fieldType) {
    this.fieldType = fieldType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifiedFieldMap verifiedFieldMap = (VerifiedFieldMap) o;
    return Objects.equals(this.wFieldType, verifiedFieldMap.wFieldType)
        && Objects.equals(this.wLCID, verifiedFieldMap.wLCID)
        && Objects.equals(this.fieldMRZ, verifiedFieldMap.fieldMRZ)
        && Objects.equals(this.fieldVisual, verifiedFieldMap.fieldVisual)
        && Objects.equals(this.fieldBarcode, verifiedFieldMap.fieldBarcode)
        && Objects.equals(this.fieldRFID, verifiedFieldMap.fieldRFID)
        && Objects.equals(this.matrix, verifiedFieldMap.matrix)
        && Objects.equals(this.fieldType, verifiedFieldMap.fieldType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        wFieldType, wLCID, fieldMRZ, fieldVisual, fieldBarcode, fieldRFID, matrix, fieldType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifiedFieldMap {\n");
    sb.append("    wFieldType: ").append(toIndentedString(wFieldType)).append("\n");
    sb.append("    wLCID: ").append(toIndentedString(wLCID)).append("\n");
    sb.append("    fieldMRZ: ").append(toIndentedString(fieldMRZ)).append("\n");
    sb.append("    fieldVisual: ").append(toIndentedString(fieldVisual)).append("\n");
    sb.append("    fieldBarcode: ").append(toIndentedString(fieldBarcode)).append("\n");
    sb.append("    fieldRFID: ").append(toIndentedString(fieldRFID)).append("\n");
    sb.append("    matrix: ").append(toIndentedString(matrix)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("wFieldType");
    openapiFields.add("wLCID");
    openapiFields.add("Field_MRZ");
    openapiFields.add("Field_Visual");
    openapiFields.add("Field_Barcode");
    openapiFields.add("Field_RFID");
    openapiFields.add("Matrix");
    openapiFields.add("FieldType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("wFieldType");
    openapiRequiredFields.add("wLCID");
    openapiRequiredFields.add("Matrix");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VerifiedFieldMap
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!VerifiedFieldMap.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in VerifiedFieldMap is not found in the empty JSON string",
                VerifiedFieldMap.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : VerifiedFieldMap.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the required field `wFieldType`
    TextFieldType.validateJsonElement(jsonObj.get("wFieldType"));
    // validate the required field `wLCID`
    LCID.validateJsonElement(jsonObj.get("wLCID"));
    if ((jsonObj.get("Field_MRZ") != null && !jsonObj.get("Field_MRZ").isJsonNull())
        && !jsonObj.get("Field_MRZ").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Field_MRZ` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("Field_MRZ").toString()));
    }
    if ((jsonObj.get("Field_Visual") != null && !jsonObj.get("Field_Visual").isJsonNull())
        && !jsonObj.get("Field_Visual").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Field_Visual` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("Field_Visual").toString()));
    }
    if ((jsonObj.get("Field_Barcode") != null && !jsonObj.get("Field_Barcode").isJsonNull())
        && !jsonObj.get("Field_Barcode").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Field_Barcode` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("Field_Barcode").toString()));
    }
    if ((jsonObj.get("Field_RFID") != null && !jsonObj.get("Field_RFID").isJsonNull())
        && !jsonObj.get("Field_RFID").isJsonPrimitive()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Field_RFID` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("Field_RFID").toString()));
    }
    // ensure the required json array is present
    if (jsonObj.get("Matrix") == null) {
      throw new IllegalArgumentException(
          "Expected the field `linkedContent` to be an array in the JSON string but got `null`");
    } else if (!jsonObj.get("Matrix").isJsonArray()) {
      throw new IllegalArgumentException(
          String.format(
              "Expected the field `Matrix` to be an array in the JSON string but got `%s`",
              jsonObj.get("Matrix").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!VerifiedFieldMap.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'VerifiedFieldMap' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<VerifiedFieldMap> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(VerifiedFieldMap.class));

      return (TypeAdapter<T>)
          new TypeAdapter<VerifiedFieldMap>() {
            @Override
            public void write(JsonWriter out, VerifiedFieldMap value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public VerifiedFieldMap read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of VerifiedFieldMap given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VerifiedFieldMap
   * @throws IOException if the JSON string is invalid with respect to VerifiedFieldMap
   */
  public static VerifiedFieldMap fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifiedFieldMap.class);
  }

  /**
   * Convert an instance of VerifiedFieldMap to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
