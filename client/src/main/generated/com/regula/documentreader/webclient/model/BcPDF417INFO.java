/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.  # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 6.3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.annotations.SerializedName;
import java.util.Objects;

/** BcPDF417INFO */
public class BcPDF417INFO {
  public static final String SERIALIZED_NAME_ANGLE = "Angle";

  @SerializedName(SERIALIZED_NAME_ANGLE)
  private Float angle = null;

  public static final String SERIALIZED_NAME_BC_COLUMN = "bcColumn";

  @SerializedName(SERIALIZED_NAME_BC_COLUMN)
  private Integer bcColumn;

  public static final String SERIALIZED_NAME_BC_ERROR_LEVEL = "bcErrorLevel";

  @SerializedName(SERIALIZED_NAME_BC_ERROR_LEVEL)
  private Integer bcErrorLevel;

  public static final String SERIALIZED_NAME_BC_ROW = "bcRow";

  @SerializedName(SERIALIZED_NAME_BC_ROW)
  private Integer bcRow;

  public static final String SERIALIZED_NAME_MIN_X = "minX";

  @SerializedName(SERIALIZED_NAME_MIN_X)
  private Float minX = null;

  public static final String SERIALIZED_NAME_MIN_Y = "minY";

  @SerializedName(SERIALIZED_NAME_MIN_Y)
  private Float minY = null;

  public BcPDF417INFO withAngle(Float angle) {
    this.angle = angle;
    return this;
  }

  /**
   * Get angle
   *
   * @return angle
   */
  @javax.annotation.Nullable
  public Float getAngle() {
    return angle;
  }

  public void setAngle(Float angle) {
    this.angle = angle;
  }

  public BcPDF417INFO withBcColumn(Integer bcColumn) {
    this.bcColumn = bcColumn;
    return this;
  }

  /**
   * Get bcColumn
   *
   * @return bcColumn
   */
  @javax.annotation.Nullable
  public Integer getBcColumn() {
    return bcColumn;
  }

  public void setBcColumn(Integer bcColumn) {
    this.bcColumn = bcColumn;
  }

  public BcPDF417INFO withBcErrorLevel(Integer bcErrorLevel) {
    this.bcErrorLevel = bcErrorLevel;
    return this;
  }

  /**
   * Get bcErrorLevel
   *
   * @return bcErrorLevel
   */
  @javax.annotation.Nullable
  public Integer getBcErrorLevel() {
    return bcErrorLevel;
  }

  public void setBcErrorLevel(Integer bcErrorLevel) {
    this.bcErrorLevel = bcErrorLevel;
  }

  public BcPDF417INFO withBcRow(Integer bcRow) {
    this.bcRow = bcRow;
    return this;
  }

  /**
   * Get bcRow
   *
   * @return bcRow
   */
  @javax.annotation.Nullable
  public Integer getBcRow() {
    return bcRow;
  }

  public void setBcRow(Integer bcRow) {
    this.bcRow = bcRow;
  }

  public BcPDF417INFO withMinX(Float minX) {
    this.minX = minX;
    return this;
  }

  /**
   * Get minX
   *
   * @return minX
   */
  @javax.annotation.Nullable
  public Float getMinX() {
    return minX;
  }

  public void setMinX(Float minX) {
    this.minX = minX;
  }

  public BcPDF417INFO withMinY(Float minY) {
    this.minY = minY;
    return this;
  }

  /**
   * Get minY
   *
   * @return minY
   */
  @javax.annotation.Nullable
  public Float getMinY() {
    return minY;
  }

  public void setMinY(Float minY) {
    this.minY = minY;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BcPDF417INFO bcPDF417INFO = (BcPDF417INFO) o;
    return Objects.equals(this.angle, bcPDF417INFO.angle)
        && Objects.equals(this.bcColumn, bcPDF417INFO.bcColumn)
        && Objects.equals(this.bcErrorLevel, bcPDF417INFO.bcErrorLevel)
        && Objects.equals(this.bcRow, bcPDF417INFO.bcRow)
        && Objects.equals(this.minX, bcPDF417INFO.minX)
        && Objects.equals(this.minY, bcPDF417INFO.minY);
  }

  @Override
  public int hashCode() {
    return Objects.hash(angle, bcColumn, bcErrorLevel, bcRow, minX, minY);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BcPDF417INFO {\n");
    sb.append("    angle: ").append(toIndentedString(angle)).append("\n");
    sb.append("    bcColumn: ").append(toIndentedString(bcColumn)).append("\n");
    sb.append("    bcErrorLevel: ").append(toIndentedString(bcErrorLevel)).append("\n");
    sb.append("    bcRow: ").append(toIndentedString(bcRow)).append("\n");
    sb.append("    minX: ").append(toIndentedString(minX)).append("\n");
    sb.append("    minY: ").append(toIndentedString(minY)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
