/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 7.4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/** BcPDF417INFO */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class BcPDF417INFO {
  public static final String SERIALIZED_NAME_ANGLE = "Angle";

  @SerializedName(SERIALIZED_NAME_ANGLE)
  @javax.annotation.Nonnull
  private Float angle;

  public static final String SERIALIZED_NAME_BC_COLUMN = "bcColumn";

  @SerializedName(SERIALIZED_NAME_BC_COLUMN)
  @javax.annotation.Nonnull
  private Integer bcColumn;

  public static final String SERIALIZED_NAME_BC_ERROR_LEVEL = "bcErrorLevel";

  @SerializedName(SERIALIZED_NAME_BC_ERROR_LEVEL)
  @javax.annotation.Nonnull
  private Integer bcErrorLevel;

  public static final String SERIALIZED_NAME_BC_ROW = "bcRow";

  @SerializedName(SERIALIZED_NAME_BC_ROW)
  @javax.annotation.Nonnull
  private Integer bcRow;

  public static final String SERIALIZED_NAME_MIN_X = "minX";

  @SerializedName(SERIALIZED_NAME_MIN_X)
  @javax.annotation.Nonnull
  private Float minX;

  public static final String SERIALIZED_NAME_MIN_Y = "minY";

  @SerializedName(SERIALIZED_NAME_MIN_Y)
  @javax.annotation.Nonnull
  private Float minY;

  public BcPDF417INFO() {}

  public BcPDF417INFO angle(@javax.annotation.Nonnull Float angle) {
    this.angle = angle;
    return this;
  }

  /**
   * Get angle
   *
   * @return angle
   */
  @javax.annotation.Nonnull
  public Float getAngle() {
    return angle;
  }

  public void setAngle(@javax.annotation.Nonnull Float angle) {
    this.angle = angle;
  }

  public BcPDF417INFO bcColumn(@javax.annotation.Nonnull Integer bcColumn) {
    this.bcColumn = bcColumn;
    return this;
  }

  /**
   * Get bcColumn
   *
   * @return bcColumn
   */
  @javax.annotation.Nonnull
  public Integer getBcColumn() {
    return bcColumn;
  }

  public void setBcColumn(@javax.annotation.Nonnull Integer bcColumn) {
    this.bcColumn = bcColumn;
  }

  public BcPDF417INFO bcErrorLevel(@javax.annotation.Nonnull Integer bcErrorLevel) {
    this.bcErrorLevel = bcErrorLevel;
    return this;
  }

  /**
   * Get bcErrorLevel
   *
   * @return bcErrorLevel
   */
  @javax.annotation.Nonnull
  public Integer getBcErrorLevel() {
    return bcErrorLevel;
  }

  public void setBcErrorLevel(@javax.annotation.Nonnull Integer bcErrorLevel) {
    this.bcErrorLevel = bcErrorLevel;
  }

  public BcPDF417INFO bcRow(@javax.annotation.Nonnull Integer bcRow) {
    this.bcRow = bcRow;
    return this;
  }

  /**
   * Get bcRow
   *
   * @return bcRow
   */
  @javax.annotation.Nonnull
  public Integer getBcRow() {
    return bcRow;
  }

  public void setBcRow(@javax.annotation.Nonnull Integer bcRow) {
    this.bcRow = bcRow;
  }

  public BcPDF417INFO minX(@javax.annotation.Nonnull Float minX) {
    this.minX = minX;
    return this;
  }

  /**
   * Get minX
   *
   * @return minX
   */
  @javax.annotation.Nonnull
  public Float getMinX() {
    return minX;
  }

  public void setMinX(@javax.annotation.Nonnull Float minX) {
    this.minX = minX;
  }

  public BcPDF417INFO minY(@javax.annotation.Nonnull Float minY) {
    this.minY = minY;
    return this;
  }

  /**
   * Get minY
   *
   * @return minY
   */
  @javax.annotation.Nonnull
  public Float getMinY() {
    return minY;
  }

  public void setMinY(@javax.annotation.Nonnull Float minY) {
    this.minY = minY;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BcPDF417INFO bcPDF417INFO = (BcPDF417INFO) o;
    return Objects.equals(this.angle, bcPDF417INFO.angle)
        && Objects.equals(this.bcColumn, bcPDF417INFO.bcColumn)
        && Objects.equals(this.bcErrorLevel, bcPDF417INFO.bcErrorLevel)
        && Objects.equals(this.bcRow, bcPDF417INFO.bcRow)
        && Objects.equals(this.minX, bcPDF417INFO.minX)
        && Objects.equals(this.minY, bcPDF417INFO.minY);
  }

  @Override
  public int hashCode() {
    return Objects.hash(angle, bcColumn, bcErrorLevel, bcRow, minX, minY);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BcPDF417INFO {\n");
    sb.append("    angle: ").append(toIndentedString(angle)).append("\n");
    sb.append("    bcColumn: ").append(toIndentedString(bcColumn)).append("\n");
    sb.append("    bcErrorLevel: ").append(toIndentedString(bcErrorLevel)).append("\n");
    sb.append("    bcRow: ").append(toIndentedString(bcRow)).append("\n");
    sb.append("    minX: ").append(toIndentedString(minX)).append("\n");
    sb.append("    minY: ").append(toIndentedString(minY)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Angle");
    openapiFields.add("bcColumn");
    openapiFields.add("bcErrorLevel");
    openapiFields.add("bcRow");
    openapiFields.add("minX");
    openapiFields.add("minY");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Angle");
    openapiRequiredFields.add("bcColumn");
    openapiRequiredFields.add("bcErrorLevel");
    openapiRequiredFields.add("bcRow");
    openapiRequiredFields.add("minX");
    openapiRequiredFields.add("minY");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BcPDF417INFO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!BcPDF417INFO.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        throw new IllegalArgumentException(
            String.format(
                "The required field(s) %s in BcPDF417INFO is not found in the empty JSON string",
                BcPDF417INFO.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!BcPDF417INFO.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(
            String.format(
                "The field `%s` in the JSON string is not defined in the `BcPDF417INFO` properties. JSON: %s",
                entry.getKey(), jsonElement.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : BcPDF417INFO.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        throw new IllegalArgumentException(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!BcPDF417INFO.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'BcPDF417INFO' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<BcPDF417INFO> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(BcPDF417INFO.class));

      return (TypeAdapter<T>)
          new TypeAdapter<BcPDF417INFO>() {
            @Override
            public void write(JsonWriter out, BcPDF417INFO value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public BcPDF417INFO read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of BcPDF417INFO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BcPDF417INFO
   * @throws IOException if the JSON string is invalid with respect to BcPDF417INFO
   */
  public static BcPDF417INFO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BcPDF417INFO.class);
  }

  /**
   * Convert an instance of BcPDF417INFO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
