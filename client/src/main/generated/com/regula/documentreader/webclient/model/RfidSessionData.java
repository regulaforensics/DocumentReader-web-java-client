/*
 * Regula Document Reader Web API
 * Documents recognition as easy as reading two bytes.   # Clients: * [JavaScript](https://github.com/regulaforensics/DocumentReader-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/DocumentReader-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/DocumentReader-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/DocumentReader-web-csharp-client) client for .NET & .NET Core
 *
 * The version of the OpenAPI document: 8.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.regula.documentreader.webclient.model;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.regula.documentreader.webclient.JSON;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Objects;

/**
 * Structure is used to describe the results of work with the SDK within the context of the current
 * communication session with electronic document
 */
@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.15.0")
public class RfidSessionData {
  public static final String SERIALIZED_NAME_VIRTUAL_MODE = "VirtualMode";

  @SerializedName(SERIALIZED_NAME_VIRTUAL_MODE)
  @javax.annotation.Nullable
  private Boolean virtualMode;

  public static final String SERIALIZED_NAME_SD_K_VERSION = "SDKVersion";

  @SerializedName(SERIALIZED_NAME_SD_K_VERSION)
  @javax.annotation.Nullable
  private String sdKVersion;

  public static final String SERIALIZED_NAME_DRIVER_VERSION = "DriverVersion";

  @SerializedName(SERIALIZED_NAME_DRIVER_VERSION)
  @javax.annotation.Nullable
  private String driverVersion;

  public static final String SERIALIZED_NAME_FIRMWARE_VERSION = "FirmwareVersion";

  @SerializedName(SERIALIZED_NAME_FIRMWARE_VERSION)
  @javax.annotation.Nullable
  private String firmwareVersion;

  public static final String SERIALIZED_NAME_APPLICATIONS = "Applications";

  @SerializedName(SERIALIZED_NAME_APPLICATIONS)
  @javax.annotation.Nonnull
  private List<RfidApplication> applications;

  public static final String SERIALIZED_NAME_ACCESS_CONTROLS = "AccessControls";

  @SerializedName(SERIALIZED_NAME_ACCESS_CONTROLS)
  @javax.annotation.Nonnull
  private List<RfidAccessControlInfo> accessControls;

  public static final String SERIALIZED_NAME_CARD_PROPERTIES = "CardProperties";

  @SerializedName(SERIALIZED_NAME_CARD_PROPERTIES)
  @javax.annotation.Nonnull
  private RfidCardPropertiesExt cardProperties;

  public static final String SERIALIZED_NAME_EXT_LE_SUPPORT = "ExtLeSupport";

  @SerializedName(SERIALIZED_NAME_EXT_LE_SUPPORT)
  @javax.annotation.Nonnull
  private RFIDErrorCodes extLeSupport;

  public static final String SERIALIZED_NAME_PROCESS_TIME = "ProcessTime";

  @SerializedName(SERIALIZED_NAME_PROCESS_TIME)
  @javax.annotation.Nonnull
  private BigDecimal processTime;

  public static final String SERIALIZED_NAME_ROOT_FILES = "RootFiles";

  @SerializedName(SERIALIZED_NAME_ROOT_FILES)
  @javax.annotation.Nonnull
  private List<Object> rootFiles;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_SENT = "TotalBytesSent";

  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_SENT)
  @javax.annotation.Nonnull
  private BigDecimal totalBytesSent;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_RECEIVED = "TotalBytesReceived";

  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_RECEIVED)
  @javax.annotation.Nonnull
  private BigDecimal totalBytesReceived;

  public static final String SERIALIZED_NAME_SESSION_KEY = "Session_key";

  @SerializedName(SERIALIZED_NAME_SESSION_KEY)
  @javax.annotation.Nonnull
  private RfidAccessKey sessionKey;

  public static final String SERIALIZED_NAME_SESSION_TERMINAL = "Session_terminal";

  @SerializedName(SERIALIZED_NAME_SESSION_TERMINAL)
  @javax.annotation.Nonnull
  private RfidTerminal sessionTerminal;

  public static final String SERIALIZED_NAME_SESSION_PROCEDURE = "Session_procedure";

  @SerializedName(SERIALIZED_NAME_SESSION_PROCEDURE)
  @javax.annotation.Nonnull
  private RfidAuthenticationProcedureType sessionProcedure;

  public static final String SERIALIZED_NAME_SECURITY_OBJECTS = "SecurityObjects";

  @SerializedName(SERIALIZED_NAME_SECURITY_OBJECTS)
  @javax.annotation.Nonnull
  private List<RfidSecurityObject> securityObjects;

  public static final String SERIALIZED_NAME_STATUS = "Status";

  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private CheckResult status;

  public RfidSessionData() {}

  public RfidSessionData virtualMode(@javax.annotation.Nullable Boolean virtualMode) {
    this.virtualMode = virtualMode;
    return this;
  }

  /**
   * Sign of virtual session when working with loaded data from a previous communication session
   * with the electronic document
   *
   * @return virtualMode
   */
  @javax.annotation.Nullable
  public Boolean getVirtualMode() {
    return virtualMode;
  }

  public void setVirtualMode(@javax.annotation.Nullable Boolean virtualMode) {
    this.virtualMode = virtualMode;
  }

  public RfidSessionData sdKVersion(@javax.annotation.Nullable String sdKVersion) {
    this.sdKVersion = sdKVersion;
    return this;
  }

  /**
   * Text SDKVersion value in format A.B (e.g. 3.1)
   *
   * @return sdKVersion
   */
  @javax.annotation.Nullable
  public String getSdKVersion() {
    return sdKVersion;
  }

  public void setSdKVersion(@javax.annotation.Nullable String sdKVersion) {
    this.sdKVersion = sdKVersion;
  }

  public RfidSessionData driverVersion(@javax.annotation.Nullable String driverVersion) {
    this.driverVersion = driverVersion;
    return this;
  }

  /**
   * Text DriverVersion value in format A.B.C.D (e.g. 6.2.5.4)
   *
   * @return driverVersion
   */
  @javax.annotation.Nullable
  public String getDriverVersion() {
    return driverVersion;
  }

  public void setDriverVersion(@javax.annotation.Nullable String driverVersion) {
    this.driverVersion = driverVersion;
  }

  public RfidSessionData firmwareVersion(@javax.annotation.Nullable String firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
    return this;
  }

  /**
   * Text FirmwareVersion value in format A.B (e.g. 5.19)
   *
   * @return firmwareVersion
   */
  @javax.annotation.Nullable
  public String getFirmwareVersion() {
    return firmwareVersion;
  }

  public void setFirmwareVersion(@javax.annotation.Nullable String firmwareVersion) {
    this.firmwareVersion = firmwareVersion;
  }

  public RfidSessionData applications(
      @javax.annotation.Nonnull List<RfidApplication> applications) {
    this.applications = applications;
    return this;
  }

  public RfidSessionData addApplicationsItem(RfidApplication applicationsItem) {
    if (this.applications == null) {
      this.applications = new ArrayList<>();
    }
    this.applications.add(applicationsItem);
    return this;
  }

  /**
   * List of containers to store information about the involved applications of electronic document
   *
   * @return applications
   */
  @javax.annotation.Nonnull
  public List<RfidApplication> getApplications() {
    return applications;
  }

  public void setApplications(@javax.annotation.Nonnull List<RfidApplication> applications) {
    this.applications = applications;
  }

  public RfidSessionData accessControls(
      @javax.annotation.Nonnull List<RfidAccessControlInfo> accessControls) {
    this.accessControls = accessControls;
    return this;
  }

  public RfidSessionData addAccessControlsItem(RfidAccessControlInfo accessControlsItem) {
    if (this.accessControls == null) {
      this.accessControls = new ArrayList<>();
    }
    this.accessControls.add(accessControlsItem);
    return this;
  }

  /**
   * List of containers to store information about the supported procedures of authentication and
   * secure data access within the context of the session
   *
   * @return accessControls
   */
  @javax.annotation.Nonnull
  public List<RfidAccessControlInfo> getAccessControls() {
    return accessControls;
  }

  public void setAccessControls(
      @javax.annotation.Nonnull List<RfidAccessControlInfo> accessControls) {
    this.accessControls = accessControls;
  }

  public RfidSessionData cardProperties(
      @javax.annotation.Nonnull RfidCardPropertiesExt cardProperties) {
    this.cardProperties = cardProperties;
    return this;
  }

  /**
   * Get cardProperties
   *
   * @return cardProperties
   */
  @javax.annotation.Nonnull
  public RfidCardPropertiesExt getCardProperties() {
    return cardProperties;
  }

  public void setCardProperties(@javax.annotation.Nonnull RfidCardPropertiesExt cardProperties) {
    this.cardProperties = cardProperties;
  }

  public RfidSessionData extLeSupport(@javax.annotation.Nonnull RFIDErrorCodes extLeSupport) {
    this.extLeSupport = extLeSupport;
    return this;
  }

  /**
   * Get extLeSupport
   *
   * @return extLeSupport
   */
  @javax.annotation.Nonnull
  public RFIDErrorCodes getExtLeSupport() {
    return extLeSupport;
  }

  public void setExtLeSupport(@javax.annotation.Nonnull RFIDErrorCodes extLeSupport) {
    this.extLeSupport = extLeSupport;
  }

  public RfidSessionData processTime(@javax.annotation.Nonnull BigDecimal processTime) {
    this.processTime = processTime;
    return this;
  }

  /**
   * Time of processing, milliseconds
   *
   * @return processTime
   */
  @javax.annotation.Nonnull
  public BigDecimal getProcessTime() {
    return processTime;
  }

  public void setProcessTime(@javax.annotation.Nonnull BigDecimal processTime) {
    this.processTime = processTime;
  }

  public RfidSessionData rootFiles(@javax.annotation.Nonnull List<Object> rootFiles) {
    this.rootFiles = rootFiles;
    return this;
  }

  public RfidSessionData addRootFilesItem(Object rootFilesItem) {
    if (this.rootFiles == null) {
      this.rootFiles = new ArrayList<>();
    }
    this.rootFiles.add(rootFilesItem);
    return this;
  }

  /**
   * List of containers to store information about the read files of the root Master File
   *
   * @return rootFiles
   */
  @javax.annotation.Nonnull
  public List<Object> getRootFiles() {
    return rootFiles;
  }

  public void setRootFiles(@javax.annotation.Nonnull List<Object> rootFiles) {
    this.rootFiles = rootFiles;
  }

  public RfidSessionData totalBytesSent(@javax.annotation.Nonnull BigDecimal totalBytesSent) {
    this.totalBytesSent = totalBytesSent;
    return this;
  }

  /**
   * Total number of bytes transmitted to the RFID-chip during the whole session
   *
   * @return totalBytesSent
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotalBytesSent() {
    return totalBytesSent;
  }

  public void setTotalBytesSent(@javax.annotation.Nonnull BigDecimal totalBytesSent) {
    this.totalBytesSent = totalBytesSent;
  }

  public RfidSessionData totalBytesReceived(
      @javax.annotation.Nonnull BigDecimal totalBytesReceived) {
    this.totalBytesReceived = totalBytesReceived;
    return this;
  }

  /**
   * Total number of bytes received from the RFID-chip during the whole session
   *
   * @return totalBytesReceived
   */
  @javax.annotation.Nonnull
  public BigDecimal getTotalBytesReceived() {
    return totalBytesReceived;
  }

  public void setTotalBytesReceived(@javax.annotation.Nonnull BigDecimal totalBytesReceived) {
    this.totalBytesReceived = totalBytesReceived;
  }

  public RfidSessionData sessionKey(@javax.annotation.Nonnull RfidAccessKey sessionKey) {
    this.sessionKey = sessionKey;
    return this;
  }

  /**
   * Get sessionKey
   *
   * @return sessionKey
   */
  @javax.annotation.Nonnull
  public RfidAccessKey getSessionKey() {
    return sessionKey;
  }

  public void setSessionKey(@javax.annotation.Nonnull RfidAccessKey sessionKey) {
    this.sessionKey = sessionKey;
  }

  public RfidSessionData sessionTerminal(@javax.annotation.Nonnull RfidTerminal sessionTerminal) {
    this.sessionTerminal = sessionTerminal;
    return this;
  }

  /**
   * Get sessionTerminal
   *
   * @return sessionTerminal
   */
  @javax.annotation.Nonnull
  public RfidTerminal getSessionTerminal() {
    return sessionTerminal;
  }

  public void setSessionTerminal(@javax.annotation.Nonnull RfidTerminal sessionTerminal) {
    this.sessionTerminal = sessionTerminal;
  }

  public RfidSessionData sessionProcedure(
      @javax.annotation.Nonnull RfidAuthenticationProcedureType sessionProcedure) {
    this.sessionProcedure = sessionProcedure;
    return this;
  }

  /**
   * Get sessionProcedure
   *
   * @return sessionProcedure
   */
  @javax.annotation.Nonnull
  public RfidAuthenticationProcedureType getSessionProcedure() {
    return sessionProcedure;
  }

  public void setSessionProcedure(
      @javax.annotation.Nonnull RfidAuthenticationProcedureType sessionProcedure) {
    this.sessionProcedure = sessionProcedure;
  }

  public RfidSessionData securityObjects(
      @javax.annotation.Nonnull List<RfidSecurityObject> securityObjects) {
    this.securityObjects = securityObjects;
    return this;
  }

  public RfidSessionData addSecurityObjectsItem(RfidSecurityObject securityObjectsItem) {
    if (this.securityObjects == null) {
      this.securityObjects = new ArrayList<>();
    }
    this.securityObjects.add(securityObjectsItem);
    return this;
  }

  /**
   * List of containers to store information about the detected document security objects
   *
   * @return securityObjects
   */
  @javax.annotation.Nonnull
  public List<RfidSecurityObject> getSecurityObjects() {
    return securityObjects;
  }

  public void setSecurityObjects(
      @javax.annotation.Nonnull List<RfidSecurityObject> securityObjects) {
    this.securityObjects = securityObjects;
  }

  public RfidSessionData status(@javax.annotation.Nullable CheckResult status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   *
   * @return status
   */
  @javax.annotation.Nullable
  public CheckResult getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable CheckResult status) {
    this.status = status;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RfidSessionData rfidSessionData = (RfidSessionData) o;
    return Objects.equals(this.virtualMode, rfidSessionData.virtualMode)
        && Objects.equals(this.sdKVersion, rfidSessionData.sdKVersion)
        && Objects.equals(this.driverVersion, rfidSessionData.driverVersion)
        && Objects.equals(this.firmwareVersion, rfidSessionData.firmwareVersion)
        && Objects.equals(this.applications, rfidSessionData.applications)
        && Objects.equals(this.accessControls, rfidSessionData.accessControls)
        && Objects.equals(this.cardProperties, rfidSessionData.cardProperties)
        && Objects.equals(this.extLeSupport, rfidSessionData.extLeSupport)
        && Objects.equals(this.processTime, rfidSessionData.processTime)
        && Objects.equals(this.rootFiles, rfidSessionData.rootFiles)
        && Objects.equals(this.totalBytesSent, rfidSessionData.totalBytesSent)
        && Objects.equals(this.totalBytesReceived, rfidSessionData.totalBytesReceived)
        && Objects.equals(this.sessionKey, rfidSessionData.sessionKey)
        && Objects.equals(this.sessionTerminal, rfidSessionData.sessionTerminal)
        && Objects.equals(this.sessionProcedure, rfidSessionData.sessionProcedure)
        && Objects.equals(this.securityObjects, rfidSessionData.securityObjects)
        && Objects.equals(this.status, rfidSessionData.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        virtualMode,
        sdKVersion,
        driverVersion,
        firmwareVersion,
        applications,
        accessControls,
        cardProperties,
        extLeSupport,
        processTime,
        rootFiles,
        totalBytesSent,
        totalBytesReceived,
        sessionKey,
        sessionTerminal,
        sessionProcedure,
        securityObjects,
        status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RfidSessionData {\n");
    sb.append("    virtualMode: ").append(toIndentedString(virtualMode)).append("\n");
    sb.append("    sdKVersion: ").append(toIndentedString(sdKVersion)).append("\n");
    sb.append("    driverVersion: ").append(toIndentedString(driverVersion)).append("\n");
    sb.append("    firmwareVersion: ").append(toIndentedString(firmwareVersion)).append("\n");
    sb.append("    applications: ").append(toIndentedString(applications)).append("\n");
    sb.append("    accessControls: ").append(toIndentedString(accessControls)).append("\n");
    sb.append("    cardProperties: ").append(toIndentedString(cardProperties)).append("\n");
    sb.append("    extLeSupport: ").append(toIndentedString(extLeSupport)).append("\n");
    sb.append("    processTime: ").append(toIndentedString(processTime)).append("\n");
    sb.append("    rootFiles: ").append(toIndentedString(rootFiles)).append("\n");
    sb.append("    totalBytesSent: ").append(toIndentedString(totalBytesSent)).append("\n");
    sb.append("    totalBytesReceived: ").append(toIndentedString(totalBytesReceived)).append("\n");
    sb.append("    sessionKey: ").append(toIndentedString(sessionKey)).append("\n");
    sb.append("    sessionTerminal: ").append(toIndentedString(sessionTerminal)).append("\n");
    sb.append("    sessionProcedure: ").append(toIndentedString(sessionProcedure)).append("\n");
    sb.append("    securityObjects: ").append(toIndentedString(securityObjects)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields =
        new HashSet<String>(
            Arrays.asList(
                "VirtualMode",
                "SDKVersion",
                "DriverVersion",
                "FirmwareVersion",
                "Applications",
                "AccessControls",
                "CardProperties",
                "ExtLeSupport",
                "ProcessTime",
                "RootFiles",
                "TotalBytesSent",
                "TotalBytesReceived",
                "Session_key",
                "Session_terminal",
                "Session_procedure",
                "SecurityObjects",
                "Status"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields =
        new HashSet<String>(
            Arrays.asList(
                "Applications",
                "AccessControls",
                "CardProperties",
                "ExtLeSupport",
                "ProcessTime",
                "RootFiles",
                "TotalBytesSent",
                "TotalBytesReceived",
                "Session_key",
                "Session_terminal",
                "Session_procedure",
                "SecurityObjects"));
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RfidSessionData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!RfidSessionData.openapiRequiredFields
          .isEmpty()) { // has required fields but JSON element is null
        System.err.println(
            String.format(
                "The required field(s) %s in RfidSessionData is not found in the empty JSON string",
                RfidSessionData.openapiRequiredFields.toString()));
      }
    }

    // check to make sure all required properties/fields are present in the JSON string
    for (String requiredField : RfidSessionData.openapiRequiredFields) {
      if (jsonElement.getAsJsonObject().get(requiredField) == null) {
        System.err.println(
            String.format(
                "The required field `%s` is not found in the JSON string: %s",
                requiredField, jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if ((jsonObj.get("SDKVersion") != null && !jsonObj.get("SDKVersion").isJsonNull())
        && !jsonObj.get("SDKVersion").isJsonPrimitive()) {
      System.err.println(
          String.format(
              "Expected the field `SDKVersion` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("SDKVersion").toString()));
    }
    if ((jsonObj.get("DriverVersion") != null && !jsonObj.get("DriverVersion").isJsonNull())
        && !jsonObj.get("DriverVersion").isJsonPrimitive()) {
      System.err.println(
          String.format(
              "Expected the field `DriverVersion` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("DriverVersion").toString()));
    }
    if ((jsonObj.get("FirmwareVersion") != null && !jsonObj.get("FirmwareVersion").isJsonNull())
        && !jsonObj.get("FirmwareVersion").isJsonPrimitive()) {
      System.err.println(
          String.format(
              "Expected the field `FirmwareVersion` to be a primitive type in the JSON string but got `%s`",
              jsonObj.get("FirmwareVersion").toString()));
    }
    // ensure the json data is an array
    if (!jsonObj.get("Applications").isJsonArray()) {
      System.err.println(
          String.format(
              "Expected the field `Applications` to be an array in the JSON string but got `%s`",
              jsonObj.get("Applications").toString()));
    }

    JsonArray jsonArrayapplications = jsonObj.getAsJsonArray("Applications");
    // validate the required field `Applications` (array)
    for (int i = 0; i < jsonArrayapplications.size(); i++) {
      RfidApplication.validateJsonElement(jsonArrayapplications.get(i));
    }
    ;
    // ensure the json data is an array
    if (!jsonObj.get("AccessControls").isJsonArray()) {
      System.err.println(
          String.format(
              "Expected the field `AccessControls` to be an array in the JSON string but got `%s`",
              jsonObj.get("AccessControls").toString()));
    }

    JsonArray jsonArrayaccessControls = jsonObj.getAsJsonArray("AccessControls");
    // validate the required field `AccessControls` (array)
    for (int i = 0; i < jsonArrayaccessControls.size(); i++) {
      RfidAccessControlInfo.validateJsonElement(jsonArrayaccessControls.get(i));
    }
    ;
    // validate the required field `CardProperties`
    RfidCardPropertiesExt.validateJsonElement(jsonObj.get("CardProperties"));
    // validate the required field `ExtLeSupport`
    RFIDErrorCodes.validateJsonElement(jsonObj.get("ExtLeSupport"));
    // ensure the required json array is present
    if (jsonObj.get("RootFiles") == null) {
      System.err.println(
          "Expected the field `linkedContent` to be an array in the JSON string but got `null`");
    } else if (!jsonObj.get("RootFiles").isJsonArray()) {
      System.err.println(
          String.format(
              "Expected the field `RootFiles` to be an array in the JSON string but got `%s`",
              jsonObj.get("RootFiles").toString()));
    }
    // validate the required field `Session_key`
    RfidAccessKey.validateJsonElement(jsonObj.get("Session_key"));
    // validate the required field `Session_terminal`
    RfidTerminal.validateJsonElement(jsonObj.get("Session_terminal"));
    // validate the required field `Session_procedure`
    RfidAuthenticationProcedureType.validateJsonElement(jsonObj.get("Session_procedure"));
    // ensure the json data is an array
    if (!jsonObj.get("SecurityObjects").isJsonArray()) {
      System.err.println(
          String.format(
              "Expected the field `SecurityObjects` to be an array in the JSON string but got `%s`",
              jsonObj.get("SecurityObjects").toString()));
    }

    JsonArray jsonArraysecurityObjects = jsonObj.getAsJsonArray("SecurityObjects");
    // validate the required field `SecurityObjects` (array)
    for (int i = 0; i < jsonArraysecurityObjects.size(); i++) {
      RfidSecurityObject.validateJsonElement(jsonArraysecurityObjects.get(i));
    }
    ;
    // validate the optional field `Status`
    if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
      CheckResult.validateJsonElement(jsonObj.get("Status"));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!RfidSessionData.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'RfidSessionData' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<RfidSessionData> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(RfidSessionData.class));

      return (TypeAdapter<T>)
          new TypeAdapter<RfidSessionData>() {
            @Override
            public void write(JsonWriter out, RfidSessionData value) throws IOException {
              JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
              elementAdapter.write(out, obj);
            }

            @Override
            public RfidSessionData read(JsonReader in) throws IOException {
              JsonElement jsonElement = elementAdapter.read(in);
              validateJsonElement(jsonElement);
              return thisAdapter.fromJsonTree(jsonElement);
            }
          }.nullSafe();
    }
  }

  /**
   * Create an instance of RfidSessionData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RfidSessionData
   * @throws IOException if the JSON string is invalid with respect to RfidSessionData
   */
  public static RfidSessionData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RfidSessionData.class);
  }

  /**
   * Convert an instance of RfidSessionData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
